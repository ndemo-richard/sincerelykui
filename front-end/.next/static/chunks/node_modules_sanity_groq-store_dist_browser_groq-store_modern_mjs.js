"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_sanity_groq-store_dist_browser_groq-store_modern_mjs"],{

/***/ "./node_modules/fast-deep-equal/index.js":
/*!***********************************************!*\
  !*** ./node_modules/fast-deep-equal/index.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmFzdC1kZWVwLWVxdWFsL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOzs7O0FBSUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFVBQVU7QUFDakM7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsVUFBVTtBQUMvQjs7QUFFQSxxQkFBcUIsVUFBVTtBQUMvQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9mYXN0LWRlZXAtZXF1YWwvaW5kZXguanM/MGJjNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8vIGRvIG5vdCBlZGl0IC5qcyBmaWxlcyBkaXJlY3RseSAtIGVkaXQgc3JjL2luZGV4LmpzdFxuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09ICdvYmplY3QnICYmIHR5cGVvZiBiID09ICdvYmplY3QnKSB7XG4gICAgaWYgKGEuY29uc3RydWN0b3IgIT09IGIuY29uc3RydWN0b3IpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBsZW5ndGgsIGksIGtleXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgICBpZiAoIWVxdWFsKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cblxuXG4gICAgaWYgKGEuY29uc3RydWN0b3IgPT09IFJlZ0V4cCkgcmV0dXJuIGEuc291cmNlID09PSBiLnNvdXJjZSAmJiBhLmZsYWdzID09PSBiLmZsYWdzO1xuICAgIGlmIChhLnZhbHVlT2YgIT09IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZikgcmV0dXJuIGEudmFsdWVPZigpID09PSBiLnZhbHVlT2YoKTtcbiAgICBpZiAoYS50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZykgcmV0dXJuIGEudG9TdHJpbmcoKSA9PT0gYi50b1N0cmluZygpO1xuXG4gICAga2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIGlmIChsZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KVxuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwga2V5c1tpXSkpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyB0cnVlIGlmIGJvdGggTmFOLCBmYWxzZSBvdGhlcndpc2VcbiAgcmV0dXJuIGEhPT1hICYmIGIhPT1iO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/fast-deep-equal/index.js\n"));

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/incremental-patcher.js":
/*!*************************************************************!*\
  !*** ./node_modules/mendoza/lib/esm/incremental-patcher.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyPatch\": function() { return /* binding */ applyPatch; },\n/* harmony export */   \"getType\": function() { return /* binding */ getType; },\n/* harmony export */   \"rebaseValue\": function() { return /* binding */ rebaseValue; },\n/* harmony export */   \"unwrap\": function() { return /* binding */ unwrap; },\n/* harmony export */   \"wrap\": function() { return /* binding */ wrap; }\n/* harmony export */ });\n/* harmony import */ var _internal_patcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal-patcher */ \"./node_modules/mendoza/lib/esm/internal-patcher.js\");\n/* harmony import */ var _utf8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utf8 */ \"./node_modules/mendoza/lib/esm/utf8.js\");\n\n\nvar Model = /** @class */ (function () {\n    function Model(meta) {\n        this.meta = meta;\n    }\n    Model.prototype.wrap = function (data) {\n        return this.wrapWithMeta(data, this.meta, this.meta);\n    };\n    Model.prototype.wrapWithMeta = function (data, startMeta, endMeta) {\n        if (endMeta === void 0) { endMeta = this.meta; }\n        return { data: data, startMeta: startMeta, endMeta: endMeta };\n    };\n    Model.prototype.asObject = function (value) {\n        if (!value.content) {\n            var fields = {};\n            for (var _i = 0, _a = Object.entries(value.data); _i < _a.length; _i++) {\n                var _b = _a[_i], key = _b[0], val = _b[1];\n                fields[key] = this.wrapWithMeta(val, value.startMeta);\n            }\n            value.content = { type: 'object', fields: fields };\n        }\n        return value.content;\n    };\n    Model.prototype.asArray = function (value) {\n        var _this = this;\n        if (!value.content) {\n            var elements = value.data.map(function (item) { return _this.wrapWithMeta(item, value.startMeta); });\n            var metas = elements.map(function () { return _this.meta; });\n            value.content = { type: 'array', elements: elements, metas: metas };\n        }\n        return value.content;\n    };\n    Model.prototype.asString = function (value) {\n        if (!value.content) {\n            var str = value.data;\n            var part = {\n                value: str,\n                utf8size: (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8stringSize)(str),\n                uses: [],\n                startMeta: value.startMeta,\n                endMeta: value.endMeta\n            };\n            value.content = this.stringFromParts([part]);\n        }\n        return value.content;\n    };\n    Model.prototype.stringFromParts = function (parts) {\n        var str = {\n            type: 'string',\n            parts: parts\n        };\n        for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n            var part = parts_1[_i];\n            part.uses.push(str);\n        }\n        return str;\n    };\n    Model.prototype.objectGetKeys = function (value) {\n        if (value.content) {\n            return Object.keys(value.content.fields);\n        }\n        else {\n            return Object.keys(value.data);\n        }\n    };\n    Model.prototype.objectGetField = function (value, key) {\n        var obj = this.asObject(value);\n        return obj.fields[key];\n    };\n    Model.prototype.arrayGetElement = function (value, idx) {\n        var arr = this.asArray(value);\n        return arr.elements[idx];\n    };\n    Model.prototype.finalize = function (content) {\n        this.updateEndMeta(content);\n        return { content: content, startMeta: this.meta, endMeta: this.meta };\n    };\n    Model.prototype.markChanged = function (value) {\n        return this.wrap(unwrap(value));\n    };\n    Model.prototype.updateEndMeta = function (content) {\n        if (content.type == 'string') {\n            for (var _i = 0, _a = content.parts; _i < _a.length; _i++) {\n                var part = _a[_i];\n                part.endMeta = this.meta;\n            }\n        }\n        else {\n            if (content.type === 'array') {\n                for (var _b = 0, _c = content.elements; _b < _c.length; _b++) {\n                    var val = _c[_b];\n                    if (val.content && val.endMeta !== this.meta) {\n                        this.updateEndMeta(val.content);\n                    }\n                    val.endMeta = this.meta;\n                }\n            }\n            else {\n                for (var _d = 0, _e = Object.values(content.fields); _d < _e.length; _d++) {\n                    var val = _e[_d];\n                    if (val.content && val.endMeta !== this.meta) {\n                        this.updateEndMeta(val.content);\n                    }\n                    val.endMeta = this.meta;\n                }\n            }\n        }\n    };\n    Model.prototype.copyString = function (value) {\n        if (value) {\n            var other = this.asString(value);\n            return this.stringFromParts(other.parts.slice());\n        }\n        else {\n            return {\n                type: 'string',\n                parts: []\n            };\n        }\n    };\n    Model.prototype.copyObject = function (value) {\n        var obj = {\n            type: 'object',\n            fields: {}\n        };\n        if (value) {\n            var other = this.asObject(value);\n            Object.assign(obj.fields, other.fields);\n        }\n        return obj;\n    };\n    Model.prototype.copyArray = function (value) {\n        var arr = value ? this.asArray(value) : null;\n        var elements = arr ? arr.elements : [];\n        var metas = arr ? arr.metas : [];\n        return {\n            type: 'array',\n            elements: elements,\n            metas: metas\n        };\n    };\n    Model.prototype.objectSetField = function (target, key, value) {\n        target.fields[key] = value;\n    };\n    Model.prototype.objectDeleteField = function (target, key) {\n        delete target.fields[key];\n    };\n    Model.prototype.arrayAppendValue = function (target, value) {\n        target.elements.push(value);\n        target.metas.push(this.meta);\n    };\n    Model.prototype.arrayAppendSlice = function (target, source, left, right) {\n        var _a, _b;\n        var arr = this.asArray(source);\n        var samePosition = arr.elements.length === left;\n        (_a = target.elements).push.apply(_a, arr.elements.slice(left, right));\n        if (samePosition) {\n            (_b = target.metas).push.apply(_b, arr.metas.slice(left, right));\n        }\n        else {\n            for (var i = left; i < right; i++) {\n                target.metas.push(this.meta);\n            }\n        }\n    };\n    Model.prototype.stringAppendValue = function (target, value) {\n        var str = this.asString(value);\n        for (var _i = 0, _a = str.parts; _i < _a.length; _i++) {\n            var part = _a[_i];\n            this.stringAppendPart(target, part);\n        }\n    };\n    Model.prototype.stringAppendPart = function (target, part) {\n        target.parts.push(part);\n        part.uses.push(target);\n    };\n    Model.prototype.resolveStringPart = function (str, from, len) {\n        if (len === 0)\n            return from;\n        for (var i = from; i < str.parts.length; i++) {\n            var part = str.parts[i];\n            if (len === part.utf8size) {\n                // Matches perfect!\n                return i + 1;\n            }\n            if (len < part.utf8size) {\n                // It's a part of this chunk. We now need to split it up.\n                this.splitString(part, len);\n                return i + 1;\n            }\n            len -= part.utf8size;\n        }\n        throw new Error('splitting string out of bounds');\n    };\n    Model.prototype.splitString = function (part, idx) {\n        var leftValue;\n        var rightValue;\n        var leftSize = idx;\n        var rightSize = part.utf8size - leftSize;\n        // idx is here in UTF-8 index, not codepoint index.\n        // This means we might to adjust for multi-byte characters.\n        if (part.utf8size !== part.value.length) {\n            var byteCount = 0;\n            for (idx = 0; byteCount < leftSize; idx++) {\n                var code = part.value.codePointAt(idx);\n                var size = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8charSize)(code);\n                if (size === 4)\n                    idx++; // Surrogate pair.\n                byteCount += size;\n            }\n        }\n        leftValue = part.value.slice(0, idx);\n        rightValue = part.value.slice(idx);\n        var newPart = {\n            value: rightValue,\n            utf8size: rightSize,\n            uses: part.uses.slice(),\n            startMeta: part.startMeta,\n            endMeta: part.endMeta\n        };\n        part.value = leftValue;\n        part.utf8size = leftSize;\n        for (var _i = 0, _a = part.uses; _i < _a.length; _i++) {\n            var use = _a[_i];\n            // Insert the new part.\n            var idx_1 = use.parts.indexOf(part);\n            if (idx_1 === -1)\n                throw new Error('bug: mismatch between string parts and use.');\n            use.parts.splice(idx_1 + 1, 0, newPart);\n        }\n    };\n    Model.prototype.stringAppendSlice = function (target, source, left, right) {\n        var str = this.asString(source);\n        var firstPart = this.resolveStringPart(str, 0, left);\n        var lastPart = this.resolveStringPart(str, firstPart, right - left);\n        for (var i = firstPart; i < lastPart; i++) {\n            var part = str.parts[i];\n            this.stringAppendPart(target, part);\n        }\n    };\n    return Model;\n}());\n// Turns a native JavaScript object into a Value with a given origin.\nfunction wrap(data, meta) {\n    return { data: data, startMeta: meta, endMeta: meta };\n}\n// Converts a Value into a native JavaScript type.\nfunction unwrap(value) {\n    if (typeof value.data !== 'undefined')\n        return value.data;\n    var result;\n    var content = value.content;\n    switch (content.type) {\n        case 'string':\n            result = content.parts.map(function (part) { return part.value; }).join('');\n            break;\n        case 'array':\n            result = content.elements.map(function (val) { return unwrap(val); });\n            break;\n        case 'object': {\n            result = {};\n            for (var _i = 0, _a = Object.entries(content.fields); _i < _a.length; _i++) {\n                var _b = _a[_i], key = _b[0], val = _b[1];\n                result[key] = unwrap(val);\n            }\n        }\n    }\n    value.data = result;\n    return result;\n}\n// Returns the type of a Value.\nfunction getType(value) {\n    if (value.content)\n        return value.content.type;\n    if (Array.isArray(value.data))\n        return 'array';\n    if (value.data === null)\n        return 'null';\n    return typeof value.data;\n}\n// Updates the `right` value such that it reuses as much as possible from the `left` value.\nfunction rebaseValue(left, right) {\n    var leftType = getType(left);\n    var rightType = getType(right);\n    if (leftType !== rightType)\n        return right;\n    var leftModel = new Model(left.endMeta);\n    var rightModel = new Model(right.endMeta);\n    switch (leftType) {\n        case 'object': {\n            var leftObj = leftModel.asObject(left);\n            var rightObj = rightModel.asObject(right);\n            // Number of fields which are identical in left and right.\n            var identicalFieldCount = 0;\n            var leftFieldCount = Object.keys(leftObj.fields).length;\n            var rightFieldCount = Object.keys(rightObj.fields).length;\n            for (var _i = 0, _a = Object.entries(rightObj.fields); _i < _a.length; _i++) {\n                var _b = _a[_i], key = _b[0], rightVal = _b[1];\n                var leftVal = leftObj.fields[key];\n                if (leftVal) {\n                    rightObj.fields[key] = rebaseValue(leftVal, rightVal);\n                    if (rightObj.fields[key] === leftVal) {\n                        identicalFieldCount++;\n                    }\n                }\n            }\n            var isIdentical = leftFieldCount === rightFieldCount && leftFieldCount === identicalFieldCount;\n            return isIdentical ? left : right;\n        }\n        case 'array': {\n            var leftArr = leftModel.asArray(left);\n            var rightArr = rightModel.asArray(right);\n            if (leftArr.elements.length !== rightArr.elements.length) {\n                break;\n            }\n            var numRebased = 0;\n            for (var i = 0; i < rightArr.elements.length; i++) {\n                rightArr.elements[i] = rebaseValue(leftArr.elements[i], rightArr.elements[i]);\n                if (rightArr.elements[i] !== leftArr.elements[i]) {\n                    numRebased++;\n                }\n            }\n            return numRebased === 0 ? left : right;\n        }\n        case 'null':\n        case 'boolean':\n        case 'number': {\n            if (unwrap(left) === unwrap(right))\n                return left;\n            break;\n        }\n        case 'string': {\n            var leftRaw = unwrap(left);\n            var rightRaw = unwrap(right);\n            if (leftRaw === rightRaw)\n                return left;\n            var result = rightModel.copyString(null);\n            var prefix = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.commonPrefix)(leftRaw, rightRaw);\n            var suffix = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.commonSuffix)(leftRaw, rightRaw, prefix);\n            var rightLen = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8stringSize)(rightRaw);\n            var leftLen = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8stringSize)(leftRaw);\n            if (0 < prefix) {\n                rightModel.stringAppendSlice(result, left, 0, prefix);\n            }\n            if (prefix < rightLen - suffix) {\n                rightModel.stringAppendSlice(result, right, prefix, rightLen - suffix);\n            }\n            if (leftLen - suffix < leftLen) {\n                rightModel.stringAppendSlice(result, left, leftLen - suffix, leftLen);\n            }\n            var value = rightModel.finalize(result);\n            if (unwrap(value) !== rightRaw)\n                throw new Error('incorrect string rebase');\n            return value;\n        }\n    }\n    return right;\n}\nfunction applyPatch(left, patch, startMeta) {\n    var model = new Model(startMeta);\n    var patcher = new _internal_patcher__WEBPACK_IMPORTED_MODULE_1__.Patcher(model, left, patch);\n    return patcher.process();\n}\n//# sourceMappingURL=incremental-patcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/incremental-patcher.js\n"));

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/index.js":
/*!***********************************************!*\
  !*** ./node_modules/mendoza/lib/esm/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyPatch\": function() { return /* reexport safe */ _simple_patcher__WEBPACK_IMPORTED_MODULE_1__.applyPatch; },\n/* harmony export */   \"incremental\": function() { return /* reexport module object */ _incremental_patcher__WEBPACK_IMPORTED_MODULE_0__; }\n/* harmony export */ });\n/* harmony import */ var _incremental_patcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./incremental-patcher */ \"./node_modules/mendoza/lib/esm/incremental-patcher.js\");\n/* harmony import */ var _simple_patcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simple-patcher */ \"./node_modules/mendoza/lib/esm/simple-patcher.js\");\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWVuZG96YS9saWIvZXNtL2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBdUQ7QUFDZjtBQUNNO0FBQzlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9tZW5kb3phL2xpYi9lc20vaW5kZXguanM/NGE1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBpbmNyZW1lbnRhbF8xIGZyb20gJy4vaW5jcmVtZW50YWwtcGF0Y2hlcic7XG5leHBvcnQgeyBpbmNyZW1lbnRhbF8xIGFzIGluY3JlbWVudGFsIH07XG5leHBvcnQgeyBhcHBseVBhdGNoIH0gZnJvbSAnLi9zaW1wbGUtcGF0Y2hlcic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/index.js\n"));

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/internal-patcher.js":
/*!**********************************************************!*\
  !*** ./node_modules/mendoza/lib/esm/internal-patcher.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Patcher\": function() { return /* binding */ Patcher; }\n/* harmony export */ });\nvar OPS = [\n    'Value',\n    'Copy',\n    'Blank',\n    'ReturnIntoArray',\n    'ReturnIntoObject',\n    'ReturnIntoObjectSameKey',\n    'PushField',\n    'PushElement',\n    'PushParent',\n    'Pop',\n    'PushFieldCopy',\n    'PushFieldBlank',\n    'PushElementCopy',\n    'PushElementBlank',\n    'ReturnIntoObjectPop',\n    'ReturnIntoObjectSameKeyPop',\n    'ReturnIntoArrayPop',\n    'ObjectSetFieldValue',\n    'ObjectCopyField',\n    'ObjectDeleteField',\n    'ArrayAppendValue',\n    'ArrayAppendSlice',\n    'StringAppendString',\n    'StringAppendSlice'\n];\nvar Patcher = /** @class */ (function () {\n    function Patcher(model, root, patch) {\n        this.i = 0;\n        this.inputStack = [];\n        this.outputStack = [];\n        this.model = model;\n        this.root = root;\n        this.patch = patch;\n    }\n    Patcher.prototype.read = function () {\n        return this.patch[this.i++];\n    };\n    Patcher.prototype.process = function () {\n        this.inputStack.push({ value: this.root });\n        this.outputStack.push({ value: this.root });\n        for (; this.i < this.patch.length;) {\n            var opcode = this.read();\n            var op = OPS[opcode];\n            if (!op)\n                throw new Error(\"Unknown opcode: \" + opcode);\n            var processor = \"process\" + op;\n            this[processor].apply(this);\n        }\n        var entry = this.outputStack.pop();\n        return this.finalizeOutput(entry);\n    };\n    Patcher.prototype.inputEntry = function () {\n        return this.inputStack[this.inputStack.length - 1];\n    };\n    Patcher.prototype.inputKey = function (entry, idx) {\n        if (!entry.keys) {\n            entry.keys = this.model.objectGetKeys(entry.value).sort();\n        }\n        return entry.keys[idx];\n    };\n    Patcher.prototype.outputEntry = function () {\n        return this.outputStack[this.outputStack.length - 1];\n    };\n    Patcher.prototype.outputArray = function () {\n        var entry = this.outputEntry();\n        if (!entry.writeValue) {\n            entry.writeValue = this.model.copyArray(entry.value);\n        }\n        return entry.writeValue;\n    };\n    Patcher.prototype.outputObject = function () {\n        var entry = this.outputEntry();\n        if (!entry.writeValue) {\n            entry.writeValue = this.model.copyObject(entry.value);\n        }\n        return entry.writeValue;\n    };\n    Patcher.prototype.outputString = function () {\n        var entry = this.outputEntry();\n        if (!entry.writeValue) {\n            entry.writeValue = this.model.copyString(entry.value);\n        }\n        return entry.writeValue;\n    };\n    Patcher.prototype.finalizeOutput = function (entry) {\n        if (entry.writeValue) {\n            return this.model.finalize(entry.writeValue);\n        }\n        else {\n            return entry.value;\n        }\n    };\n    // Processors:\n    Patcher.prototype.processValue = function () {\n        var value = this.model.wrap(this.read());\n        this.outputStack.push({ value: value });\n    };\n    Patcher.prototype.processCopy = function () {\n        var input = this.inputEntry();\n        this.outputStack.push({ value: input.value });\n    };\n    Patcher.prototype.processBlank = function () {\n        this.outputStack.push({ value: null });\n    };\n    Patcher.prototype.processReturnIntoArray = function () {\n        var entry = this.outputStack.pop();\n        var result = this.finalizeOutput(entry);\n        var arr = this.outputArray();\n        this.model.arrayAppendValue(arr, result);\n    };\n    Patcher.prototype.processReturnIntoObject = function () {\n        var key = this.read();\n        var entry = this.outputStack.pop();\n        var result = this.finalizeOutput(entry);\n        result = this.model.markChanged(result);\n        var obj = this.outputObject();\n        this.model.objectSetField(obj, key, result);\n    };\n    Patcher.prototype.processReturnIntoObjectSameKey = function () {\n        var input = this.inputEntry();\n        var entry = this.outputStack.pop();\n        var result = this.finalizeOutput(entry);\n        var obj = this.outputObject();\n        this.model.objectSetField(obj, input.key, result);\n    };\n    Patcher.prototype.processPushField = function () {\n        var idx = this.read();\n        var entry = this.inputEntry();\n        var key = this.inputKey(entry, idx);\n        var value = this.model.objectGetField(entry.value, key);\n        this.inputStack.push({ value: value, key: key });\n    };\n    Patcher.prototype.processPushElement = function () {\n        var idx = this.read();\n        var entry = this.inputEntry();\n        var value = this.model.arrayGetElement(entry.value, idx);\n        this.inputStack.push({ value: value });\n    };\n    Patcher.prototype.processPop = function () {\n        this.inputStack.pop();\n    };\n    Patcher.prototype.processPushFieldCopy = function () {\n        this.processPushField();\n        this.processCopy();\n    };\n    Patcher.prototype.processPushFieldBlank = function () {\n        this.processPushField();\n        this.processBlank();\n    };\n    Patcher.prototype.processPushElementCopy = function () {\n        this.processPushElement();\n        this.processCopy();\n    };\n    Patcher.prototype.processPushElementBlank = function () {\n        this.processPushElement();\n        this.processBlank();\n    };\n    Patcher.prototype.processReturnIntoObjectPop = function () {\n        this.processReturnIntoObject();\n        this.processPop();\n    };\n    Patcher.prototype.processReturnIntoObjectSameKeyPop = function () {\n        this.processReturnIntoObjectSameKey();\n        this.processPop();\n    };\n    Patcher.prototype.processReturnIntoArrayPop = function () {\n        this.processReturnIntoArray();\n        this.processPop();\n    };\n    Patcher.prototype.processObjectSetFieldValue = function () {\n        this.processValue();\n        this.processReturnIntoObject();\n    };\n    Patcher.prototype.processObjectCopyField = function () {\n        this.processPushField();\n        this.processCopy();\n        this.processReturnIntoObjectSameKey();\n        this.processPop();\n    };\n    Patcher.prototype.processObjectDeleteField = function () {\n        var idx = this.read();\n        var entry = this.inputEntry();\n        var key = this.inputKey(entry, idx);\n        var obj = this.outputObject();\n        this.model.objectDeleteField(obj, key);\n    };\n    Patcher.prototype.processArrayAppendValue = function () {\n        var value = this.model.wrap(this.read());\n        var arr = this.outputArray();\n        this.model.arrayAppendValue(arr, value);\n    };\n    Patcher.prototype.processArrayAppendSlice = function () {\n        var left = this.read();\n        var right = this.read();\n        var str = this.outputArray();\n        var val = this.inputEntry().value;\n        this.model.arrayAppendSlice(str, val, left, right);\n    };\n    Patcher.prototype.processStringAppendString = function () {\n        var value = this.model.wrap(this.read());\n        var str = this.outputString();\n        this.model.stringAppendValue(str, value);\n    };\n    Patcher.prototype.processStringAppendSlice = function () {\n        var left = this.read();\n        var right = this.read();\n        var str = this.outputString();\n        var val = this.inputEntry().value;\n        this.model.stringAppendSlice(str, val, left, right);\n    };\n    return Patcher;\n}());\n\n//# sourceMappingURL=internal-patcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/internal-patcher.js\n"));

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/simple-patcher.js":
/*!********************************************************!*\
  !*** ./node_modules/mendoza/lib/esm/simple-patcher.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"applyPatch\": function() { return /* binding */ applyPatch; }\n/* harmony export */ });\n/* harmony import */ var _internal_patcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal-patcher */ \"./node_modules/mendoza/lib/esm/internal-patcher.js\");\n/* harmony import */ var _utf8__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utf8 */ \"./node_modules/mendoza/lib/esm/utf8.js\");\n\n\nvar Model = {\n    wrap: function (data) {\n        return data;\n    },\n    finalize: function (b) {\n        if (Array.isArray(b)) {\n            return b;\n        }\n        else {\n            return b.data;\n        }\n    },\n    markChanged: function (value) {\n        return value;\n    },\n    objectGetKeys: function (value) {\n        return Object.keys(value);\n    },\n    objectGetField: function (value, key) {\n        return value[key];\n    },\n    arrayGetElement: function (value, idx) {\n        return value[idx];\n    },\n    copyObject: function (value) {\n        var res = {\n            type: 'object',\n            data: {}\n        };\n        if (value !== null) {\n            for (var _i = 0, _a = Object.entries(value); _i < _a.length; _i++) {\n                var _b = _a[_i], key = _b[0], val = _b[1];\n                res.data[key] = val;\n            }\n        }\n        return res;\n    },\n    copyArray: function (value) {\n        if (value === null)\n            return [];\n        return value.slice();\n    },\n    copyString: function (value) {\n        return {\n            type: 'string',\n            data: value === null ? '' : value\n        };\n    },\n    objectSetField: function (target, key, value) {\n        target.data[key] = value;\n    },\n    objectDeleteField: function (target, key) {\n        delete target.data[key];\n    },\n    arrayAppendValue: function (target, value) {\n        target.push(value);\n    },\n    arrayAppendSlice: function (target, source, left, right) {\n        target.push.apply(target, source.slice(left, right));\n    },\n    stringAppendSlice: function (target, source, left, right) {\n        var sourceString = source;\n        var leftPos = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8resolveIndex)(sourceString, left);\n        var rightPos = (0,_utf8__WEBPACK_IMPORTED_MODULE_0__.utf8resolveIndex)(sourceString, right, leftPos);\n        target.data += sourceString.slice(leftPos, rightPos);\n    },\n    stringAppendValue: function (target, value) {\n        target.data += value;\n    }\n};\n// Applies a patch on a JavaScript object.\nfunction applyPatch(left, patch) {\n    var root = left; // No need to wrap because the representation is the same.\n    var patcher = new _internal_patcher__WEBPACK_IMPORTED_MODULE_1__.Patcher(Model, root, patch);\n    return patcher.process();\n}\n//# sourceMappingURL=simple-patcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWVuZG96YS9saWIvZXNtL3NpbXBsZS1wYXRjaGVyLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUNIO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxnQkFBZ0I7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHNCQUFzQix1REFBZ0I7QUFDdEMsdUJBQXVCLHVEQUFnQjtBQUN2QztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxxQkFBcUI7QUFDckIsc0JBQXNCLHNEQUFPO0FBQzdCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVuZG96YS9saWIvZXNtL3NpbXBsZS1wYXRjaGVyLmpzPzY5YjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGF0Y2hlciB9IGZyb20gJy4vaW50ZXJuYWwtcGF0Y2hlcic7XG5pbXBvcnQgeyB1dGY4cmVzb2x2ZUluZGV4IH0gZnJvbSAnLi91dGY4JztcbnZhciBNb2RlbCA9IHtcbiAgICB3cmFwOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9LFxuICAgIGZpbmFsaXplOiBmdW5jdGlvbiAoYikge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShiKSkge1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYi5kYXRhO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtYXJrQ2hhbmdlZDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIG9iamVjdEdldEtleXM6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpO1xuICAgIH0sXG4gICAgb2JqZWN0R2V0RmllbGQ6IGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVtrZXldO1xuICAgIH0sXG4gICAgYXJyYXlHZXRFbGVtZW50OiBmdW5jdGlvbiAodmFsdWUsIGlkeCkge1xuICAgICAgICByZXR1cm4gdmFsdWVbaWR4XTtcbiAgICB9LFxuICAgIGNvcHlPYmplY3Q6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzID0ge1xuICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgICAgICBkYXRhOiB7fVxuICAgICAgICB9O1xuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3QuZW50cmllcyh2YWx1ZSk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9iID0gX2FbX2ldLCBrZXkgPSBfYlswXSwgdmFsID0gX2JbMV07XG4gICAgICAgICAgICAgICAgcmVzLmRhdGFba2V5XSA9IHZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH0sXG4gICAgY29weUFycmF5OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICByZXR1cm4gdmFsdWUuc2xpY2UoKTtcbiAgICB9LFxuICAgIGNvcHlTdHJpbmc6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICBkYXRhOiB2YWx1ZSA9PT0gbnVsbCA/ICcnIDogdmFsdWVcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIG9iamVjdFNldEZpZWxkOiBmdW5jdGlvbiAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIHRhcmdldC5kYXRhW2tleV0gPSB2YWx1ZTtcbiAgICB9LFxuICAgIG9iamVjdERlbGV0ZUZpZWxkOiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgZGVsZXRlIHRhcmdldC5kYXRhW2tleV07XG4gICAgfSxcbiAgICBhcnJheUFwcGVuZFZhbHVlOiBmdW5jdGlvbiAodGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgICB0YXJnZXQucHVzaCh2YWx1ZSk7XG4gICAgfSxcbiAgICBhcnJheUFwcGVuZFNsaWNlOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UsIGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHRhcmdldC5wdXNoLmFwcGx5KHRhcmdldCwgc291cmNlLnNsaWNlKGxlZnQsIHJpZ2h0KSk7XG4gICAgfSxcbiAgICBzdHJpbmdBcHBlbmRTbGljZTogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBsZWZ0LCByaWdodCkge1xuICAgICAgICB2YXIgc291cmNlU3RyaW5nID0gc291cmNlO1xuICAgICAgICB2YXIgbGVmdFBvcyA9IHV0ZjhyZXNvbHZlSW5kZXgoc291cmNlU3RyaW5nLCBsZWZ0KTtcbiAgICAgICAgdmFyIHJpZ2h0UG9zID0gdXRmOHJlc29sdmVJbmRleChzb3VyY2VTdHJpbmcsIHJpZ2h0LCBsZWZ0UG9zKTtcbiAgICAgICAgdGFyZ2V0LmRhdGEgKz0gc291cmNlU3RyaW5nLnNsaWNlKGxlZnRQb3MsIHJpZ2h0UG9zKTtcbiAgICB9LFxuICAgIHN0cmluZ0FwcGVuZFZhbHVlOiBmdW5jdGlvbiAodGFyZ2V0LCB2YWx1ZSkge1xuICAgICAgICB0YXJnZXQuZGF0YSArPSB2YWx1ZTtcbiAgICB9XG59O1xuLy8gQXBwbGllcyBhIHBhdGNoIG9uIGEgSmF2YVNjcmlwdCBvYmplY3QuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlQYXRjaChsZWZ0LCBwYXRjaCkge1xuICAgIHZhciByb290ID0gbGVmdDsgLy8gTm8gbmVlZCB0byB3cmFwIGJlY2F1c2UgdGhlIHJlcHJlc2VudGF0aW9uIGlzIHRoZSBzYW1lLlxuICAgIHZhciBwYXRjaGVyID0gbmV3IFBhdGNoZXIoTW9kZWwsIHJvb3QsIHBhdGNoKTtcbiAgICByZXR1cm4gcGF0Y2hlci5wcm9jZXNzKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaW1wbGUtcGF0Y2hlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/simple-patcher.js\n"));

/***/ }),

/***/ "./node_modules/mendoza/lib/esm/utf8.js":
/*!**********************************************!*\
  !*** ./node_modules/mendoza/lib/esm/utf8.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"commonPrefix\": function() { return /* binding */ commonPrefix; },\n/* harmony export */   \"commonSuffix\": function() { return /* binding */ commonSuffix; },\n/* harmony export */   \"utf8charSize\": function() { return /* binding */ utf8charSize; },\n/* harmony export */   \"utf8resolveIndex\": function() { return /* binding */ utf8resolveIndex; },\n/* harmony export */   \"utf8stringSize\": function() { return /* binding */ utf8stringSize; }\n/* harmony export */ });\nfunction utf8charSize(code) {\n    if (code >> 16) {\n        return 4;\n    }\n    else if (code >> 11) {\n        return 3;\n    }\n    else if (code >> 7) {\n        return 2;\n    }\n    else {\n        return 1;\n    }\n}\nfunction utf8stringSize(str) {\n    var b = 0;\n    for (var i = 0; i < str.length; i++) {\n        var code = str.codePointAt(i);\n        var size = utf8charSize(code);\n        if (size == 4)\n            i++;\n        b += size;\n    }\n    return b;\n}\n/** Converts an UTF-8 byte index into a UCS-2 index. */\nfunction utf8resolveIndex(str, idx, start) {\n    if (start === void 0) { start = 0; }\n    var byteCount = start;\n    var ucsIdx = 0;\n    for (ucsIdx = start; byteCount < idx; ucsIdx++) {\n        var code = str.codePointAt(ucsIdx);\n        var size = utf8charSize(code);\n        if (size === 4)\n            ucsIdx++; // Surrogate pair.\n        byteCount += size;\n    }\n    return ucsIdx;\n}\nfunction commonPrefix(str, str2) {\n    var len = Math.min(str.length, str2.length);\n    var b = 0;\n    for (var i = 0; i < len;) {\n        var aPoint = str.codePointAt(i);\n        var bPoint = str2.codePointAt(i);\n        if (aPoint !== bPoint)\n            return b;\n        var size = utf8charSize(aPoint);\n        b += size;\n        i += size === 4 ? 2 : 1;\n    }\n    return b;\n}\nfunction commonSuffix(str, str2, prefix) {\n    if (prefix === void 0) { prefix = 0; }\n    var len = Math.min(str.length, str2.length) - prefix;\n    var b = 0;\n    for (var i = 0; i < len;) {\n        var aPoint = str.codePointAt(str.length - 1 - i);\n        var bPoint = str2.codePointAt(str2.length - 1 - i);\n        if (aPoint !== bPoint)\n            return b;\n        var size = utf8charSize(aPoint);\n        b += size;\n        i += size === 4 ? 2 : 1;\n    }\n    return b;\n}\n//# sourceMappingURL=utf8.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbWVuZG96YS9saWIvZXNtL3V0ZjguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLG9CQUFvQixnQkFBZ0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBLHlCQUF5QixpQkFBaUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbWVuZG96YS9saWIvZXNtL3V0ZjguanM/ZWM4MCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gdXRmOGNoYXJTaXplKGNvZGUpIHtcbiAgICBpZiAoY29kZSA+PiAxNikge1xuICAgICAgICByZXR1cm4gNDtcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZSA+PiAxMSkge1xuICAgICAgICByZXR1cm4gMztcbiAgICB9XG4gICAgZWxzZSBpZiAoY29kZSA+PiA3KSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHV0ZjhzdHJpbmdTaXplKHN0cikge1xuICAgIHZhciBiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY29kZSA9IHN0ci5jb2RlUG9pbnRBdChpKTtcbiAgICAgICAgdmFyIHNpemUgPSB1dGY4Y2hhclNpemUoY29kZSk7XG4gICAgICAgIGlmIChzaXplID09IDQpXG4gICAgICAgICAgICBpKys7XG4gICAgICAgIGIgKz0gc2l6ZTtcbiAgICB9XG4gICAgcmV0dXJuIGI7XG59XG4vKiogQ29udmVydHMgYW4gVVRGLTggYnl0ZSBpbmRleCBpbnRvIGEgVUNTLTIgaW5kZXguICovXG5leHBvcnQgZnVuY3Rpb24gdXRmOHJlc29sdmVJbmRleChzdHIsIGlkeCwgc3RhcnQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICB2YXIgYnl0ZUNvdW50ID0gc3RhcnQ7XG4gICAgdmFyIHVjc0lkeCA9IDA7XG4gICAgZm9yICh1Y3NJZHggPSBzdGFydDsgYnl0ZUNvdW50IDwgaWR4OyB1Y3NJZHgrKykge1xuICAgICAgICB2YXIgY29kZSA9IHN0ci5jb2RlUG9pbnRBdCh1Y3NJZHgpO1xuICAgICAgICB2YXIgc2l6ZSA9IHV0ZjhjaGFyU2l6ZShjb2RlKTtcbiAgICAgICAgaWYgKHNpemUgPT09IDQpXG4gICAgICAgICAgICB1Y3NJZHgrKzsgLy8gU3Vycm9nYXRlIHBhaXIuXG4gICAgICAgIGJ5dGVDb3VudCArPSBzaXplO1xuICAgIH1cbiAgICByZXR1cm4gdWNzSWR4O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbW1vblByZWZpeChzdHIsIHN0cjIpIHtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgc3RyMi5sZW5ndGgpO1xuICAgIHZhciBiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjspIHtcbiAgICAgICAgdmFyIGFQb2ludCA9IHN0ci5jb2RlUG9pbnRBdChpKTtcbiAgICAgICAgdmFyIGJQb2ludCA9IHN0cjIuY29kZVBvaW50QXQoaSk7XG4gICAgICAgIGlmIChhUG9pbnQgIT09IGJQb2ludClcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB2YXIgc2l6ZSA9IHV0ZjhjaGFyU2l6ZShhUG9pbnQpO1xuICAgICAgICBiICs9IHNpemU7XG4gICAgICAgIGkgKz0gc2l6ZSA9PT0gNCA/IDIgOiAxO1xuICAgIH1cbiAgICByZXR1cm4gYjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21tb25TdWZmaXgoc3RyLCBzdHIyLCBwcmVmaXgpIHtcbiAgICBpZiAocHJlZml4ID09PSB2b2lkIDApIHsgcHJlZml4ID0gMDsgfVxuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBzdHIyLmxlbmd0aCkgLSBwcmVmaXg7XG4gICAgdmFyIGIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOykge1xuICAgICAgICB2YXIgYVBvaW50ID0gc3RyLmNvZGVQb2ludEF0KHN0ci5sZW5ndGggLSAxIC0gaSk7XG4gICAgICAgIHZhciBiUG9pbnQgPSBzdHIyLmNvZGVQb2ludEF0KHN0cjIubGVuZ3RoIC0gMSAtIGkpO1xuICAgICAgICBpZiAoYVBvaW50ICE9PSBiUG9pbnQpXG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgdmFyIHNpemUgPSB1dGY4Y2hhclNpemUoYVBvaW50KTtcbiAgICAgICAgYiArPSBzaXplO1xuICAgICAgICBpICs9IHNpemUgPT09IDQgPyAyIDogMTtcbiAgICB9XG4gICAgcmV0dXJuIGI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGY4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/mendoza/lib/esm/utf8.js\n"));

/***/ }),

/***/ "./node_modules/@sanity/groq-store/dist/browser/groq-store.modern.mjs":
/*!****************************************************************************!*\
  !*** ./node_modules/@sanity/groq-store/dist/browser/groq-store.modern.mjs ***!
  \****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"groq\": function() { return /* reexport default export from named module */ groq__WEBPACK_IMPORTED_MODULE_0__; },\n/* harmony export */   \"groqStore\": function() { return /* binding */ w; }\n/* harmony export */ });\n/* harmony import */ var groq__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! groq */ \"./node_modules/groq/lib/groq.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var throttle_debounce__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! throttle-debounce */ \"./node_modules/throttle-debounce/esm/index.js\");\n/* harmony import */ var groq_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! groq-js */ \"./node_modules/groq-js/dist/1.esm.mjs\");\n/* harmony import */ var mendoza__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mendoza */ \"./node_modules/mendoza/lib/esm/index.js\");\nfunction s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s.apply(this,arguments)}const a=(e,t,r)=>{(e=>\"undefined\"!=typeof window&&e.addEventListener===window.EventSource.prototype.addEventListener)(e)&&e.addEventListener(t,r,!1),e.addEventListener(t,r)};function c(e,t,r){const{projectId:n,dataset:o,token:i}=t,s=new e(`https://${n}.api.sanity.io/v1/data/listen/${o}?query=*&effectFormat=mendoza`,{withCredentials:!0,headers:i?{Authorization:`Bearer ${i}`}:void 0});var c;return a(s,\"welcome\",r.open),a(s,\"mutation\",(c=r.next,e=>{let t;try{t=JSON.parse(e.data)}catch(e){return}c(t)})),a(s,\"channelError\",e=>{let t;s.close();try{t=JSON.parse(e.data)}catch(e){return void r.error(new Error(\"Unknown error parsing listener message\"))}r.error(new Error(t.message||t.error||`Listener returned HTTP ${t.statusCode}`))}),a(s,\"error\",e=>{const t=\"undefined\"!=typeof window&&window.location.origin,n=t?`, and that the CORS-origin (${t}) is allowed`:\"\",o=function(e){return\"object\"==typeof e&&null!==e&&\"message\"in e}(e)?` (${e.message})`:\"\";r.error(new Error(`Error establishing listener - check that the project ID and dataset are correct${n}${o}`))}),{unsubscribe:()=>Promise.resolve(s.close())}}function u(e){return e._id.startsWith(\"drafts.\")?e._id.slice(7):e._id}function d(e,t){const r=s({},e);return delete r._rev,(0,mendoza__WEBPACK_IMPORTED_MODULE_3__.applyPatch)(r,t)}function l(){return Promise.resolve()}let f,p=e=>e;const h=async function({projectId:e,dataset:t,token:r,documentLimit:n,includeTypes:o=[]}){const i=`https://${e}.api.sanity.io/v1/data/export/${t}?${o.length>0?new URLSearchParams({types:null==o?void 0:o.join(\",\")}):\"\"}`,s=r?{Authorization:`Bearer ${r}`}:void 0,a=await fetch(i,{credentials:\"include\",headers:s});if(200!==a.status)throw new Error(`Error streaming dataset: ${c=await a.json(),\"object\"==typeof c&&\"error\"in c&&\"message\"in c?c.message||c.error:\"<unknown error>\"}`);var c;const u=function(e){if(!e)throw new Error(\"Failed to read body from response\");let t,r=!1;function n(){r=!0,t&&t.cancel()}return new ReadableStream({start(o){t=e.getReader();const i=new TextDecoder;let s=\"\";t.read().then(async function e(a){if(a.done){if(r)return;return s=s.trim(),0===s.length||o.enqueue(JSON.parse(s)),void o.close()}s+=i.decode(a.value,{stream:!0});const c=s.split(\"\\n\");for(let e=0;e<c.length-1;++e){const t=c[e].trim();if(0!==t.length)try{o.enqueue(JSON.parse(t))}catch(e){return o.error(e),void n()}}if(s=c[c.length-1],t)try{e(await t.read())}catch(e){o.error(e)}}).catch(e=>o.error(e))},cancel:n})}(a.body),d=u.getReader(),l=[];let f,p;do{if(f=await d.read(),p=f.value,m(p))throw new Error(`Error streaming dataset: ${p.error}`);if(p&&!p._id.startsWith(\"_.\")&&l.push(p),n&&l.length>n)throw d.cancel(\"Reached document limit\"),new Error(`Error streaming dataset: Reached limit of ${n} documents. Try using the includeTypes option to reduce the amount of documents, or increase the limit.`)}while(!f.done);return l};function m(e){return!!e&&\"error\"in e&&\"object\"==typeof e.error&&null!==e.error&&\"description\"in e.error&&\"string\"==typeof e.error.description&&!(\"_id\"in e)}function w(i){var a;!function(){const e=[\"EventSource\",\"ReadableStream\",\"fetch\"].filter(e=>!(e in window));if(e.length>0)throw new Error(`Browser not supported. Missing browser APIs: ${e.join(\", \")}`)}();const m=null!=(a=i.EventSource)?a:window.EventSource;if(i.token){if(!i.EventSource)throw new Error(\"When the `token` option is used the `EventSource` option must also be provided.\");if(i.EventSource===window.EventSource)throw new Error(\"When the `token` option is used the `EventSource` option must also be provided. EventSource cannot be `window.EventSource`, as it does not support passing a token.\")}return function(i,a){let h=[];const m=(0,throttle_debounce__WEBPACK_IMPORTED_MODULE_2__.throttle)(i.subscriptionThrottleMs||50,function(){w.forEach(E)}),w=[];let v;async function g(){v||(v=function(e,t,{getDocuments:r,EventSource:n}){const{projectId:o,dataset:i,listen:a,overlayDrafts:f,documentLimit:p,token:h,includeTypes:m}=e;if(!a)return{unsubscribe:l,loaded:r({projectId:o,dataset:i,documentLimit:p,token:h,includeTypes:m}).then(_).then(l)};const w=new Map;let v;const g=[];let y,E;const b=new Promise((e,t)=>{y=e,E=t});let S,$,j;return{unsubscribe:c(n,e,{next:function(e){v?(function(e){if(!e.effects||e.documentId.startsWith(\"_.\"))return;const t=w.get(e.documentId)||null;!function(e,t){const r=w.get(e),n=v||[],o=r?n.indexOf(r):-1;-1===o&&t?(n.push(t),w.set(e,t)):t?(n.splice(o,1,t),w.set(e,t)):(n.splice(o,1),w.delete(e))}(e.documentId,d(t,e.effects.apply))}(e),function(e,t){clearTimeout(j),$!==t.transactionId&&S?(_(S),$=void 0):($=t.transactionId,S=e.slice()),j=setTimeout(_,25,e.slice())}(v,e)):g.push(e)},open:async function(){const e=await r({projectId:o,dataset:i,documentLimit:p,token:h,includeTypes:m});v=function(e,t){const r=new Map;return t.forEach(e=>{const t=r.get(e.documentId)||[];t.push(e),r.set(e.documentId,t)}),r.forEach((t,r)=>{const n=e.find(e=>e._id===r);if(!n)return void console.warn(\"Received mutation for missing document %s\",r);let o=!1,i=n;t.forEach(e=>{o=o||e.previousRev===n._rev,o&&e.effects&&(i=d(i,e.effects.apply))}),e.splice(e.indexOf(n),1,i)}),e}(e,g),v.forEach(e=>w.set(e._id,e)),_(v),y()},error:e=>E(e)}).unsubscribe,loaded:b};function _(e){S=void 0,j=void 0,$=void 0,t(f?function(e){const t=new Map;return e.forEach(e=>{const r=t.get(u(e));e._id.startsWith(\"drafts.\")?t.set(u(e),function(e){return s({},e,{_id:u(e)})}(e)):r||t.set(e._id,e)}),Array.from(t.values())}(e):e)}}(i,e=>{h=e,m()},a)),await v.loaded}async function y(e,t){await g();const r=(0,groq_js__WEBPACK_IMPORTED_MODULE_4__.parse)(e,{params:t});return(await (0,groq_js__WEBPACK_IMPORTED_MODULE_4__.evaluate)(r,{dataset:h,params:t})).get()}function E(e){return y(e.query,e.params).then(r=>{\"previousResult\"in e&&fast_deep_equal__WEBPACK_IMPORTED_MODULE_1__(e.previousResult,r)||(e.previousResult=r,e.callback(void 0,r))}).catch(t=>{e.callback(t)})}return{query:y,getDocument:async function(t){return await g(),y(groq__WEBPACK_IMPORTED_MODULE_0__(f||(f=p`*[_id == $id][0]`)),{id:t})},getDocuments:async function(e){return await g(),y(`[${e.map(e=>`*[_id == \"${e}\"][0]`).join(\",\\n\")}]`)},subscribe:function(e,t,r){if(!i.listen)throw new Error(\"Cannot use `subscribe()` without `listen: true`\");const n={query:e,params:t,callback:r};w.push(n);let o=!1;return E(n),{unsubscribe:()=>(o||(o=!0,w.splice(w.indexOf(n),1)),Promise.resolve())}},close:function(){return m.cancel(),v?v.unsubscribe():Promise.resolve()}}}(i,{EventSource:m,getDocuments:h})}\n//# sourceMappingURL=groq-store.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@sanity/groq-store/dist/browser/groq-store.modern.mjs\n"));

/***/ }),

/***/ "./node_modules/groq-js/dist/1.esm.mjs":
/*!*********************************************!*\
  !*** ./node_modules/groq-js/dist/1.esm.mjs ***!
  \*********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"evaluate\": function() { return /* binding */ evaluateQuery; },\n/* harmony export */   \"parse\": function() { return /* binding */ parse; }\n/* harmony export */ });\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}var MarkProcessor = /** @class */ (function () {\n    function MarkProcessor(string, marks, parseOptions) {\n        this.allowBoost = false;\n        this.string = string;\n        this.marks = marks;\n        this.index = 0;\n        this.parseOptions = parseOptions;\n    }\n    MarkProcessor.prototype.hasMark = function (pos) {\n        if (pos === void 0) { pos = 0; }\n        return this.index + pos < this.marks.length;\n    };\n    MarkProcessor.prototype.getMark = function (pos) {\n        if (pos === void 0) { pos = 0; }\n        return this.marks[this.index + pos];\n    };\n    MarkProcessor.prototype.shift = function () {\n        this.index += 1;\n    };\n    MarkProcessor.prototype.process = function (visitor) {\n        var mark = this.marks[this.index];\n        this.shift();\n        var func = visitor[mark.name];\n        if (!func) {\n            throw new Error(\"Unknown handler: \".concat(mark.name));\n        }\n        return func.call(visitor, this, mark);\n    };\n    MarkProcessor.prototype.processString = function () {\n        this.shift();\n        return this.processStringEnd();\n    };\n    MarkProcessor.prototype.processStringEnd = function () {\n        var prev = this.marks[this.index - 1];\n        var curr = this.marks[this.index];\n        this.shift();\n        return this.string.slice(prev.position, curr.position);\n    };\n    MarkProcessor.prototype.slice = function (len) {\n        var pos = this.marks[this.index].position;\n        return this.string.slice(pos, pos + len);\n    };\n    return MarkProcessor;\n}());var RFC3339_REGEX = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|([-+]\\d{2}:\\d{2}))$/;\nfunction parseRFC3339(str) {\n    if (RFC3339_REGEX.test(str)) {\n        return new Date(str);\n    }\n    return null;\n}\nfunction formatRFC3339(d) {\n    var year = addLeadingZero(d.getUTCFullYear(), 4);\n    var month = addLeadingZero(d.getUTCMonth() + 1, 2);\n    var day = addLeadingZero(d.getUTCDate(), 2);\n    var hour = addLeadingZero(d.getUTCHours(), 2);\n    var minute = addLeadingZero(d.getUTCMinutes(), 2);\n    var second = addLeadingZero(d.getUTCSeconds(), 2);\n    var fractionalSecond = '';\n    var millis = d.getMilliseconds();\n    if (millis != 0) {\n        fractionalSecond = \".\".concat(addLeadingZero(millis, 3));\n    }\n    return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second).concat(fractionalSecond, \"Z\");\n}\nfunction addLeadingZero(num, targetLength) {\n    var str = num.toString();\n    while (str.length < targetLength) {\n        str = \"0\".concat(str);\n    }\n    return str;\n}function escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nfunction pathRegExp(pattern) {\n    var re = [];\n    for (var _i = 0, _a = pattern.split('.'); _i < _a.length; _i++) {\n        var part = _a[_i];\n        if (part === '*') {\n            re.push('[^.]+');\n        }\n        else if (part === '**') {\n            re.push('.*');\n        }\n        else {\n            re.push(escapeRegExp(part));\n        }\n    }\n    return new RegExp(\"^\".concat(re.join('.'), \"$\"));\n}\nvar Path = /** @class */ (function () {\n    function Path(pattern) {\n        this.pattern = pattern;\n        this.patternRe = pathRegExp(pattern);\n    }\n    Path.prototype.matches = function (str) {\n        return this.patternRe.test(str);\n    };\n    Path.prototype.toJSON = function () {\n        return this.pattern;\n    };\n    return Path;\n}());var StreamValue = /** @class */ (function () {\n    function StreamValue(generator) {\n        this.type = 'stream';\n        this.generator = generator;\n        this.ticker = null;\n        this.isDone = false;\n        this.data = [];\n    }\n    // eslint-disable-next-line class-methods-use-this\n    StreamValue.prototype.isArray = function () {\n        return true;\n    };\n    StreamValue.prototype.get = function () {\n        var e_1, _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var result, _b, _c, value, _d, _e, e_1_1;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        result = [];\n                        _f.label = 1;\n                    case 1:\n                        _f.trys.push([1, 7, 8, 13]);\n                        _b = __asyncValues(this);\n                        _f.label = 2;\n                    case 2: return [4 /*yield*/, _b.next()];\n                    case 3:\n                        if (!(_c = _f.sent(), !_c.done)) return [3 /*break*/, 6];\n                        value = _c.value;\n                        _e = (_d = result).push;\n                        return [4 /*yield*/, value.get()];\n                    case 4:\n                        _e.apply(_d, [_f.sent()]);\n                        _f.label = 5;\n                    case 5: return [3 /*break*/, 2];\n                    case 6: return [3 /*break*/, 13];\n                    case 7:\n                        e_1_1 = _f.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 13];\n                    case 8:\n                        _f.trys.push([8, , 11, 12]);\n                        if (!(_c && !_c.done && (_a = _b[\"return\"]))) return [3 /*break*/, 10];\n                        return [4 /*yield*/, _a.call(_b)];\n                    case 9:\n                        _f.sent();\n                        _f.label = 10;\n                    case 10: return [3 /*break*/, 12];\n                    case 11:\n                        if (e_1) throw e_1.error;\n                        return [7 /*endfinally*/];\n                    case 12: return [7 /*endfinally*/];\n                    case 13: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    StreamValue.prototype[Symbol.asyncIterator] = function () {\n        return __asyncGenerator(this, arguments, function _a() {\n            var i;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        i = 0;\n                        _b.label = 1;\n                    case 1:\n                        _b.label = 2;\n                    case 2:\n                        if (!(i < this.data.length)) return [3 /*break*/, 6];\n                        return [4 /*yield*/, __await(this.data[i])];\n                    case 3: return [4 /*yield*/, _b.sent()];\n                    case 4:\n                        _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        i++;\n                        return [3 /*break*/, 2];\n                    case 6:\n                        if (!this.isDone) return [3 /*break*/, 8];\n                        return [4 /*yield*/, __await(void 0)];\n                    case 7: return [2 /*return*/, _b.sent()];\n                    case 8: return [4 /*yield*/, __await(this._nextTick())];\n                    case 9:\n                        _b.sent();\n                        return [3 /*break*/, 1];\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    StreamValue.prototype._nextTick = function () {\n        var _this = this;\n        if (this.ticker) {\n            return this.ticker;\n        }\n        var currentResolver;\n        var setupTicker = function () {\n            _this.ticker = new Promise(function (resolve) {\n                currentResolver = resolve;\n            });\n        };\n        var tick = function () {\n            currentResolver();\n            setupTicker();\n        };\n        var fetch = function () { return __awaiter(_this, void 0, void 0, function () {\n            var _a, _b, value, e_2_1;\n            var e_2, _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _d.trys.push([0, 5, 6, 11]);\n                        _a = __asyncValues(this.generator());\n                        _d.label = 1;\n                    case 1: return [4 /*yield*/, _a.next()];\n                    case 2:\n                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 4];\n                        value = _b.value;\n                        this.data.push(value);\n                        tick();\n                        _d.label = 3;\n                    case 3: return [3 /*break*/, 1];\n                    case 4: return [3 /*break*/, 11];\n                    case 5:\n                        e_2_1 = _d.sent();\n                        e_2 = { error: e_2_1 };\n                        return [3 /*break*/, 11];\n                    case 6:\n                        _d.trys.push([6, , 9, 10]);\n                        if (!(_b && !_b.done && (_c = _a[\"return\"]))) return [3 /*break*/, 8];\n                        return [4 /*yield*/, _c.call(_a)];\n                    case 7:\n                        _d.sent();\n                        _d.label = 8;\n                    case 8: return [3 /*break*/, 10];\n                    case 9:\n                        if (e_2) throw e_2.error;\n                        return [7 /*endfinally*/];\n                    case 10: return [7 /*endfinally*/];\n                    case 11:\n                        this.isDone = true;\n                        tick();\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        setupTicker();\n        fetch();\n        return this.ticker;\n    };\n    return StreamValue;\n}());var StaticValue = /** @class */ (function () {\n    function StaticValue(data, type) {\n        this.data = data;\n        this.type = type;\n    }\n    StaticValue.prototype.isArray = function () {\n        return this.type === 'array';\n    };\n    // eslint-disable-next-line require-await\n    StaticValue.prototype.get = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.data];\n            });\n        });\n    };\n    StaticValue.prototype[Symbol.asyncIterator] = function () {\n        if (Array.isArray(this.data)) {\n            return (function (data) {\n                var _i, data_1, element;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            _i = 0, data_1 = data;\n                            _a.label = 1;\n                        case 1:\n                            if (!(_i < data_1.length)) return [3 /*break*/, 4];\n                            element = data_1[_i];\n                            return [4 /*yield*/, fromJS(element)];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3:\n                            _i++;\n                            return [3 /*break*/, 1];\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            })(this.data);\n        }\n        throw new Error(\"Cannot iterate over: \".concat(this.type));\n    };\n    return StaticValue;\n}());\nvar NULL_VALUE = new StaticValue(null, 'null');\nvar TRUE_VALUE = new StaticValue(true, 'boolean');\nvar FALSE_VALUE = new StaticValue(false, 'boolean');\nvar DateTime = /** @class */ (function () {\n    function DateTime(date) {\n        this.date = date;\n    }\n    DateTime.parseToValue = function (str) {\n        var date = parseRFC3339(str);\n        if (date) {\n            return new StaticValue(new DateTime(date), 'datetime');\n        }\n        return NULL_VALUE;\n    };\n    DateTime.prototype.equals = function (other) {\n        return this.date.getTime() == other.date.getTime();\n    };\n    DateTime.prototype.add = function (secs) {\n        var copy = new Date(this.date.getTime());\n        copy.setTime(copy.getTime() + secs * 1000);\n        return new DateTime(copy);\n    };\n    DateTime.prototype.difference = function (other) {\n        return (this.date.getTime() - other.date.getTime()) / 1000;\n    };\n    DateTime.prototype.compareTo = function (other) {\n        return this.date.getTime() - other.date.getTime();\n    };\n    DateTime.prototype.toString = function () {\n        return formatRFC3339(this.date);\n    };\n    DateTime.prototype.toJSON = function () {\n        return this.toString();\n    };\n    return DateTime;\n}());\nfunction fromNumber(num) {\n    if (Number.isFinite(num)) {\n        return new StaticValue(num, 'number');\n    }\n    return NULL_VALUE;\n}\nfunction fromString(str) {\n    return new StaticValue(str, 'string');\n}\nfunction fromDateTime(dt) {\n    return new StaticValue(dt, 'datetime');\n}\nfunction fromPath(path) {\n    return new StaticValue(path, 'path');\n}\nfunction isIterator(obj) {\n    return obj && typeof obj.next === 'function';\n}\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction fromJS(val) {\n    if (isIterator(val)) {\n        return new StreamValue(function () {\n            return __asyncGenerator(this, arguments, function () {\n                var val_1, val_1_1, value, e_1_1;\n                var e_1, _a;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _b.trys.push([0, 7, 8, 13]);\n                            val_1 = __asyncValues(val);\n                            _b.label = 1;\n                        case 1: return [4 /*yield*/, __await(val_1.next())];\n                        case 2:\n                            if (!(val_1_1 = _b.sent(), !val_1_1.done)) return [3 /*break*/, 6];\n                            value = val_1_1.value;\n                            return [4 /*yield*/, __await(fromJS(value))];\n                        case 3: return [4 /*yield*/, _b.sent()];\n                        case 4:\n                            _b.sent();\n                            _b.label = 5;\n                        case 5: return [3 /*break*/, 1];\n                        case 6: return [3 /*break*/, 13];\n                        case 7:\n                            e_1_1 = _b.sent();\n                            e_1 = { error: e_1_1 };\n                            return [3 /*break*/, 13];\n                        case 8:\n                            _b.trys.push([8, , 11, 12]);\n                            if (!(val_1_1 && !val_1_1.done && (_a = val_1[\"return\"]))) return [3 /*break*/, 10];\n                            return [4 /*yield*/, __await(_a.call(val_1))];\n                        case 9:\n                            _b.sent();\n                            _b.label = 10;\n                        case 10: return [3 /*break*/, 12];\n                        case 11:\n                            if (e_1) throw e_1.error;\n                            return [7 /*endfinally*/];\n                        case 12: return [7 /*endfinally*/];\n                        case 13: return [2 /*return*/];\n                    }\n                });\n            });\n        });\n    }\n    else if (val === null || val === undefined) {\n        return NULL_VALUE;\n    }\n    return new StaticValue(val, getType(val));\n}\n/**\n * Returns the type of the value.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction getType(data) {\n    if (data === null || typeof data === 'undefined') {\n        return 'null';\n    }\n    if (Array.isArray(data)) {\n        return 'array';\n    }\n    if (data instanceof Path) {\n        return 'path';\n    }\n    if (data instanceof DateTime) {\n        return 'datetime';\n    }\n    return typeof data;\n}var TYPE_ORDER = {\n    datetime: 1,\n    number: 2,\n    string: 3,\n    boolean: 4\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction partialCompare(a, b) {\n    var aType = getType(a);\n    var bType = getType(b);\n    if (aType !== bType) {\n        return null;\n    }\n    switch (aType) {\n        case 'number':\n        case 'boolean':\n            return a - b;\n        case 'string':\n            if (a < b)\n                return -1;\n            if (a > b)\n                return 1;\n            return 0;\n        case 'datetime':\n            return a.compareTo(b);\n        default:\n            return null;\n    }\n}\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction totalCompare(a, b) {\n    var aType = getType(a);\n    var bType = getType(b);\n    var aTypeOrder = TYPE_ORDER[aType] || 100;\n    var bTypeOrder = TYPE_ORDER[bType] || 100;\n    if (aTypeOrder !== bTypeOrder) {\n        return aTypeOrder - bTypeOrder;\n    }\n    var result = partialCompare(a, b);\n    if (result === null) {\n        result = 0;\n    }\n    return result;\n}var CHARS = /([^!@#$%^&*(),\\\\/?\";:{}|[\\]+<>\\s-])+/g;\nvar CHARS_WITH_WILDCARD = /([^!@#$%^&(),\\\\/?\";:{}|[\\]+<>\\s-])+/g;\nvar EDGE_CHARS = /(\\b\\.+|\\.+\\b)/g;\nvar MAX_TERM_LENGTH = 1024;\nfunction matchText(tokens, patterns) {\n    if (tokens.length === 0 || patterns.length === 0) {\n        return false;\n    }\n    return patterns.every(function (pattern) { return pattern(tokens); });\n}\nfunction matchTokenize(text) {\n    return text.replace(EDGE_CHARS, '').match(CHARS) || [];\n}\nfunction matchAnalyzePattern(text) {\n    var termsRe = matchPatternRegex(text);\n    return termsRe.map(function (re) { return function (tokens) { return tokens.some(function (token) { return re.test(token); }); }; });\n}\nfunction matchPatternRegex(text) {\n    var terms = text.replace(EDGE_CHARS, '').match(CHARS_WITH_WILDCARD) || [];\n    return terms.map(function (term) { return new RegExp(\"^\".concat(term.slice(0, MAX_TERM_LENGTH).replace(/\\*/g, '.*'), \"$\"), 'i'); });\n}\nfunction gatherText(value, cb) {\n    var value_1, value_1_1;\n    var e_1, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var success, part, e_1_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    if (value.type === 'string') {\n                        cb(value.data);\n                        return [2 /*return*/, true];\n                    }\n                    if (!value.isArray()) return [3 /*break*/, 13];\n                    success = true;\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, 6, 7, 12]);\n                    value_1 = __asyncValues(value);\n                    _b.label = 2;\n                case 2: return [4 /*yield*/, value_1.next()];\n                case 3:\n                    if (!(value_1_1 = _b.sent(), !value_1_1.done)) return [3 /*break*/, 5];\n                    part = value_1_1.value;\n                    if (part.type === 'string') {\n                        cb(part.data);\n                    }\n                    else {\n                        success = false;\n                    }\n                    _b.label = 4;\n                case 4: return [3 /*break*/, 2];\n                case 5: return [3 /*break*/, 12];\n                case 6:\n                    e_1_1 = _b.sent();\n                    e_1 = { error: e_1_1 };\n                    return [3 /*break*/, 12];\n                case 7:\n                    _b.trys.push([7, , 10, 11]);\n                    if (!(value_1_1 && !value_1_1.done && (_a = value_1[\"return\"]))) return [3 /*break*/, 9];\n                    return [4 /*yield*/, _a.call(value_1)];\n                case 8:\n                    _b.sent();\n                    _b.label = 9;\n                case 9: return [3 /*break*/, 11];\n                case 10:\n                    if (e_1) throw e_1.error;\n                    return [7 /*endfinally*/];\n                case 11: return [7 /*endfinally*/];\n                case 12: return [2 /*return*/, success];\n                case 13: return [2 /*return*/, false];\n            }\n        });\n    });\n}// BM25 similarity constants\nvar BM25k = 1.2;\nfunction evaluateScore(node, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var innerScore, boost, _a, leftScore, rightScore, leftScore, rightScore, res;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    if (node.type === 'OpCall' && node.op === 'match') {\n                        return [2 /*return*/, evaluateMatchScore(node.left, node.right, scope, execute)];\n                    }\n                    if (!(node.type === 'FuncCall' && node.name === 'boost')) return [3 /*break*/, 3];\n                    return [4 /*yield*/, evaluateScore(node.args[0], scope, execute)];\n                case 1:\n                    innerScore = _b.sent();\n                    return [4 /*yield*/, execute(node.args[1], scope)];\n                case 2:\n                    boost = _b.sent();\n                    if (boost.type === 'number' && innerScore > 0) {\n                        return [2 /*return*/, innerScore + boost.data];\n                    }\n                    return [2 /*return*/, 0];\n                case 3:\n                    _a = node.type;\n                    switch (_a) {\n                        case 'Or': return [3 /*break*/, 4];\n                        case 'And': return [3 /*break*/, 7];\n                    }\n                    return [3 /*break*/, 10];\n                case 4: return [4 /*yield*/, evaluateScore(node.left, scope, execute)];\n                case 5:\n                    leftScore = _b.sent();\n                    return [4 /*yield*/, evaluateScore(node.right, scope, execute)];\n                case 6:\n                    rightScore = _b.sent();\n                    return [2 /*return*/, leftScore + rightScore];\n                case 7: return [4 /*yield*/, evaluateScore(node.left, scope, execute)];\n                case 8:\n                    leftScore = _b.sent();\n                    return [4 /*yield*/, evaluateScore(node.right, scope, execute)];\n                case 9:\n                    rightScore = _b.sent();\n                    if (leftScore === 0 || rightScore === 0)\n                        return [2 /*return*/, 0];\n                    return [2 /*return*/, leftScore + rightScore];\n                case 10: return [4 /*yield*/, execute(node, scope)];\n                case 11:\n                    res = _b.sent();\n                    return [2 /*return*/, res.type === 'boolean' && res.data === true ? 1 : 0];\n            }\n        });\n    });\n}\nfunction evaluateMatchScore(left, right, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var text, pattern, tokens, terms, didSucceed, score, _loop_1, _i, terms_1, re;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, execute(left, scope)];\n                case 1:\n                    text = _a.sent();\n                    return [4 /*yield*/, execute(right, scope)];\n                case 2:\n                    pattern = _a.sent();\n                    tokens = [];\n                    terms = [];\n                    return [4 /*yield*/, gatherText(text, function (part) {\n                            tokens = tokens.concat(matchTokenize(part));\n                        })];\n                case 3:\n                    _a.sent();\n                    return [4 /*yield*/, gatherText(pattern, function (part) {\n                            terms = terms.concat(matchPatternRegex(part));\n                        })];\n                case 4:\n                    didSucceed = _a.sent();\n                    if (!didSucceed) {\n                        return [2 /*return*/, 0];\n                    }\n                    if (tokens.length === 0 || terms.length === 0) {\n                        return [2 /*return*/, 0];\n                    }\n                    score = 0;\n                    _loop_1 = function (re) {\n                        var freq = tokens.reduce(function (c, token) { return c + (re.test(token) ? 1 : 0); }, 0);\n                        score += (freq * (BM25k + 1)) / (freq + BM25k);\n                    };\n                    for (_i = 0, terms_1 = terms; _i < terms_1.length; _i++) {\n                        re = terms_1[_i];\n                        _loop_1(re);\n                    }\n                    return [2 /*return*/, score];\n            }\n        });\n    });\n}function portableTextContent(value) {\n    return __awaiter(this, void 0, void 0, function () {\n        var texts;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!(value.type === 'object')) return [3 /*break*/, 1];\n                    return [2 /*return*/, blockText(value.data)];\n                case 1:\n                    if (!value.isArray()) return [3 /*break*/, 3];\n                    return [4 /*yield*/, arrayText(value)];\n                case 2:\n                    texts = _a.sent();\n                    if (texts.length > 0) {\n                        return [2 /*return*/, texts.join('\\n\\n')];\n                    }\n                    _a.label = 3;\n                case 3: return [2 /*return*/, null];\n            }\n        });\n    });\n}\nfunction arrayText(value, result) {\n    var value_1, value_1_1;\n    var e_1, _a;\n    if (result === void 0) { result = []; }\n    return __awaiter(this, void 0, void 0, function () {\n        var block, text, e_1_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _b.trys.push([0, 7, 8, 13]);\n                    value_1 = __asyncValues(value);\n                    _b.label = 1;\n                case 1: return [4 /*yield*/, value_1.next()];\n                case 2:\n                    if (!(value_1_1 = _b.sent(), !value_1_1.done)) return [3 /*break*/, 6];\n                    block = value_1_1.value;\n                    if (!(block.type === 'object')) return [3 /*break*/, 3];\n                    text = blockText(block.data);\n                    if (text !== null)\n                        result.push(text);\n                    return [3 /*break*/, 5];\n                case 3:\n                    if (!block.isArray()) return [3 /*break*/, 5];\n                    return [4 /*yield*/, arrayText(block, result)];\n                case 4:\n                    _b.sent();\n                    _b.label = 5;\n                case 5: return [3 /*break*/, 1];\n                case 6: return [3 /*break*/, 13];\n                case 7:\n                    e_1_1 = _b.sent();\n                    e_1 = { error: e_1_1 };\n                    return [3 /*break*/, 13];\n                case 8:\n                    _b.trys.push([8, , 11, 12]);\n                    if (!(value_1_1 && !value_1_1.done && (_a = value_1[\"return\"]))) return [3 /*break*/, 10];\n                    return [4 /*yield*/, _a.call(value_1)];\n                case 9:\n                    _b.sent();\n                    _b.label = 10;\n                case 10: return [3 /*break*/, 12];\n                case 11:\n                    if (e_1) throw e_1.error;\n                    return [7 /*endfinally*/];\n                case 12: return [7 /*endfinally*/];\n                case 13: return [2 /*return*/, result];\n            }\n        });\n    });\n}\nfunction blockText(obj) {\n    if (typeof obj._type !== 'string')\n        return null;\n    var children = obj.children;\n    if (!Array.isArray(children))\n        return null;\n    var result = '';\n    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n        var child = children_1[_i];\n        if (child &&\n            typeof child === 'object' &&\n            typeof child._type === 'string' &&\n            child._type === 'span' &&\n            typeof child.text === 'string') {\n            result += child.text;\n        }\n    }\n    return result;\n}function hasReference(value, pathSet) {\n    switch (getType(value)) {\n        case 'array':\n            for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {\n                var v = value_1[_i];\n                if (hasReference(v, pathSet)) {\n                    return true;\n                }\n            }\n            break;\n        case 'object':\n            if (value._ref) {\n                return pathSet.has(value._ref);\n            }\n            for (var _a = 0, _b = Object.values(value); _a < _b.length; _a++) {\n                var v = _b[_a];\n                if (hasReference(v, pathSet)) {\n                    return true;\n                }\n            }\n            break;\n    }\n    return false;\n}\nfunction countUTF8(str) {\n    var count = 0;\n    for (var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        if (code >= 0xd800 && code <= 0xdbff) {\n            // High surrogate. Don't count this.\n            // By only counting the low surrogate we will correctly\n            // count the number of UTF-8 code points.\n            continue;\n        }\n        count++;\n    }\n    return count;\n}\nvar global = {};\nglobal.anywhere = function anywhere() {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            throw new Error('not implemented');\n        });\n    });\n};\nglobal.anywhere.arity = 1;\nglobal.coalesce = function coalesce(args, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var _i, args_1, arg, value;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _i = 0, args_1 = args;\n                    _a.label = 1;\n                case 1:\n                    if (!(_i < args_1.length)) return [3 /*break*/, 4];\n                    arg = args_1[_i];\n                    return [4 /*yield*/, execute(arg, scope)];\n                case 2:\n                    value = _a.sent();\n                    if (value.type !== 'null') {\n                        return [2 /*return*/, value];\n                    }\n                    _a.label = 3;\n                case 3:\n                    _i++;\n                    return [3 /*break*/, 1];\n                case 4: return [2 /*return*/, NULL_VALUE];\n            }\n        });\n    });\n};\nglobal.count = function count(args, scope, execute) {\n    var e_1, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var inner, num, inner_1, inner_1_1, e_1_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    inner = _b.sent();\n                    if (!inner.isArray()) {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    num = 0;\n                    _b.label = 2;\n                case 2:\n                    _b.trys.push([2, 7, 8, 13]);\n                    inner_1 = __asyncValues(inner);\n                    _b.label = 3;\n                case 3: return [4 /*yield*/, inner_1.next()];\n                case 4:\n                    if (!(inner_1_1 = _b.sent(), !inner_1_1.done)) return [3 /*break*/, 6];\n                    inner_1_1.value;\n                    num++;\n                    _b.label = 5;\n                case 5: return [3 /*break*/, 3];\n                case 6: return [3 /*break*/, 13];\n                case 7:\n                    e_1_1 = _b.sent();\n                    e_1 = { error: e_1_1 };\n                    return [3 /*break*/, 13];\n                case 8:\n                    _b.trys.push([8, , 11, 12]);\n                    if (!(inner_1_1 && !inner_1_1.done && (_a = inner_1[\"return\"]))) return [3 /*break*/, 10];\n                    return [4 /*yield*/, _a.call(inner_1)];\n                case 9:\n                    _b.sent();\n                    _b.label = 10;\n                case 10: return [3 /*break*/, 12];\n                case 11:\n                    if (e_1) throw e_1.error;\n                    return [7 /*endfinally*/];\n                case 12: return [7 /*endfinally*/];\n                case 13: return [2 /*return*/, fromNumber(num)];\n            }\n        });\n    });\n};\nglobal.count.arity = 1;\nglobal.dateTime = function dateTime(args, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var val;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    val = _a.sent();\n                    if (val.type === 'datetime') {\n                        return [2 /*return*/, val];\n                    }\n                    if (val.type !== 'string') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    return [2 /*return*/, DateTime.parseToValue(val.data)];\n            }\n        });\n    });\n};\nglobal.dateTime.arity = 1;\nglobal.defined = function defined(args, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var inner;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    inner = _a.sent();\n                    return [2 /*return*/, inner.type === 'null' ? FALSE_VALUE : TRUE_VALUE];\n            }\n        });\n    });\n};\nglobal.defined.arity = 1;\n// eslint-disable-next-line require-await\nglobal.identity = function identity(args, scope) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, fromString(scope.context.identity)];\n        });\n    });\n};\nglobal.identity.arity = 0;\nglobal.length = function length(args, scope, execute) {\n    var e_2, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var inner, num, inner_2, inner_2_1, e_2_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    inner = _b.sent();\n                    if (inner.type === 'string') {\n                        return [2 /*return*/, fromNumber(countUTF8(inner.data))];\n                    }\n                    if (!inner.isArray()) return [3 /*break*/, 14];\n                    num = 0;\n                    _b.label = 2;\n                case 2:\n                    _b.trys.push([2, 7, 8, 13]);\n                    inner_2 = __asyncValues(inner);\n                    _b.label = 3;\n                case 3: return [4 /*yield*/, inner_2.next()];\n                case 4:\n                    if (!(inner_2_1 = _b.sent(), !inner_2_1.done)) return [3 /*break*/, 6];\n                    inner_2_1.value;\n                    num++;\n                    _b.label = 5;\n                case 5: return [3 /*break*/, 3];\n                case 6: return [3 /*break*/, 13];\n                case 7:\n                    e_2_1 = _b.sent();\n                    e_2 = { error: e_2_1 };\n                    return [3 /*break*/, 13];\n                case 8:\n                    _b.trys.push([8, , 11, 12]);\n                    if (!(inner_2_1 && !inner_2_1.done && (_a = inner_2[\"return\"]))) return [3 /*break*/, 10];\n                    return [4 /*yield*/, _a.call(inner_2)];\n                case 9:\n                    _b.sent();\n                    _b.label = 10;\n                case 10: return [3 /*break*/, 12];\n                case 11:\n                    if (e_2) throw e_2.error;\n                    return [7 /*endfinally*/];\n                case 12: return [7 /*endfinally*/];\n                case 13: return [2 /*return*/, fromNumber(num)];\n                case 14: return [2 /*return*/, NULL_VALUE];\n            }\n        });\n    });\n};\nglobal.length.arity = 1;\nglobal.path = function path(args, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var inner;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    inner = _a.sent();\n                    if (inner.type !== 'string') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    return [2 /*return*/, fromPath(new Path(inner.data))];\n            }\n        });\n    });\n};\nglobal.path.arity = 1;\nglobal.string = function string(args, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var value;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    value = _a.sent();\n                    switch (value.type) {\n                        case 'number':\n                        case 'string':\n                        case 'boolean':\n                        case 'datetime':\n                            return [2 /*return*/, fromString(\"\".concat(value.data))];\n                        default:\n                            return [2 /*return*/, NULL_VALUE];\n                    }\n                    return [2 /*return*/];\n            }\n        });\n    });\n};\nglobal.string.arity = 1;\nglobal.references = function references(args, scope, execute) {\n    var e_3, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var pathSet, _i, args_2, arg, path, path_1, path_1_1, elem, e_3_1, scopeValue;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    pathSet = new Set();\n                    _i = 0, args_2 = args;\n                    _b.label = 1;\n                case 1:\n                    if (!(_i < args_2.length)) return [3 /*break*/, 16];\n                    arg = args_2[_i];\n                    return [4 /*yield*/, execute(arg, scope)];\n                case 2:\n                    path = _b.sent();\n                    if (!(path.type === 'string')) return [3 /*break*/, 3];\n                    pathSet.add(path.data);\n                    return [3 /*break*/, 15];\n                case 3:\n                    if (!path.isArray()) return [3 /*break*/, 15];\n                    _b.label = 4;\n                case 4:\n                    _b.trys.push([4, 9, 10, 15]);\n                    path_1 = (e_3 = void 0, __asyncValues(path));\n                    _b.label = 5;\n                case 5: return [4 /*yield*/, path_1.next()];\n                case 6:\n                    if (!(path_1_1 = _b.sent(), !path_1_1.done)) return [3 /*break*/, 8];\n                    elem = path_1_1.value;\n                    if (elem.type === 'string') {\n                        pathSet.add(elem.data);\n                    }\n                    _b.label = 7;\n                case 7: return [3 /*break*/, 5];\n                case 8: return [3 /*break*/, 15];\n                case 9:\n                    e_3_1 = _b.sent();\n                    e_3 = { error: e_3_1 };\n                    return [3 /*break*/, 15];\n                case 10:\n                    _b.trys.push([10, , 13, 14]);\n                    if (!(path_1_1 && !path_1_1.done && (_a = path_1[\"return\"]))) return [3 /*break*/, 12];\n                    return [4 /*yield*/, _a.call(path_1)];\n                case 11:\n                    _b.sent();\n                    _b.label = 12;\n                case 12: return [3 /*break*/, 14];\n                case 13:\n                    if (e_3) throw e_3.error;\n                    return [7 /*endfinally*/];\n                case 14: return [7 /*endfinally*/];\n                case 15:\n                    _i++;\n                    return [3 /*break*/, 1];\n                case 16:\n                    if (pathSet.size === 0) {\n                        return [2 /*return*/, FALSE_VALUE];\n                    }\n                    return [4 /*yield*/, scope.value.get()];\n                case 17:\n                    scopeValue = _b.sent();\n                    return [2 /*return*/, hasReference(scopeValue, pathSet) ? TRUE_VALUE : FALSE_VALUE];\n            }\n        });\n    });\n};\nglobal.references.arity = function (c) { return c >= 1; };\nglobal.round = function round(args, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var value, num, prec, precValue;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    value = _a.sent();\n                    if (value.type !== 'number') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    num = value.data;\n                    prec = 0;\n                    if (!(args.length === 2)) return [3 /*break*/, 3];\n                    return [4 /*yield*/, execute(args[1], scope)];\n                case 2:\n                    precValue = _a.sent();\n                    if (precValue.type !== 'number' || precValue.data < 0 || !Number.isInteger(precValue.data)) {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    prec = precValue.data;\n                    _a.label = 3;\n                case 3:\n                    if (prec === 0) {\n                        if (num < 0) {\n                            // JavaScript's round() function will always rounds towards positive infinity (-3.5 -> -3).\n                            // The behavior we're interested in is to \"round half away from zero\".\n                            return [2 /*return*/, fromNumber(-Math.round(-num))];\n                        }\n                        return [2 /*return*/, fromNumber(Math.round(num))];\n                    }\n                    return [2 /*return*/, fromNumber(Number(num.toFixed(prec)))];\n            }\n        });\n    });\n};\nglobal.round.arity = function (count) { return count >= 1 && count <= 2; };\n// eslint-disable-next-line require-await\nglobal.now = function now(args, scope) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, fromString(scope.context.timestamp.toISOString())];\n        });\n    });\n};\nglobal.now.arity = 0;\n// eslint-disable-next-line require-await\nglobal.boost = function boost() {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            // This should be handled by the scoring function.\n            throw new Error('unexpected boost call');\n        });\n    });\n};\nglobal.boost.arity = 2;\nvar string = {};\nstring.lower = function (args, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var value;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    value = _a.sent();\n                    if (value.type !== 'string') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    return [2 /*return*/, fromString(value.data.toLowerCase())];\n            }\n        });\n    });\n};\nstring.lower.arity = 1;\nstring.upper = function (args, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var value;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    value = _a.sent();\n                    if (value.type !== 'string') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    return [2 /*return*/, fromString(value.data.toUpperCase())];\n            }\n        });\n    });\n};\nstring.upper.arity = 1;\nstring.split = function (args, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var str, sep;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    str = _a.sent();\n                    if (str.type !== 'string') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    return [4 /*yield*/, execute(args[1], scope)];\n                case 2:\n                    sep = _a.sent();\n                    if (sep.type !== 'string') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    if (str.data.length === 0) {\n                        return [2 /*return*/, fromJS([])];\n                    }\n                    if (sep.data.length === 0) {\n                        // This uses a Unicode codepoint splitting algorithm\n                        return [2 /*return*/, fromJS(Array.from(str.data))];\n                    }\n                    return [2 /*return*/, fromJS(str.data.split(sep.data))];\n            }\n        });\n    });\n};\nstring.split.arity = 2;\nglobal.lower = string.lower;\nglobal.upper = string.upper;\nstring.startsWith = function (args, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var str, prefix;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    str = _a.sent();\n                    if (str.type !== 'string') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    return [4 /*yield*/, execute(args[1], scope)];\n                case 2:\n                    prefix = _a.sent();\n                    if (prefix.type !== 'string') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    return [2 /*return*/, str.data.startsWith(prefix.data) ? TRUE_VALUE : FALSE_VALUE];\n            }\n        });\n    });\n};\nstring.startsWith.arity = 2;\nvar array = {};\narray.join = function (args, scope, execute) {\n    var e_4, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var arr, sep, buf, needSep, arr_1, arr_1_1, elem, e_4_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    arr = _b.sent();\n                    if (!arr.isArray()) {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    return [4 /*yield*/, execute(args[1], scope)];\n                case 2:\n                    sep = _b.sent();\n                    if (sep.type !== 'string') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    buf = '';\n                    needSep = false;\n                    _b.label = 3;\n                case 3:\n                    _b.trys.push([3, 8, 9, 14]);\n                    arr_1 = __asyncValues(arr);\n                    _b.label = 4;\n                case 4: return [4 /*yield*/, arr_1.next()];\n                case 5:\n                    if (!(arr_1_1 = _b.sent(), !arr_1_1.done)) return [3 /*break*/, 7];\n                    elem = arr_1_1.value;\n                    if (needSep) {\n                        buf += sep.data;\n                    }\n                    switch (elem.type) {\n                        case 'number':\n                        case 'string':\n                        case 'boolean':\n                        case 'datetime':\n                            buf += \"\".concat(elem.data);\n                            break;\n                        default:\n                            return [2 /*return*/, NULL_VALUE];\n                    }\n                    needSep = true;\n                    _b.label = 6;\n                case 6: return [3 /*break*/, 4];\n                case 7: return [3 /*break*/, 14];\n                case 8:\n                    e_4_1 = _b.sent();\n                    e_4 = { error: e_4_1 };\n                    return [3 /*break*/, 14];\n                case 9:\n                    _b.trys.push([9, , 12, 13]);\n                    if (!(arr_1_1 && !arr_1_1.done && (_a = arr_1[\"return\"]))) return [3 /*break*/, 11];\n                    return [4 /*yield*/, _a.call(arr_1)];\n                case 10:\n                    _b.sent();\n                    _b.label = 11;\n                case 11: return [3 /*break*/, 13];\n                case 12:\n                    if (e_4) throw e_4.error;\n                    return [7 /*endfinally*/];\n                case 13: return [7 /*endfinally*/];\n                case 14: return [2 /*return*/, fromJS(buf)];\n            }\n        });\n    });\n};\narray.join.arity = 2;\narray.compact = function (args, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var arr;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    arr = _a.sent();\n                    if (!arr.isArray()) {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    return [2 /*return*/, new StreamValue(function () {\n                            return __asyncGenerator(this, arguments, function () {\n                                var arr_2, arr_2_1, elem, e_5_1;\n                                var e_5, _a;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            _b.trys.push([0, 7, 8, 13]);\n                                            arr_2 = __asyncValues(arr);\n                                            _b.label = 1;\n                                        case 1: return [4 /*yield*/, __await(arr_2.next())];\n                                        case 2:\n                                            if (!(arr_2_1 = _b.sent(), !arr_2_1.done)) return [3 /*break*/, 6];\n                                            elem = arr_2_1.value;\n                                            if (!(elem.type !== 'null')) return [3 /*break*/, 5];\n                                            return [4 /*yield*/, __await(elem)];\n                                        case 3: return [4 /*yield*/, _b.sent()];\n                                        case 4:\n                                            _b.sent();\n                                            _b.label = 5;\n                                        case 5: return [3 /*break*/, 1];\n                                        case 6: return [3 /*break*/, 13];\n                                        case 7:\n                                            e_5_1 = _b.sent();\n                                            e_5 = { error: e_5_1 };\n                                            return [3 /*break*/, 13];\n                                        case 8:\n                                            _b.trys.push([8, , 11, 12]);\n                                            if (!(arr_2_1 && !arr_2_1.done && (_a = arr_2[\"return\"]))) return [3 /*break*/, 10];\n                                            return [4 /*yield*/, __await(_a.call(arr_2))];\n                                        case 9:\n                                            _b.sent();\n                                            _b.label = 10;\n                                        case 10: return [3 /*break*/, 12];\n                                        case 11:\n                                            if (e_5) throw e_5.error;\n                                            return [7 /*endfinally*/];\n                                        case 12: return [7 /*endfinally*/];\n                                        case 13: return [2 /*return*/];\n                                    }\n                                });\n                            });\n                        })];\n            }\n        });\n    });\n};\narray.compact.arity = 1;\narray.unique = function (args, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var value;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    value = _a.sent();\n                    if (!value.isArray()) {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    return [2 /*return*/, new StreamValue(function () {\n                            return __asyncGenerator(this, arguments, function () {\n                                var added, value_2, value_2_1, iter, _a, e_6_1;\n                                var e_6, _b;\n                                return __generator(this, function (_c) {\n                                    switch (_c.label) {\n                                        case 0:\n                                            added = new Set();\n                                            _c.label = 1;\n                                        case 1:\n                                            _c.trys.push([1, 13, 14, 19]);\n                                            value_2 = __asyncValues(value);\n                                            _c.label = 2;\n                                        case 2: return [4 /*yield*/, __await(value_2.next())];\n                                        case 3:\n                                            if (!(value_2_1 = _c.sent(), !value_2_1.done)) return [3 /*break*/, 12];\n                                            iter = value_2_1.value;\n                                            _a = iter.type;\n                                            switch (_a) {\n                                                case 'number': return [3 /*break*/, 4];\n                                                case 'string': return [3 /*break*/, 4];\n                                                case 'boolean': return [3 /*break*/, 4];\n                                                case 'datetime': return [3 /*break*/, 4];\n                                            }\n                                            return [3 /*break*/, 8];\n                                        case 4:\n                                            if (!!added.has(iter.data)) return [3 /*break*/, 7];\n                                            added.add(iter.data);\n                                            return [4 /*yield*/, __await(iter)];\n                                        case 5: return [4 /*yield*/, _c.sent()];\n                                        case 6:\n                                            _c.sent();\n                                            _c.label = 7;\n                                        case 7: return [3 /*break*/, 11];\n                                        case 8: return [4 /*yield*/, __await(iter)];\n                                        case 9: return [4 /*yield*/, _c.sent()];\n                                        case 10:\n                                            _c.sent();\n                                            _c.label = 11;\n                                        case 11: return [3 /*break*/, 2];\n                                        case 12: return [3 /*break*/, 19];\n                                        case 13:\n                                            e_6_1 = _c.sent();\n                                            e_6 = { error: e_6_1 };\n                                            return [3 /*break*/, 19];\n                                        case 14:\n                                            _c.trys.push([14, , 17, 18]);\n                                            if (!(value_2_1 && !value_2_1.done && (_b = value_2[\"return\"]))) return [3 /*break*/, 16];\n                                            return [4 /*yield*/, __await(_b.call(value_2))];\n                                        case 15:\n                                            _c.sent();\n                                            _c.label = 16;\n                                        case 16: return [3 /*break*/, 18];\n                                        case 17:\n                                            if (e_6) throw e_6.error;\n                                            return [7 /*endfinally*/];\n                                        case 18: return [7 /*endfinally*/];\n                                        case 19: return [2 /*return*/];\n                                    }\n                                });\n                            });\n                        })];\n            }\n        });\n    });\n};\narray.unique.arity = 1;\nvar pt = {};\npt.text = function (args, scope, execute) {\n    return __awaiter(this, void 0, void 0, function () {\n        var value, text;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    value = _a.sent();\n                    return [4 /*yield*/, portableTextContent(value)];\n                case 2:\n                    text = _a.sent();\n                    if (text === null) {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    return [2 /*return*/, fromString(text)];\n            }\n        });\n    });\n};\npt.text.arity = 1;\nvar sanity = {};\n// eslint-disable-next-line require-await\nsanity.projectId = function (args, scope) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            if (scope.context.sanity) {\n                return [2 /*return*/, fromString(scope.context.sanity.projectId)];\n            }\n            return [2 /*return*/, NULL_VALUE];\n        });\n    });\n};\n// eslint-disable-next-line require-await\nsanity.dataset = function (args, scope) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            if (scope.context.sanity) {\n                return [2 /*return*/, fromString(scope.context.sanity.dataset)];\n            }\n            return [2 /*return*/, NULL_VALUE];\n        });\n    });\n};\nvar pipeFunctions = {};\npipeFunctions.order = function order(base, args, scope, execute) {\n    var base_1, base_1_1;\n    var e_7, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var mappers, directions, n, _i, args_3, mapper, direction, aux, idx, value, newScope, tuple, i, result, _b, _c, e_7_1;\n        return __generator(this, function (_d) {\n            switch (_d.label) {\n                case 0: \n                // eslint-disable-next-line max-len\n                // This is a workaround for https://github.com/rpetrich/babel-plugin-transform-async-to-promises/issues/59\n                return [4 /*yield*/, true];\n                case 1:\n                    // eslint-disable-next-line max-len\n                    // This is a workaround for https://github.com/rpetrich/babel-plugin-transform-async-to-promises/issues/59\n                    _d.sent();\n                    if (!base.isArray()) {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    mappers = [];\n                    directions = [];\n                    n = 0;\n                    for (_i = 0, args_3 = args; _i < args_3.length; _i++) {\n                        mapper = args_3[_i];\n                        direction = 'asc';\n                        if (mapper.type === 'Desc') {\n                            direction = 'desc';\n                            mapper = mapper.base;\n                        }\n                        else if (mapper.type === 'Asc') {\n                            mapper = mapper.base;\n                        }\n                        mappers.push(mapper);\n                        directions.push(direction);\n                        n++;\n                    }\n                    aux = [];\n                    idx = 0;\n                    _d.label = 2;\n                case 2:\n                    _d.trys.push([2, 13, 14, 19]);\n                    base_1 = __asyncValues(base);\n                    _d.label = 3;\n                case 3: return [4 /*yield*/, base_1.next()];\n                case 4:\n                    if (!(base_1_1 = _d.sent(), !base_1_1.done)) return [3 /*break*/, 12];\n                    value = base_1_1.value;\n                    newScope = scope.createNested(value);\n                    return [4 /*yield*/, value.get()];\n                case 5:\n                    tuple = [_d.sent(), idx];\n                    i = 0;\n                    _d.label = 6;\n                case 6:\n                    if (!(i < n)) return [3 /*break*/, 10];\n                    return [4 /*yield*/, execute(mappers[i], newScope)];\n                case 7:\n                    result = _d.sent();\n                    _c = (_b = tuple).push;\n                    return [4 /*yield*/, result.get()];\n                case 8:\n                    _c.apply(_b, [_d.sent()]);\n                    _d.label = 9;\n                case 9:\n                    i++;\n                    return [3 /*break*/, 6];\n                case 10:\n                    aux.push(tuple);\n                    idx++;\n                    _d.label = 11;\n                case 11: return [3 /*break*/, 3];\n                case 12: return [3 /*break*/, 19];\n                case 13:\n                    e_7_1 = _d.sent();\n                    e_7 = { error: e_7_1 };\n                    return [3 /*break*/, 19];\n                case 14:\n                    _d.trys.push([14, , 17, 18]);\n                    if (!(base_1_1 && !base_1_1.done && (_a = base_1[\"return\"]))) return [3 /*break*/, 16];\n                    return [4 /*yield*/, _a.call(base_1)];\n                case 15:\n                    _d.sent();\n                    _d.label = 16;\n                case 16: return [3 /*break*/, 18];\n                case 17:\n                    if (e_7) throw e_7.error;\n                    return [7 /*endfinally*/];\n                case 18: return [7 /*endfinally*/];\n                case 19:\n                    aux.sort(function (aTuple, bTuple) {\n                        for (var i = 0; i < n; i++) {\n                            var c = totalCompare(aTuple[i + 2], bTuple[i + 2]);\n                            if (directions[i] === 'desc') {\n                                c = -c;\n                            }\n                            if (c !== 0) {\n                                return c;\n                            }\n                        }\n                        // Fallback to sorting on the original index for stable sorting.\n                        return aTuple[1] - bTuple[1];\n                    });\n                    return [2 /*return*/, fromJS(aux.map(function (v) { return v[0]; }))];\n            }\n        });\n    });\n};\npipeFunctions.order.arity = function (count) { return count >= 1; };\n// eslint-disable-next-line require-await\npipeFunctions.score = function score(base, args, scope, execute) {\n    var base_2, base_2_1;\n    var e_8, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var unknown, scored, value, _b, _c, newScope, valueScore, _i, args_4, arg, _d, newObject, e_8_1;\n        return __generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    if (!base.isArray())\n                        return [2 /*return*/, NULL_VALUE\n                            // Anything that isn't an object should be sorted first.\n                        ];\n                    unknown = [];\n                    scored = [];\n                    _e.label = 1;\n                case 1:\n                    _e.trys.push([1, 12, 13, 18]);\n                    base_2 = __asyncValues(base);\n                    _e.label = 2;\n                case 2: return [4 /*yield*/, base_2.next()];\n                case 3:\n                    if (!(base_2_1 = _e.sent(), !base_2_1.done)) return [3 /*break*/, 11];\n                    value = base_2_1.value;\n                    if (!(value.type !== 'object')) return [3 /*break*/, 5];\n                    _c = (_b = unknown).push;\n                    return [4 /*yield*/, value.get()];\n                case 4:\n                    _c.apply(_b, [_e.sent()]);\n                    return [3 /*break*/, 10];\n                case 5:\n                    newScope = scope.createNested(value);\n                    valueScore = typeof value.data._score === 'number' ? value.data._score : 0;\n                    _i = 0, args_4 = args;\n                    _e.label = 6;\n                case 6:\n                    if (!(_i < args_4.length)) return [3 /*break*/, 9];\n                    arg = args_4[_i];\n                    _d = valueScore;\n                    return [4 /*yield*/, evaluateScore(arg, newScope, execute)];\n                case 7:\n                    valueScore = _d + _e.sent();\n                    _e.label = 8;\n                case 8:\n                    _i++;\n                    return [3 /*break*/, 6];\n                case 9:\n                    newObject = Object.assign({}, value.data, { _score: valueScore });\n                    scored.push(newObject);\n                    _e.label = 10;\n                case 10: return [3 /*break*/, 2];\n                case 11: return [3 /*break*/, 18];\n                case 12:\n                    e_8_1 = _e.sent();\n                    e_8 = { error: e_8_1 };\n                    return [3 /*break*/, 18];\n                case 13:\n                    _e.trys.push([13, , 16, 17]);\n                    if (!(base_2_1 && !base_2_1.done && (_a = base_2[\"return\"]))) return [3 /*break*/, 15];\n                    return [4 /*yield*/, _a.call(base_2)];\n                case 14:\n                    _e.sent();\n                    _e.label = 15;\n                case 15: return [3 /*break*/, 17];\n                case 16:\n                    if (e_8) throw e_8.error;\n                    return [7 /*endfinally*/];\n                case 17: return [7 /*endfinally*/];\n                case 18:\n                    scored.sort(function (a, b) { return b._score - a._score; });\n                    return [2 /*return*/, fromJS(scored)];\n            }\n        });\n    });\n};\npipeFunctions.score.arity = function (count) { return count >= 1; };\nvar delta = {};\ndelta.operation = function (args, scope) {\n    return __awaiter(this, void 0, void 0, function () {\n        var hasBefore, hasAfter;\n        return __generator(this, function (_a) {\n            hasBefore = scope.context.before !== null;\n            hasAfter = scope.context.after !== null;\n            if (hasBefore && hasAfter) {\n                return [2 /*return*/, fromString('update')];\n            }\n            if (hasAfter) {\n                return [2 /*return*/, fromString('create')];\n            }\n            if (hasBefore) {\n                return [2 /*return*/, fromString('delete')];\n            }\n            return [2 /*return*/, NULL_VALUE];\n        });\n    });\n};\ndelta.changedAny = function () {\n    throw new Error('not implemented');\n};\ndelta.changedAny.arity = 1;\ndelta.changedAny.mode = 'delta';\ndelta.changedOnly = function () {\n    throw new Error('not implemented');\n};\ndelta.changedOnly.arity = 1;\ndelta.changedOnly.mode = 'delta';\nvar diff = {};\ndiff.changedAny = function () {\n    throw new Error('not implemented');\n};\ndiff.changedAny.arity = 3;\ndiff.changedOnly = function () {\n    throw new Error('not implemented');\n};\ndiff.changedOnly.arity = 3;\nvar math = {};\nmath.min = function (args, scope, execute) {\n    var e_9, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var arr, n, arr_3, arr_3_1, elem, e_9_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    arr = _b.sent();\n                    if (!arr.isArray()) {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    n = undefined;\n                    _b.label = 2;\n                case 2:\n                    _b.trys.push([2, 7, 8, 13]);\n                    arr_3 = __asyncValues(arr);\n                    _b.label = 3;\n                case 3: return [4 /*yield*/, arr_3.next()];\n                case 4:\n                    if (!(arr_3_1 = _b.sent(), !arr_3_1.done)) return [3 /*break*/, 6];\n                    elem = arr_3_1.value;\n                    if (elem.type === 'null')\n                        return [3 /*break*/, 5];\n                    if (elem.type !== 'number') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    if (n === undefined || elem.data < n) {\n                        n = elem.data;\n                    }\n                    _b.label = 5;\n                case 5: return [3 /*break*/, 3];\n                case 6: return [3 /*break*/, 13];\n                case 7:\n                    e_9_1 = _b.sent();\n                    e_9 = { error: e_9_1 };\n                    return [3 /*break*/, 13];\n                case 8:\n                    _b.trys.push([8, , 11, 12]);\n                    if (!(arr_3_1 && !arr_3_1.done && (_a = arr_3[\"return\"]))) return [3 /*break*/, 10];\n                    return [4 /*yield*/, _a.call(arr_3)];\n                case 9:\n                    _b.sent();\n                    _b.label = 10;\n                case 10: return [3 /*break*/, 12];\n                case 11:\n                    if (e_9) throw e_9.error;\n                    return [7 /*endfinally*/];\n                case 12: return [7 /*endfinally*/];\n                case 13: return [2 /*return*/, fromJS(n)];\n            }\n        });\n    });\n};\nmath.min.arity = 1;\nmath.max = function (args, scope, execute) {\n    var e_10, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var arr, n, arr_4, arr_4_1, elem, e_10_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    arr = _b.sent();\n                    if (!arr.isArray()) {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    n = undefined;\n                    _b.label = 2;\n                case 2:\n                    _b.trys.push([2, 7, 8, 13]);\n                    arr_4 = __asyncValues(arr);\n                    _b.label = 3;\n                case 3: return [4 /*yield*/, arr_4.next()];\n                case 4:\n                    if (!(arr_4_1 = _b.sent(), !arr_4_1.done)) return [3 /*break*/, 6];\n                    elem = arr_4_1.value;\n                    if (elem.type === 'null')\n                        return [3 /*break*/, 5];\n                    if (elem.type !== 'number') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    if (n === undefined || elem.data > n) {\n                        n = elem.data;\n                    }\n                    _b.label = 5;\n                case 5: return [3 /*break*/, 3];\n                case 6: return [3 /*break*/, 13];\n                case 7:\n                    e_10_1 = _b.sent();\n                    e_10 = { error: e_10_1 };\n                    return [3 /*break*/, 13];\n                case 8:\n                    _b.trys.push([8, , 11, 12]);\n                    if (!(arr_4_1 && !arr_4_1.done && (_a = arr_4[\"return\"]))) return [3 /*break*/, 10];\n                    return [4 /*yield*/, _a.call(arr_4)];\n                case 9:\n                    _b.sent();\n                    _b.label = 10;\n                case 10: return [3 /*break*/, 12];\n                case 11:\n                    if (e_10) throw e_10.error;\n                    return [7 /*endfinally*/];\n                case 12: return [7 /*endfinally*/];\n                case 13: return [2 /*return*/, fromJS(n)];\n            }\n        });\n    });\n};\nmath.max.arity = 1;\nmath.sum = function (args, scope, execute) {\n    var e_11, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var arr, n, arr_5, arr_5_1, elem, e_11_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    arr = _b.sent();\n                    if (!arr.isArray()) {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    n = 0;\n                    _b.label = 2;\n                case 2:\n                    _b.trys.push([2, 7, 8, 13]);\n                    arr_5 = __asyncValues(arr);\n                    _b.label = 3;\n                case 3: return [4 /*yield*/, arr_5.next()];\n                case 4:\n                    if (!(arr_5_1 = _b.sent(), !arr_5_1.done)) return [3 /*break*/, 6];\n                    elem = arr_5_1.value;\n                    if (elem.type === 'null')\n                        return [3 /*break*/, 5];\n                    if (elem.type !== 'number') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    n += elem.data;\n                    _b.label = 5;\n                case 5: return [3 /*break*/, 3];\n                case 6: return [3 /*break*/, 13];\n                case 7:\n                    e_11_1 = _b.sent();\n                    e_11 = { error: e_11_1 };\n                    return [3 /*break*/, 13];\n                case 8:\n                    _b.trys.push([8, , 11, 12]);\n                    if (!(arr_5_1 && !arr_5_1.done && (_a = arr_5[\"return\"]))) return [3 /*break*/, 10];\n                    return [4 /*yield*/, _a.call(arr_5)];\n                case 9:\n                    _b.sent();\n                    _b.label = 10;\n                case 10: return [3 /*break*/, 12];\n                case 11:\n                    if (e_11) throw e_11.error;\n                    return [7 /*endfinally*/];\n                case 12: return [7 /*endfinally*/];\n                case 13: return [2 /*return*/, fromJS(n)];\n            }\n        });\n    });\n};\nmath.sum.arity = 1;\nmath.avg = function (args, scope, execute) {\n    var e_12, _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var arr, n, c, arr_6, arr_6_1, elem, e_12_1;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, execute(args[0], scope)];\n                case 1:\n                    arr = _b.sent();\n                    if (!arr.isArray()) {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    n = 0;\n                    c = 0;\n                    _b.label = 2;\n                case 2:\n                    _b.trys.push([2, 7, 8, 13]);\n                    arr_6 = __asyncValues(arr);\n                    _b.label = 3;\n                case 3: return [4 /*yield*/, arr_6.next()];\n                case 4:\n                    if (!(arr_6_1 = _b.sent(), !arr_6_1.done)) return [3 /*break*/, 6];\n                    elem = arr_6_1.value;\n                    if (elem.type === 'null')\n                        return [3 /*break*/, 5];\n                    if (elem.type !== 'number') {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    n += elem.data;\n                    c++;\n                    _b.label = 5;\n                case 5: return [3 /*break*/, 3];\n                case 6: return [3 /*break*/, 13];\n                case 7:\n                    e_12_1 = _b.sent();\n                    e_12 = { error: e_12_1 };\n                    return [3 /*break*/, 13];\n                case 8:\n                    _b.trys.push([8, , 11, 12]);\n                    if (!(arr_6_1 && !arr_6_1.done && (_a = arr_6[\"return\"]))) return [3 /*break*/, 10];\n                    return [4 /*yield*/, _a.call(arr_6)];\n                case 9:\n                    _b.sent();\n                    _b.label = 10;\n                case 10: return [3 /*break*/, 12];\n                case 11:\n                    if (e_12) throw e_12.error;\n                    return [7 /*endfinally*/];\n                case 12: return [7 /*endfinally*/];\n                case 13:\n                    if (c === 0) {\n                        return [2 /*return*/, NULL_VALUE];\n                    }\n                    return [2 /*return*/, fromJS(n / c)];\n            }\n        });\n    });\n};\nmath.avg.arity = 1;\nvar namespaces = {\n    global: global,\n    string: string,\n    array: array,\n    pt: pt,\n    delta: delta,\n    diff: diff,\n    sanity: sanity,\n    math: math\n};const WS = /^([\\t\\n\\v\\f\\r \\u0085\\u00A0]|(\\/\\/[^\\n]*\\n))+/;\nconst NUM = /^\\d+/;\nconst IDENT = /^[a-zA-Z_][a-zA-Z_0-9]*/;\n\n// Precedence levels for binary operators:\nconst PREC_PAIR = 1;\nconst PREC_OR = 2;\nconst PREC_AND = 3;\nconst PREC_COMP = 4;\nconst PREC_ORDER = 4;\nconst PREC_ADD = 6;\nconst PREC_SUB = 6;\nconst PREC_MUL = 7;\nconst PREC_DIV = 7;\nconst PREC_MOD = 7;\nconst PREC_POW = 8;\n\n// Precedence levels for prefix operators:\nconst PREC_POS = 10;\nconst PREC_NOT = 10;\nconst PREC_NEG = 8;\n\nfunction parse$1(str) {\n  let pos = 0;\n  pos = skipWS(str, pos);\n  let result = parseExpr(str, pos, 0);\n  if (result.type === 'error') return result\n  pos = skipWS(str, result.position);\n  if (pos !== str.length) {\n    if (result.failPosition) {\n      pos = result.failPosition - 1;\n    }\n    return {type: 'error', position: pos}\n  }\n  delete result.position;\n  delete result.failPosition;\n  return result\n}\n\nfunction parseExpr(str, pos, level) {\n  // In this function we parse precedence \"manually\" by having two variables:\n  //\n  // `level` is the minimum precedence level we want to parse at. If this is\n  // e.g. 7 then this function will not parse `3 + 4` (since addition is at 6),\n  // but instead just return `1` and leave ` + 5` remaining. We use this so that\n  // while handling the RHS of the multiplication in `1 + 2 * 3 + 4` we only parse `3`.\n  //\n  // `lhsLevel` is the precedence level of the currently parsed expression on\n  // the left-hand side. This is mainly used to handle non-associcativeness.\n\n  // This means that you'll see code like:\n  // - `if (level > PREC_XXX) break`: Operator is at this precedence level.\n  // - `if (lhsLevel < PREC_XXX) break`: Operator is left-associative.\n  // - `if (lhsLevel <= PREC_XXX) break`: Operator is right/non-associative.\n  // - `parseExpr(str, pos, PREC_XXX + 1)`: Operator is left/non-assoicate.\n  // - `parseExpr(str, pos, PREC_XXX)`: Operator is right-assoicate.\n\n  let startPos = pos;\n  let token = str[pos];\n  let marks;\n\n  switch (token) {\n    case '+': {\n      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_POS);\n      if (rhs.type === 'error') return rhs\n      marks = [{name: 'pos', position: startPos}].concat(rhs.marks);\n      pos = rhs.position;\n      break\n    }\n    case '-': {\n      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_NEG);\n      if (rhs.type === 'error') return rhs\n      marks = [{name: 'neg', position: startPos}].concat(rhs.marks);\n      pos = rhs.position;\n      break\n    }\n    case '(': {\n      let rhs = parseExpr(str, skipWS(str, pos + 1), 0);\n      if (rhs.type === 'error') return rhs\n      pos = skipWS(str, rhs.position);\n      switch (str[pos]) {\n        case ',': {\n          // Tuples\n          marks = [{name: 'tuple', position: startPos}].concat(rhs.marks);\n          pos = skipWS(str, pos + 1);\n          while (true) {\n            rhs = parseExpr(str, pos, 0);\n            if (rhs.type === 'error') return rhs\n            pos = skipWS(str, rhs.position);\n            if (str[pos] !== ',') break\n            pos = skipWS(str, pos + 1);\n          }\n          if (str[pos] !== ')') return {type: 'error', position: pos}\n          pos++;\n          marks.push({name: 'tuple_end', position: pos});\n          break\n        }\n        case ')': {\n          pos++;\n          marks = [{name: 'group', position: startPos}].concat(rhs.marks);\n          break\n        }\n        default:\n          return {type: 'error', position: pos}\n      }\n      break\n    }\n    case '!': {\n      let rhs = parseExpr(str, skipWS(str, pos + 1), PREC_NOT);\n      if (rhs.type === 'error') return rhs\n      marks = [{name: 'not', position: startPos}].concat(rhs.marks);\n      pos = rhs.position;\n      break\n    }\n    case '{': {\n      let result = parseObject(str, pos);\n      if (result.type === 'error') return result\n      marks = result.marks;\n      pos = result.position;\n      break\n    }\n    case '[':\n      marks = [{name: 'array', position: pos}];\n      pos = skipWS(str, pos + 1);\n\n      if (str[pos] !== ']') {\n        while (true) {\n          if (str.slice(pos, pos + 3) === '...') {\n            marks.push({name: 'array_splat', position: pos});\n            pos = skipWS(str, pos + 3);\n          }\n\n          let res = parseExpr(str, pos, 0);\n          if (res.type === 'error') return res\n          marks = marks.concat(res.marks);\n          pos = res.position;\n          pos = skipWS(str, pos);\n          if (str[pos] !== ',') break\n          pos = skipWS(str, pos + 1);\n          if (str[pos] === ']') break\n        }\n      }\n\n      if (str[pos] === ']') {\n        pos++;\n        marks.push({name: 'array_end', position: pos});\n      } else {\n        return {type: 'error', position: pos}\n      }\n\n      break\n    case \"'\":\n    case '\"': {\n      let result = parseString(str, pos);\n      if (result.type === 'error') return result\n      marks = result.marks;\n      pos = result.position;\n      break\n    }\n    case '^': {\n      pos++;\n      marks = [];\n      while (str[pos] === '.' && str[pos + 1] === '^') {\n        marks.push({name: 'dblparent', position: startPos});\n        pos += 2;\n      }\n      marks.push({name: 'parent', position: startPos});\n      break\n    }\n    case '@':\n      marks = [{name: 'this', position: startPos}];\n      pos++;\n      break\n    case '*':\n      marks = [{name: 'everything', position: startPos}];\n      pos++;\n      break\n    case '$': {\n      let identLen = parseRegex(str, pos + 1, IDENT);\n      if (identLen) {\n        pos += 1 + identLen;\n        marks = [\n          {name: 'param', position: startPos},\n          {name: 'ident', position: startPos + 1},\n          {name: 'ident_end', position: pos},\n        ];\n      }\n      break\n    }\n    default: {\n      let numLen = parseRegex(str, pos, NUM);\n      if (numLen) {\n        pos += numLen;\n        let name = 'integer';\n\n        if (str[pos] === '.') {\n          let fracLen = parseRegex(str, pos + 1, NUM);\n          if (fracLen) {\n            name = 'float';\n            pos += 1 + fracLen;\n          }\n        }\n\n        if (str[pos] === 'e' || str[pos] === 'E') {\n          name = 'sci';\n          pos++;\n          if (str[pos] === '+' || str[pos] === '-') {\n            pos++;\n          }\n          let expLen = parseRegex(str, pos, NUM);\n          if (!expLen) return {type: 'error', position: pos}\n          pos += expLen;\n        }\n\n        marks = [\n          {name, position: startPos},\n          {name: name + '_end', position: pos},\n        ];\n\n        break\n      }\n\n      let identLen = parseRegex(str, pos, IDENT);\n      if (identLen) {\n        pos += identLen;\n        switch (str[pos]) {\n          case ':':\n          case '(': {\n            let result = parseFuncCall(str, startPos, pos);\n            if (result.type === 'error') return result\n            marks = result.marks;\n            pos = result.position;\n            break\n          }\n          default: {\n            marks = [\n              {name: 'this_attr', position: startPos},\n              {name: 'ident', position: startPos},\n              {name: 'ident_end', position: pos},\n            ];\n          }\n        }\n\n        break\n      }\n    }\n  }\n\n  if (!marks) {\n    return {type: 'error', position: pos}\n  }\n\n  let lhsLevel = 12;\n  let trav;\n\n  loop: while (true) {\n    let innerPos = skipWS(str, pos);\n    if (innerPos === str.length) {\n      pos = innerPos;\n      break\n    }\n\n    trav = parseTraversal(str, innerPos);\n    if (trav.type === 'success') {\n      marks.unshift({name: 'traverse', position: startPos});\n      while (trav.type === 'success') {\n        marks = marks.concat(trav.marks);\n        pos = trav.position;\n        trav = parseTraversal(str, skipWS(str, pos));\n      }\n      marks.push({name: 'traversal_end', position: pos});\n      continue\n    }\n\n    let token = str[innerPos];\n    switch (token) {\n      case '=': {\n        let nextToken = str[innerPos + 1];\n        switch (nextToken) {\n          case '>': {\n            // =>\n            if (level > PREC_PAIR || lhsLevel <= PREC_PAIR) break loop\n            let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_PAIR);\n            if (rhs.type === 'error') return rhs\n            marks = marks.concat(rhs.marks);\n            marks.unshift({name: 'pair', position: startPos});\n            pos = rhs.position;\n            lhsLevel = PREC_PAIR;\n            break\n          }\n          case '=': {\n            // ==\n            if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop\n            let rhs = parseExpr(str, skipWS(str, innerPos + 2), 5);\n            if (rhs.type === 'error') return rhs\n            marks.unshift({name: 'comp', position: startPos});\n            marks.push({name: 'op', position: innerPos}, {name: 'op_end', position: innerPos + 2});\n            marks = marks.concat(rhs.marks);\n            pos = rhs.position;\n            lhsLevel = PREC_COMP;\n            break\n          }\n          default:\n            break loop\n        }\n        break\n      }\n      case '+': {\n        if (level > PREC_ADD || lhsLevel < PREC_ADD) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_ADD + 1);\n        if (rhs.type === 'error') return rhs\n        marks = marks.concat(rhs.marks);\n        marks.unshift({name: 'add', position: startPos});\n        pos = rhs.position;\n        lhsLevel = PREC_ADD;\n        break\n      }\n      case '-': {\n        if (level > PREC_SUB || lhsLevel < PREC_SUB) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_SUB + 1);\n        if (rhs.type === 'error') return rhs\n        marks = marks.concat(rhs.marks);\n        marks.unshift({name: 'sub', position: startPos});\n        pos = rhs.position;\n        lhsLevel = PREC_SUB;\n        break\n      }\n      case '*': {\n        if (str[innerPos + 1] === '*') {\n          // **\n          if (level > PREC_POW || lhsLevel <= PREC_POW) break loop\n          let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_POW);\n          if (rhs.type === 'error') return rhs\n          marks = marks.concat(rhs.marks);\n          marks.unshift({name: 'pow', position: startPos});\n          pos = rhs.position;\n          lhsLevel = PREC_POW;\n          break\n        }\n\n        // *\n        if (level > PREC_MUL || lhsLevel < PREC_MUL) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_MUL + 1);\n        if (rhs.type === 'error') return rhs\n        marks = marks.concat(rhs.marks);\n        marks.unshift({name: 'mul', position: startPos});\n        pos = rhs.position;\n        lhsLevel = PREC_MUL;\n        break\n      }\n      case '/': {\n        if (level > PREC_DIV || lhsLevel < PREC_DIV) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_DIV + 1);\n        if (rhs.type === 'error') return rhs\n        marks = marks.concat(rhs.marks);\n        marks.unshift({name: 'div', position: startPos});\n        pos = rhs.position;\n        lhsLevel = PREC_DIV;\n        break\n      }\n      case '%': {\n        if (level > PREC_MOD || lhsLevel < PREC_MOD) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 1), PREC_MOD + 1);\n        if (rhs.type === 'error') return rhs\n        marks = marks.concat(rhs.marks);\n        marks.unshift({name: 'mod', position: startPos});\n        pos = rhs.position;\n        lhsLevel = PREC_MOD;\n        break\n      }\n      case '<':\n      case '>': {\n        if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop\n        let nextPos = innerPos + 1;\n        if (str[nextPos] === '=') {\n          nextPos++;\n        }\n        let rhs = parseExpr(str, skipWS(str, nextPos), PREC_COMP + 1);\n        if (rhs.type === 'error') return rhs\n        marks.unshift({name: 'comp', position: startPos});\n        marks.push({name: 'op', position: innerPos}, {name: 'op_end', position: nextPos});\n        marks = marks.concat(rhs.marks);\n        pos = rhs.position;\n        lhsLevel = PREC_COMP;\n        break\n      }\n      case '|': {\n        if (str[innerPos + 1] === '|') {\n          // ||\n          if (level > PREC_OR || lhsLevel < PREC_OR) break loop\n          let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_OR + 1);\n          if (rhs.type === 'error') return rhs\n          marks = marks.concat(rhs.marks);\n          marks.unshift({name: 'or', position: startPos});\n          pos = rhs.position;\n          lhsLevel = PREC_OR;\n        } else {\n          if (level > 11 || lhsLevel < 11) break loop\n          // pipe call\n          let identPos = skipWS(str, innerPos + 1);\n          let identLen = parseRegex(str, identPos, IDENT);\n          if (!identLen) return {type: 'error', position: identPos}\n          pos = identPos + identLen;\n          if (str[pos] === '(' || str[pos] === ':') {\n            let result = parseFuncCall(str, identPos, pos);\n            if (result.type === 'error') return result\n            marks = marks.concat(result.marks);\n            marks.unshift({name: 'pipecall', position: startPos});\n            pos = result.position;\n            lhsLevel = 11;\n          }\n        }\n        break\n      }\n      case '&': {\n        // &&\n        if (str[innerPos + 1] != '&') break loop\n        if (level > PREC_AND || lhsLevel < PREC_AND) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_AND + 1);\n        if (rhs.type === 'error') return rhs\n        marks = marks.concat(rhs.marks);\n        marks.unshift({name: 'and', position: startPos});\n        pos = rhs.position;\n        lhsLevel = PREC_AND;\n        break\n      }\n      case '!': {\n        // !=\n        if (str[innerPos + 1] !== '=') break loop\n        if (level > PREC_COMP || lhsLevel < PREC_COMP) break loop\n        let rhs = parseExpr(str, skipWS(str, innerPos + 2), PREC_COMP + 1);\n        if (rhs.type === 'error') return rhs\n        marks.unshift({name: 'comp', position: startPos});\n        marks.push({name: 'op', position: innerPos}, {name: 'op_end', position: innerPos + 2});\n        marks = marks.concat(rhs.marks);\n        pos = rhs.position;\n        lhsLevel = PREC_COMP;\n        break\n      }\n      case 'd': {\n        // asc\n        if (str.slice(innerPos, innerPos + 4) !== 'desc') break loop\n        if (level > PREC_ORDER || lhsLevel < PREC_ORDER) break loop\n        marks.unshift({name: 'desc', position: startPos});\n        pos = innerPos + 4;\n        lhsLevel = PREC_ORDER;\n        break\n      }\n      case 'a': {\n        // asc\n        if (str.slice(innerPos, innerPos + 3) !== 'asc') break loop\n        if (level > PREC_ORDER || lhsLevel < PREC_ORDER) break loop\n        marks.unshift({name: 'asc', position: startPos});\n        pos = innerPos + 3;\n        lhsLevel = PREC_ORDER;\n        break\n      }\n      default: {\n        let ident = parseRegexStr(str, innerPos, IDENT);\n        switch (ident) {\n          case 'in': {\n            if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop\n\n            pos = skipWS(str, innerPos + 2);\n\n            let isGroup = false;\n\n            if (str[pos] === '(') {\n              isGroup = true;\n              pos = skipWS(str, pos + 1);\n            }\n\n            let rangePos = pos;\n            let result = parseExpr(str, pos, PREC_COMP + 1);\n            if (result.type === 'error') return result\n\n            pos = skipWS(str, result.position);\n\n            if (str[pos] === '.' && str[pos + 1] === '.') {\n              // LHS in RANGE\n              let type = 'inc_range';\n              if (str[pos + 2] === '.') {\n                type = 'exc_range';\n                pos = skipWS(str, pos + 3);\n              } else {\n                pos = skipWS(str, pos + 2);\n              }\n\n              let rhs = parseExpr(str, pos, PREC_COMP + 1);\n              if (rhs.type === 'error') return rhs\n              marks.unshift({name: 'in_range', position: startPos});\n              marks = marks.concat({name: type, position: rangePos}, result.marks, rhs.marks);\n              pos = rhs.position;\n            } else {\n              // LHS in RHS\n              marks.unshift({name: 'comp', position: startPos});\n              marks.push({name: 'op', position: innerPos}, {name: 'op_end', position: innerPos + 2});\n              marks = marks.concat(result.marks);\n            }\n\n            if (isGroup) {\n              pos = skipWS(str, pos);\n              if (str[pos] !== ')') return {type: 'error', position: pos}\n              pos++;\n            }\n\n            lhsLevel = PREC_COMP;\n            break\n          }\n          case 'match': {\n            // match operator\n            if (level > PREC_COMP || lhsLevel <= PREC_COMP) break loop\n            let rhs = parseExpr(str, skipWS(str, innerPos + 5), PREC_COMP + 1);\n            if (rhs.type === 'error') return rhs\n            marks.unshift({name: 'comp', position: startPos});\n            marks.push({name: 'op', position: innerPos}, {name: 'op_end', position: innerPos + 5});\n            marks = marks.concat(rhs.marks);\n            pos = rhs.position;\n            lhsLevel = 4;\n            break\n          }\n          default: {\n            break loop\n          }\n        }\n      }\n    }\n  }\n\n  let failPosition = trav?.type === 'error' && trav.position;\n\n  return {type: 'success', marks, position: pos, failPosition}\n}\n\nfunction parseTraversal(str, pos) {\n  let startPos = pos;\n  switch (str[pos]) {\n    case '.': {\n      pos = skipWS(str, pos + 1);\n      let identStart = pos;\n      let identLen = parseRegex(str, pos, IDENT);\n      if (!identLen) return {type: 'error', position: pos}\n      pos += identLen;\n\n      return {\n        type: 'success',\n        marks: [\n          {name: 'attr_access', position: startPos},\n          {name: 'ident', position: identStart},\n          {name: 'ident_end', position: pos},\n        ],\n        position: pos,\n      }\n    }\n    case '-':\n      if (str[pos + 1] !== '>') return {type: 'error', position: pos}\n      // ->\n\n      let marks = [{name: 'deref', position: startPos}];\n      pos += 2;\n\n      let identPos = skipWS(str, pos);\n      let identLen = parseRegex(str, identPos, IDENT);\n      if (identLen) {\n        pos = identPos + identLen;\n        marks.push(\n          {name: 'deref_attr', position: identPos},\n          {name: 'ident', position: identPos},\n          {name: 'ident_end', position: pos}\n        );\n      }\n\n      return {\n        type: 'success',\n        marks,\n        position: pos,\n      }\n    case '[': {\n      pos = skipWS(str, pos + 1);\n\n      if (str[pos] === ']') {\n        return {\n          type: 'success',\n          marks: [{name: 'array_postfix', position: startPos}],\n          position: pos + 1,\n        }\n      }\n\n      let rangePos = pos;\n      let result = parseExpr(str, pos, 0);\n      if (result.type === 'error') return result\n\n      pos = skipWS(str, result.position);\n\n      if (str[pos] === '.' && str[pos + 1] === '.') {\n        let type = 'inc_range';\n        if (str[pos + 2] === '.') {\n          type = 'exc_range';\n          pos += 3;\n        } else {\n          pos += 2;\n        }\n\n        pos = skipWS(str, pos);\n        let rhs = parseExpr(str, pos, 0);\n        if (rhs.type === 'error') return rhs\n        pos = skipWS(str, rhs.position);\n        if (str[pos] !== ']') return {type: 'error', position: pos}\n\n        return {\n          type: 'success',\n          marks: [\n            {name: 'slice', position: startPos},\n            {name: type, position: rangePos},\n          ].concat(result.marks, rhs.marks),\n          position: pos + 1,\n        }\n      }\n\n      if (str[pos] !== ']') return {type: 'error', position: pos}\n\n      return {\n        type: 'success',\n        marks: [{name: 'square_bracket', position: startPos}].concat(result.marks),\n        position: pos + 1,\n      }\n    }\n    case '|': {\n      pos = skipWS(str, pos + 1);\n      if (str[pos] === '{') {\n        let result = parseObject(str, pos);\n        if (result.type === 'error') return result\n        result.marks.unshift({name: 'projection', position: startPos});\n        return result\n      }\n      break\n    }\n    case '{': {\n      let result = parseObject(str, pos);\n      if (result.type === 'error') return result\n      result.marks.unshift({name: 'projection', position: startPos});\n      return result\n    }\n  }\n\n  return {type: 'error', position: pos}\n}\n\nfunction parseFuncCall(str, startPos, pos) {\n  let marks = [];\n\n  marks.push({name: 'func_call', position: startPos});\n\n  if (str[pos] === ':' && str[pos + 1] === ':') {\n    marks.push({name: 'namespace', position: startPos});\n    marks.push({name: 'ident', position: startPos}, {name: 'ident_end', position: pos});\n    pos = skipWS(str, pos + 2);\n    let nameLen = parseRegex(str, pos, IDENT);\n    if (!nameLen) return {type: 'error', position: pos}\n    marks.push({name: 'ident', position: pos}, {name: 'ident_end', position: pos + nameLen});\n    pos = skipWS(str, pos + nameLen);\n    if (str[pos] !== '(') return {type: 'error', position: pos}\n    pos++;\n  } else {\n    marks.push({name: 'ident', position: startPos}, {name: 'ident_end', position: pos});\n    pos = skipWS(str, pos + 1);\n  }\n\n  let lastPos = pos;\n\n  if (str[pos] !== ')') {\n    while (true) {\n      let result = parseExpr(str, pos, 0);\n      if (result.type === 'error') return result\n      marks = marks.concat(result.marks);\n      lastPos = result.position;\n      pos = skipWS(str, result.position);\n      if (str[pos] !== ',') break\n      pos = skipWS(str, pos + 1);\n      // Also allow trailing commas\n      if (str[pos] === ')') break\n    }\n  }\n\n  if (str[pos] !== ')') {\n    return {type: 'error', position: pos}\n  }\n\n  // NOTE: a bit arbitrary the func_args_end points comes before the whitespace.\n  marks.push({name: 'func_args_end', position: lastPos});\n\n  return {\n    type: 'success',\n    marks,\n    position: pos + 1,\n  }\n}\n\nfunction parseObject(str, pos) {\n  let marks = [{name: 'object', position: pos}];\n  pos = skipWS(str, pos + 1);\n\n  while (str[pos] !== '}') {\n    let pairPos = pos;\n\n    if (str.slice(pos, pos + 3) === '...') {\n      pos = skipWS(str, pos + 3);\n      if (str[pos] !== '}' && str[pos] !== ',') {\n        let expr = parseExpr(str, pos, 0);\n        if (expr.type === 'error') return expr\n        marks.push({name: 'object_splat', position: pairPos});\n        marks = marks.concat(expr.marks);\n        pos = expr.position;\n      } else {\n        marks.push({name: 'object_splat_this', position: pairPos});\n      }\n    } else {\n      let expr = parseExpr(str, pos, 0);\n      if (expr.type === 'error') return expr\n      let nextPos = skipWS(str, expr.position);\n      if (expr.marks[0].name === 'str' && str[nextPos] === ':') {\n        let value = parseExpr(str, skipWS(str, nextPos + 1), 0);\n        if (value.type === 'error') return value\n        marks.push({name: 'object_pair', position: pairPos});\n        marks = marks.concat(expr.marks, value.marks);\n        pos = value.position;\n      } else {\n        marks = marks.concat({name: 'object_expr', position: pos}, expr.marks);\n        pos = expr.position;\n      }\n    }\n    pos = skipWS(str, pos);\n    if (str[pos] !== ',') break\n    pos = skipWS(str, pos + 1);\n  }\n\n  if (str[pos] !== '}') {\n    return {type: 'error', position: pos}\n  }\n\n  pos++;\n  marks.push({name: 'object_end', position: pos});\n  return {type: 'success', marks, position: pos}\n}\n\nfunction parseString(str, pos) {\n  let token = str[pos];\n  pos = pos + 1;\n  const marks = [{name: 'str', position: pos}];\n  str: for (; ; pos++) {\n    if (pos > str.length) return {type: 'error', position: pos}\n\n    switch (str[pos]) {\n      case token: {\n        marks.push({name: 'str_end', position: pos});\n        pos++;\n        break str\n      }\n      case '\\\\': {\n        marks.push({name: 'str_pause', position: pos});\n        if (str[pos + 1] === 'u') {\n          if (str[pos + 2] === '{') {\n            marks.push({name: 'unicode_hex', position: pos + 3});\n            pos = str.indexOf('}', pos + 3);\n            marks.push({name: 'unicode_hex_end', position: pos});\n          } else {\n            marks.push({name: 'unicode_hex', position: pos + 2});\n            marks.push({name: 'unicode_hex_end', position: pos + 6});\n            pos += 5;\n          }\n        } else {\n          marks.push({name: 'single_escape', position: pos + 1});\n          pos += 1;\n        }\n        marks.push({name: 'str_start', position: pos + 1});\n      }\n    }\n  }\n\n  return {type: 'success', marks, position: pos}\n}\n\nfunction skipWS(str, pos) {\n  return pos + parseRegex(str, pos, WS)\n}\n\n/**\n * Parses a regex at a position and returns the number of characters that was matched.\n */\nfunction parseRegex(str, pos, re) {\n  let m = re.exec(str.slice(pos));\n  return m ? m[0].length : 0\n}\n\n/**\n * Parses a regex at a position and returns matched string.\n */\nfunction parseRegexStr(str, pos, re) {\n  let m = re.exec(str.slice(pos));\n  return m ? m[0] : null\n}/**\n * Join combines two traversals, returning a mapper which is the result of first\n * applying `a` and then applying `b`.\n */\nfunction join(a, b) {\n    return function (base) { return b(a(base)); };\n}\n/**\n * Map returns a new mapper which will the inner mappe to each element of the array.\n */\nfunction map(inner) {\n    return function (base) { return ({ type: 'Map', base: base, expr: inner({ type: 'This' }) }); };\n}\nfunction flatMap(inner) {\n    return function (base) { return ({ type: 'FlatMap', base: base, expr: inner({ type: 'This' }) }); };\n}\nfunction traverseArray(build, right) {\n    if (!right) {\n        return {\n            type: 'a-a',\n            build: build\n        };\n    }\n    switch (right.type) {\n        case 'a-a':\n            return {\n                type: 'a-a',\n                build: join(build, right.build)\n            };\n        case 'a-b':\n            return {\n                type: 'a-b',\n                build: join(build, right.build)\n            };\n        case 'b-b':\n            return {\n                type: 'a-a',\n                build: join(build, map(right.build))\n            };\n        case 'b-a':\n            return {\n                type: 'a-a',\n                build: join(build, flatMap(right.build))\n            };\n        default:\n            throw new Error(\"unknown type: \".concat(right.type));\n    }\n}\nfunction traversePlain(mapper, right) {\n    if (!right) {\n        return {\n            type: 'b-b',\n            build: mapper\n        };\n    }\n    switch (right.type) {\n        case 'a-a':\n        case 'b-a':\n            return {\n                type: 'b-a',\n                build: join(mapper, right.build)\n            };\n        case 'a-b':\n        case 'b-b':\n            return {\n                type: 'b-b',\n                build: join(mapper, right.build)\n            };\n        default:\n            throw new Error(\"unknown type: \".concat(right.type));\n    }\n}\nfunction traverseElement(mapper, right) {\n    if (!right) {\n        return {\n            type: 'a-b',\n            build: mapper\n        };\n    }\n    switch (right.type) {\n        case 'a-a':\n        case 'b-a':\n            return {\n                type: 'a-a',\n                build: join(mapper, right.build)\n            };\n        case 'a-b':\n        case 'b-b':\n            return {\n                type: 'a-b',\n                build: join(mapper, right.build)\n            };\n        default:\n            throw new Error(\"unknown type: \".concat(right.type));\n    }\n}\nfunction traverseProjection(mapper, right) {\n    if (!right) {\n        return {\n            type: 'b-b',\n            build: mapper\n        };\n    }\n    switch (right.type) {\n        case 'a-a':\n            return {\n                type: 'a-a',\n                build: join(map(mapper), right.build)\n            };\n        case 'a-b':\n            return {\n                type: 'a-b',\n                build: join(map(mapper), right.build)\n            };\n        case 'b-a':\n            return {\n                type: 'b-a',\n                build: join(mapper, right.build)\n            };\n        case 'b-b':\n            return {\n                type: 'b-b',\n                build: join(mapper, right.build)\n            };\n        default:\n            throw new Error(\"unknown type: \".concat(right.type));\n    }\n}var isEqual = equality;\nfunction equality(a, b) {\n    if ((a.type === 'string' && b.type === 'string') ||\n        (a.type === 'boolean' && b.type === 'boolean') ||\n        (a.type === 'null' && b.type === 'null') ||\n        (a.type === 'number' && b.type === 'number')) {\n        return a.data === b.data;\n    }\n    if (a.type === 'datetime' && b.type === 'datetime') {\n        return a.data.equals(b.data);\n    }\n    return false;\n}var operators = {\n    '==': function eq(left, right) {\n        return isEqual(left, right) ? TRUE_VALUE : FALSE_VALUE;\n    },\n    '!=': function neq(left, right) {\n        return isEqual(left, right) ? FALSE_VALUE : TRUE_VALUE;\n    },\n    '>': function gt(left, right) {\n        if (left.type === 'stream' || right.type === 'stream')\n            return NULL_VALUE;\n        var result = partialCompare(left.data, right.data);\n        if (result === null) {\n            return NULL_VALUE;\n        }\n        return result > 0 ? TRUE_VALUE : FALSE_VALUE;\n    },\n    '>=': function gte(left, right) {\n        if (left.type === 'stream' || right.type === 'stream')\n            return NULL_VALUE;\n        var result = partialCompare(left.data, right.data);\n        if (result === null) {\n            return NULL_VALUE;\n        }\n        return result >= 0 ? TRUE_VALUE : FALSE_VALUE;\n    },\n    '<': function lt(left, right) {\n        if (left.type === 'stream' || right.type === 'stream')\n            return NULL_VALUE;\n        var result = partialCompare(left.data, right.data);\n        if (result === null) {\n            return NULL_VALUE;\n        }\n        return result < 0 ? TRUE_VALUE : FALSE_VALUE;\n    },\n    '<=': function lte(left, right) {\n        if (left.type === 'stream' || right.type === 'stream')\n            return NULL_VALUE;\n        var result = partialCompare(left.data, right.data);\n        if (result === null) {\n            return NULL_VALUE;\n        }\n        return result <= 0 ? TRUE_VALUE : FALSE_VALUE;\n    },\n    // eslint-disable-next-line func-name-matching\n    \"in\": function inop(left, right) {\n        var right_1, right_1_1;\n        var e_1, _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var b, e_1_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (right.type === 'path') {\n                            if (left.type !== 'string') {\n                                return [2 /*return*/, NULL_VALUE];\n                            }\n                            return [2 /*return*/, right.data.matches(left.data) ? TRUE_VALUE : FALSE_VALUE];\n                        }\n                        if (!right.isArray()) return [3 /*break*/, 13];\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 6, 7, 12]);\n                        right_1 = __asyncValues(right);\n                        _b.label = 2;\n                    case 2: return [4 /*yield*/, right_1.next()];\n                    case 3:\n                        if (!(right_1_1 = _b.sent(), !right_1_1.done)) return [3 /*break*/, 5];\n                        b = right_1_1.value;\n                        if (isEqual(left, b)) {\n                            return [2 /*return*/, TRUE_VALUE];\n                        }\n                        _b.label = 4;\n                    case 4: return [3 /*break*/, 2];\n                    case 5: return [3 /*break*/, 12];\n                    case 6:\n                        e_1_1 = _b.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 12];\n                    case 7:\n                        _b.trys.push([7, , 10, 11]);\n                        if (!(right_1_1 && !right_1_1.done && (_a = right_1[\"return\"]))) return [3 /*break*/, 9];\n                        return [4 /*yield*/, _a.call(right_1)];\n                    case 8:\n                        _b.sent();\n                        _b.label = 9;\n                    case 9: return [3 /*break*/, 11];\n                    case 10:\n                        if (e_1) throw e_1.error;\n                        return [7 /*endfinally*/];\n                    case 11: return [7 /*endfinally*/];\n                    case 12: return [2 /*return*/, FALSE_VALUE];\n                    case 13: return [2 /*return*/, NULL_VALUE];\n                }\n            });\n        });\n    },\n    match: function match(left, right) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tokens, patterns, didSucceed, matched;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        tokens = [];\n                        patterns = [];\n                        return [4 /*yield*/, gatherText(left, function (part) {\n                                tokens = tokens.concat(matchTokenize(part));\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, gatherText(right, function (part) {\n                                patterns = patterns.concat(matchAnalyzePattern(part));\n                            })];\n                    case 2:\n                        didSucceed = _a.sent();\n                        if (!didSucceed) {\n                            return [2 /*return*/, FALSE_VALUE];\n                        }\n                        matched = matchText(tokens, patterns);\n                        return [2 /*return*/, matched ? TRUE_VALUE : FALSE_VALUE];\n                }\n            });\n        });\n    },\n    '+': function plus(left, right) {\n        if (left.type === 'datetime' && right.type === 'number') {\n            return fromDateTime(left.data.add(right.data));\n        }\n        if (left.type === 'number' && right.type === 'number') {\n            return fromNumber(left.data + right.data);\n        }\n        if (left.type === 'string' && right.type === 'string') {\n            return fromString(left.data + right.data);\n        }\n        if (left.type === 'object' && right.type === 'object') {\n            return fromJS(__assign(__assign({}, left.data), right.data));\n        }\n        if (left.type === 'array' && right.type === 'array') {\n            return fromJS(left.data.concat(right.data));\n        }\n        if (left.isArray() && right.isArray()) {\n            return new StreamValue(function () {\n                return __asyncGenerator(this, arguments, function () {\n                    var left_1, left_1_1, val, e_2_1, right_2, right_2_1, val, e_3_1;\n                    var e_2, _a, e_3, _b;\n                    return __generator(this, function (_c) {\n                        switch (_c.label) {\n                            case 0:\n                                _c.trys.push([0, 7, 8, 13]);\n                                left_1 = __asyncValues(left);\n                                _c.label = 1;\n                            case 1: return [4 /*yield*/, __await(left_1.next())];\n                            case 2:\n                                if (!(left_1_1 = _c.sent(), !left_1_1.done)) return [3 /*break*/, 6];\n                                val = left_1_1.value;\n                                return [4 /*yield*/, __await(val)];\n                            case 3: return [4 /*yield*/, _c.sent()];\n                            case 4:\n                                _c.sent();\n                                _c.label = 5;\n                            case 5: return [3 /*break*/, 1];\n                            case 6: return [3 /*break*/, 13];\n                            case 7:\n                                e_2_1 = _c.sent();\n                                e_2 = { error: e_2_1 };\n                                return [3 /*break*/, 13];\n                            case 8:\n                                _c.trys.push([8, , 11, 12]);\n                                if (!(left_1_1 && !left_1_1.done && (_a = left_1[\"return\"]))) return [3 /*break*/, 10];\n                                return [4 /*yield*/, __await(_a.call(left_1))];\n                            case 9:\n                                _c.sent();\n                                _c.label = 10;\n                            case 10: return [3 /*break*/, 12];\n                            case 11:\n                                if (e_2) throw e_2.error;\n                                return [7 /*endfinally*/];\n                            case 12: return [7 /*endfinally*/];\n                            case 13:\n                                _c.trys.push([13, 20, 21, 26]);\n                                right_2 = __asyncValues(right);\n                                _c.label = 14;\n                            case 14: return [4 /*yield*/, __await(right_2.next())];\n                            case 15:\n                                if (!(right_2_1 = _c.sent(), !right_2_1.done)) return [3 /*break*/, 19];\n                                val = right_2_1.value;\n                                return [4 /*yield*/, __await(val)];\n                            case 16: return [4 /*yield*/, _c.sent()];\n                            case 17:\n                                _c.sent();\n                                _c.label = 18;\n                            case 18: return [3 /*break*/, 14];\n                            case 19: return [3 /*break*/, 26];\n                            case 20:\n                                e_3_1 = _c.sent();\n                                e_3 = { error: e_3_1 };\n                                return [3 /*break*/, 26];\n                            case 21:\n                                _c.trys.push([21, , 24, 25]);\n                                if (!(right_2_1 && !right_2_1.done && (_b = right_2[\"return\"]))) return [3 /*break*/, 23];\n                                return [4 /*yield*/, __await(_b.call(right_2))];\n                            case 22:\n                                _c.sent();\n                                _c.label = 23;\n                            case 23: return [3 /*break*/, 25];\n                            case 24:\n                                if (e_3) throw e_3.error;\n                                return [7 /*endfinally*/];\n                            case 25: return [7 /*endfinally*/];\n                            case 26: return [2 /*return*/];\n                        }\n                    });\n                });\n            });\n        }\n        return NULL_VALUE;\n    },\n    '-': function minus(left, right) {\n        if (left.type === 'datetime' && right.type === 'number') {\n            return fromDateTime(left.data.add(-right.data));\n        }\n        if (left.type === 'datetime' && right.type === 'datetime') {\n            return fromNumber(left.data.difference(right.data));\n        }\n        if (left.type === 'number' && right.type === 'number') {\n            return fromNumber(left.data - right.data);\n        }\n        return NULL_VALUE;\n    },\n    '*': numericOperator(function (a, b) { return a * b; }),\n    '/': numericOperator(function (a, b) { return a / b; }),\n    '%': numericOperator(function (a, b) { return a % b; }),\n    '**': numericOperator(function (a, b) { return Math.pow(a, b); })\n};\nfunction numericOperator(impl) {\n    return function (left, right) {\n        if (left.type === 'number' && right.type === 'number') {\n            var result = impl(left.data, right.data);\n            return fromNumber(result);\n        }\n        return NULL_VALUE;\n    };\n}var Scope = /** @class */ (function () {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    function Scope(params, source, value, context, parent) {\n        this.isHidden = false;\n        this.params = params;\n        this.source = source;\n        this.value = value;\n        this.context = context;\n        this.parent = parent;\n    }\n    Scope.prototype.createNested = function (value) {\n        if (this.isHidden) {\n            return new Scope(this.params, this.source, value, this.context, this.parent);\n        }\n        return new Scope(this.params, this.source, value, this.context, this);\n    };\n    Scope.prototype.createHidden = function (value) {\n        var result = this.createNested(value);\n        result.isHidden = true;\n        return result;\n    };\n    return Scope;\n}());function evaluate(node, scope, execute) {\n    if (execute === void 0) { execute = evaluate; }\n    var func = EXECUTORS[node.type];\n    return func(node, scope, execute);\n}\n/**\n * Applies the function to a value, but tries to avoid creating unnecessary promises.\n */\nfunction promiselessApply(value, cb) {\n    if ('then' in value) {\n        return value.then(cb);\n    }\n    return cb(value);\n}\nvar EXECUTORS = {\n    This: function (_, scope) {\n        return scope.value;\n    },\n    Selector: function () {\n        // These should be evaluated separely using a different evaluator.\n        // At the mooment we haven't implemented this.\n        throw new Error('Selectors can not be evaluated');\n    },\n    Everything: function (_, scope) {\n        return scope.source;\n    },\n    Parameter: function (_a, scope) {\n        var name = _a.name;\n        return fromJS(scope.params[name]);\n    },\n    Context: function (_a, scope) {\n        var key = _a.key;\n        if (key === 'before' || key === 'after') {\n            var value = scope.context[key];\n            return value || NULL_VALUE;\n        }\n        throw new Error(\"unknown context key: \".concat(key));\n    },\n    Parent: function (_a, scope) {\n        var n = _a.n;\n        var current = scope;\n        for (var i = 0; i < n; i++) {\n            if (!current.parent) {\n                return NULL_VALUE;\n            }\n            current = current.parent;\n        }\n        return current.value;\n    },\n    OpCall: function (_a, scope, execute) {\n        var _this = this;\n        var op = _a.op, left = _a.left, right = _a.right;\n        var func = operators[op];\n        if (!func) {\n            throw new Error(\"Unknown operator: \".concat(op));\n        }\n        var leftValue = execute(left, scope);\n        var rightValue = execute(right, scope);\n        // Avoid uneccesary promises\n        // This is required for constant evaluation to work correctly.\n        if ('then' in leftValue || 'then' in rightValue) {\n            return (function () { return __awaiter(_this, void 0, void 0, function () { var _a, _b; return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _a = func;\n                        return [4 /*yield*/, leftValue];\n                    case 1:\n                        _b = [_c.sent()];\n                        return [4 /*yield*/, rightValue];\n                    case 2: return [2 /*return*/, _a.apply(void 0, _b.concat([_c.sent()]))];\n                }\n            }); }); })();\n        }\n        return func(leftValue, rightValue);\n    },\n    Select: function (_a, scope, execute) {\n        var alternatives = _a.alternatives, fallback = _a.fallback;\n        return __awaiter(this, void 0, void 0, function () {\n            var _i, alternatives_1, alt, altCond;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _i = 0, alternatives_1 = alternatives;\n                        _b.label = 1;\n                    case 1:\n                        if (!(_i < alternatives_1.length)) return [3 /*break*/, 4];\n                        alt = alternatives_1[_i];\n                        return [4 /*yield*/, execute(alt.condition, scope)];\n                    case 2:\n                        altCond = _b.sent();\n                        if (altCond.type === 'boolean' && altCond.data === true) {\n                            return [2 /*return*/, execute(alt.value, scope)];\n                        }\n                        _b.label = 3;\n                    case 3:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 4:\n                        if (fallback) {\n                            return [2 /*return*/, execute(fallback, scope)];\n                        }\n                        return [2 /*return*/, NULL_VALUE];\n                }\n            });\n        });\n    },\n    InRange: function (_a, scope, execute) {\n        var base = _a.base, left = _a.left, right = _a.right, isInclusive = _a.isInclusive;\n        return __awaiter(this, void 0, void 0, function () {\n            var value, leftValue, rightValue, leftCmp, _b, _c, rightCmp, _d, _e;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0: return [4 /*yield*/, execute(base, scope)];\n                    case 1:\n                        value = _f.sent();\n                        return [4 /*yield*/, execute(left, scope)];\n                    case 2:\n                        leftValue = _f.sent();\n                        return [4 /*yield*/, execute(right, scope)];\n                    case 3:\n                        rightValue = _f.sent();\n                        _b = partialCompare;\n                        return [4 /*yield*/, value.get()];\n                    case 4:\n                        _c = [_f.sent()];\n                        return [4 /*yield*/, leftValue.get()];\n                    case 5:\n                        leftCmp = _b.apply(void 0, _c.concat([_f.sent()]));\n                        if (leftCmp === null) {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        _d = partialCompare;\n                        return [4 /*yield*/, value.get()];\n                    case 6:\n                        _e = [_f.sent()];\n                        return [4 /*yield*/, rightValue.get()];\n                    case 7:\n                        rightCmp = _d.apply(void 0, _e.concat([_f.sent()]));\n                        if (rightCmp === null) {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        if (isInclusive) {\n                            return [2 /*return*/, leftCmp >= 0 && rightCmp <= 0 ? TRUE_VALUE : FALSE_VALUE];\n                        }\n                        return [2 /*return*/, leftCmp >= 0 && rightCmp < 0 ? TRUE_VALUE : FALSE_VALUE];\n                }\n            });\n        });\n    },\n    Filter: function (_a, scope, execute) {\n        var base = _a.base, expr = _a.expr;\n        return __awaiter(this, void 0, void 0, function () {\n            var baseValue;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, execute(base, scope)];\n                    case 1:\n                        baseValue = _b.sent();\n                        if (!baseValue.isArray()) {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        return [2 /*return*/, new StreamValue(function () {\n                                return __asyncGenerator(this, arguments, function () {\n                                    var baseValue_1, baseValue_1_1, elem, newScope, exprValue, e_1_1;\n                                    var e_1, _a;\n                                    return __generator(this, function (_b) {\n                                        switch (_b.label) {\n                                            case 0:\n                                                _b.trys.push([0, 8, 9, 14]);\n                                                baseValue_1 = __asyncValues(baseValue);\n                                                _b.label = 1;\n                                            case 1: return [4 /*yield*/, __await(baseValue_1.next())];\n                                            case 2:\n                                                if (!(baseValue_1_1 = _b.sent(), !baseValue_1_1.done)) return [3 /*break*/, 7];\n                                                elem = baseValue_1_1.value;\n                                                newScope = scope.createNested(elem);\n                                                return [4 /*yield*/, __await(execute(expr, newScope))];\n                                            case 3:\n                                                exprValue = _b.sent();\n                                                if (!(exprValue.type === 'boolean' && exprValue.data === true)) return [3 /*break*/, 6];\n                                                return [4 /*yield*/, __await(elem)];\n                                            case 4: return [4 /*yield*/, _b.sent()];\n                                            case 5:\n                                                _b.sent();\n                                                _b.label = 6;\n                                            case 6: return [3 /*break*/, 1];\n                                            case 7: return [3 /*break*/, 14];\n                                            case 8:\n                                                e_1_1 = _b.sent();\n                                                e_1 = { error: e_1_1 };\n                                                return [3 /*break*/, 14];\n                                            case 9:\n                                                _b.trys.push([9, , 12, 13]);\n                                                if (!(baseValue_1_1 && !baseValue_1_1.done && (_a = baseValue_1[\"return\"]))) return [3 /*break*/, 11];\n                                                return [4 /*yield*/, __await(_a.call(baseValue_1))];\n                                            case 10:\n                                                _b.sent();\n                                                _b.label = 11;\n                                            case 11: return [3 /*break*/, 13];\n                                            case 12:\n                                                if (e_1) throw e_1.error;\n                                                return [7 /*endfinally*/];\n                                            case 13: return [7 /*endfinally*/];\n                                            case 14: return [2 /*return*/];\n                                        }\n                                    });\n                                });\n                            })];\n                }\n            });\n        });\n    },\n    Projection: function (_a, scope, execute) {\n        var base = _a.base, expr = _a.expr;\n        return __awaiter(this, void 0, void 0, function () {\n            var baseValue, newScope;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, execute(base, scope)];\n                    case 1:\n                        baseValue = _b.sent();\n                        if (baseValue.type !== 'object') {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        newScope = scope.createNested(baseValue);\n                        return [2 /*return*/, execute(expr, newScope)];\n                }\n            });\n        });\n    },\n    FuncCall: function (_a, scope, execute) {\n        var func = _a.func, args = _a.args;\n        return func(args, scope, execute);\n    },\n    PipeFuncCall: function (_a, scope, execute) {\n        var func = _a.func, base = _a.base, args = _a.args;\n        return __awaiter(this, void 0, void 0, function () {\n            var baseValue;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, execute(base, scope)];\n                    case 1:\n                        baseValue = _b.sent();\n                        return [2 /*return*/, func(baseValue, args, scope, execute)];\n                }\n            });\n        });\n    },\n    AccessAttribute: function (_a, scope, execute) {\n        var base = _a.base, name = _a.name;\n        return __awaiter(this, void 0, void 0, function () {\n            var value;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        value = scope.value;\n                        if (!base) return [3 /*break*/, 2];\n                        return [4 /*yield*/, execute(base, scope)];\n                    case 1:\n                        value = _b.sent();\n                        _b.label = 2;\n                    case 2:\n                        if (value.type === 'object') {\n                            if (value.data.hasOwnProperty(name)) {\n                                return [2 /*return*/, fromJS(value.data[name])];\n                            }\n                        }\n                        return [2 /*return*/, NULL_VALUE];\n                }\n            });\n        });\n    },\n    AccessElement: function (_a, scope, execute) {\n        var base = _a.base, index = _a.index;\n        return __awaiter(this, void 0, void 0, function () {\n            var baseValue, data, finalIndex;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, execute(base, scope)];\n                    case 1:\n                        baseValue = _b.sent();\n                        if (!baseValue.isArray()) {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        return [4 /*yield*/, baseValue.get()];\n                    case 2:\n                        data = _b.sent();\n                        finalIndex = index < 0 ? index + data.length : index;\n                        return [2 /*return*/, fromJS(data[finalIndex])];\n                }\n            });\n        });\n    },\n    Slice: function (_a, scope, execute) {\n        var base = _a.base, left = _a.left, right = _a.right, isInclusive = _a.isInclusive;\n        return __awaiter(this, void 0, void 0, function () {\n            var baseValue, array, leftIdx, rightIdx;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, execute(base, scope)];\n                    case 1:\n                        baseValue = _b.sent();\n                        if (!baseValue.isArray()) {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        return [4 /*yield*/, baseValue.get()];\n                    case 2:\n                        array = (_b.sent());\n                        leftIdx = left;\n                        rightIdx = right;\n                        // Handle negative index\n                        if (leftIdx < 0) {\n                            leftIdx = array.length + leftIdx;\n                        }\n                        if (rightIdx < 0) {\n                            rightIdx = array.length + rightIdx;\n                        }\n                        // Convert from inclusive to exclusive index\n                        if (isInclusive) {\n                            rightIdx++;\n                        }\n                        if (leftIdx < 0) {\n                            leftIdx = 0;\n                        }\n                        if (rightIdx < 0) {\n                            rightIdx = 0;\n                        }\n                        // Note: At this point the indices might point out-of-bound, but\n                        // .slice handles this correctly.\n                        return [2 /*return*/, fromJS(array.slice(leftIdx, rightIdx))];\n                }\n            });\n        });\n    },\n    Deref: function (_a, scope, execute) {\n        var e_2, _b;\n        var base = _a.base;\n        return __awaiter(this, void 0, void 0, function () {\n            var value, id, _c, _d, doc, e_2_1;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0: return [4 /*yield*/, execute(base, scope)];\n                    case 1:\n                        value = _e.sent();\n                        if (!scope.source.isArray()) {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        if (value.type !== 'object') {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        id = value.data._ref;\n                        if (typeof id !== 'string') {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        _e.label = 2;\n                    case 2:\n                        _e.trys.push([2, 7, 8, 13]);\n                        _c = __asyncValues(scope.source);\n                        _e.label = 3;\n                    case 3: return [4 /*yield*/, _c.next()];\n                    case 4:\n                        if (!(_d = _e.sent(), !_d.done)) return [3 /*break*/, 6];\n                        doc = _d.value;\n                        if (doc.type === 'object' && id === doc.data._id) {\n                            return [2 /*return*/, doc];\n                        }\n                        _e.label = 5;\n                    case 5: return [3 /*break*/, 3];\n                    case 6: return [3 /*break*/, 13];\n                    case 7:\n                        e_2_1 = _e.sent();\n                        e_2 = { error: e_2_1 };\n                        return [3 /*break*/, 13];\n                    case 8:\n                        _e.trys.push([8, , 11, 12]);\n                        if (!(_d && !_d.done && (_b = _c[\"return\"]))) return [3 /*break*/, 10];\n                        return [4 /*yield*/, _b.call(_c)];\n                    case 9:\n                        _e.sent();\n                        _e.label = 10;\n                    case 10: return [3 /*break*/, 12];\n                    case 11:\n                        if (e_2) throw e_2.error;\n                        return [7 /*endfinally*/];\n                    case 12: return [7 /*endfinally*/];\n                    case 13: return [2 /*return*/, NULL_VALUE];\n                }\n            });\n        });\n    },\n    Value: function (_a) {\n        var value = _a.value;\n        return fromJS(value);\n    },\n    Group: function (_a, scope, execute) {\n        var base = _a.base;\n        return execute(base, scope);\n    },\n    Object: function (_a, scope, execute) {\n        var attributes = _a.attributes;\n        return __awaiter(this, void 0, void 0, function () {\n            var result, _i, attributes_1, attr, attrType, _b, value, _c, _d, cond, value, value;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        result = {};\n                        _i = 0, attributes_1 = attributes;\n                        _e.label = 1;\n                    case 1:\n                        if (!(_i < attributes_1.length)) return [3 /*break*/, 12];\n                        attr = attributes_1[_i];\n                        attrType = attr.type;\n                        _b = attr.type;\n                        switch (_b) {\n                            case 'ObjectAttributeValue': return [3 /*break*/, 2];\n                            case 'ObjectConditionalSplat': return [3 /*break*/, 5];\n                            case 'ObjectSplat': return [3 /*break*/, 8];\n                        }\n                        return [3 /*break*/, 10];\n                    case 2: return [4 /*yield*/, execute(attr.value, scope)];\n                    case 3:\n                        value = _e.sent();\n                        _c = result;\n                        _d = attr.name;\n                        return [4 /*yield*/, value.get()];\n                    case 4:\n                        _c[_d] = _e.sent();\n                        return [3 /*break*/, 11];\n                    case 5: return [4 /*yield*/, execute(attr.condition, scope)];\n                    case 6:\n                        cond = _e.sent();\n                        if (cond.type !== 'boolean' || cond.data === false) {\n                            return [3 /*break*/, 11];\n                        }\n                        return [4 /*yield*/, execute(attr.value, scope)];\n                    case 7:\n                        value = _e.sent();\n                        if (value.type === 'object') {\n                            Object.assign(result, value.data);\n                        }\n                        return [3 /*break*/, 11];\n                    case 8: return [4 /*yield*/, execute(attr.value, scope)];\n                    case 9:\n                        value = _e.sent();\n                        if (value.type === 'object') {\n                            Object.assign(result, value.data);\n                        }\n                        return [3 /*break*/, 11];\n                    case 10: throw new Error(\"Unknown node type: \".concat(attrType));\n                    case 11:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 12: return [2 /*return*/, fromJS(result)];\n                }\n            });\n        });\n    },\n    Array: function (_a, scope, execute) {\n        var elements = _a.elements;\n        return new StreamValue(function () {\n            return __asyncGenerator(this, arguments, function () {\n                var _i, elements_1, element, value, value_1, value_1_1, v, e_3_1;\n                var e_3, _a;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _i = 0, elements_1 = elements;\n                            _b.label = 1;\n                        case 1:\n                            if (!(_i < elements_1.length)) return [3 /*break*/, 21];\n                            element = elements_1[_i];\n                            return [4 /*yield*/, __await(execute(element.value, scope))];\n                        case 2:\n                            value = _b.sent();\n                            if (!element.isSplat) return [3 /*break*/, 17];\n                            if (!value.isArray()) return [3 /*break*/, 16];\n                            _b.label = 3;\n                        case 3:\n                            _b.trys.push([3, 10, 11, 16]);\n                            value_1 = (e_3 = void 0, __asyncValues(value));\n                            _b.label = 4;\n                        case 4: return [4 /*yield*/, __await(value_1.next())];\n                        case 5:\n                            if (!(value_1_1 = _b.sent(), !value_1_1.done)) return [3 /*break*/, 9];\n                            v = value_1_1.value;\n                            return [4 /*yield*/, __await(v)];\n                        case 6: return [4 /*yield*/, _b.sent()];\n                        case 7:\n                            _b.sent();\n                            _b.label = 8;\n                        case 8: return [3 /*break*/, 4];\n                        case 9: return [3 /*break*/, 16];\n                        case 10:\n                            e_3_1 = _b.sent();\n                            e_3 = { error: e_3_1 };\n                            return [3 /*break*/, 16];\n                        case 11:\n                            _b.trys.push([11, , 14, 15]);\n                            if (!(value_1_1 && !value_1_1.done && (_a = value_1[\"return\"]))) return [3 /*break*/, 13];\n                            return [4 /*yield*/, __await(_a.call(value_1))];\n                        case 12:\n                            _b.sent();\n                            _b.label = 13;\n                        case 13: return [3 /*break*/, 15];\n                        case 14:\n                            if (e_3) throw e_3.error;\n                            return [7 /*endfinally*/];\n                        case 15: return [7 /*endfinally*/];\n                        case 16: return [3 /*break*/, 20];\n                        case 17: return [4 /*yield*/, __await(value)];\n                        case 18: return [4 /*yield*/, _b.sent()];\n                        case 19:\n                            _b.sent();\n                            _b.label = 20;\n                        case 20:\n                            _i++;\n                            return [3 /*break*/, 1];\n                        case 21: return [2 /*return*/];\n                    }\n                });\n            });\n        });\n    },\n    Tuple: function () {\n        throw new Error('tuples can not be evaluated');\n    },\n    Or: function (_a, scope, execute) {\n        var left = _a.left, right = _a.right;\n        return __awaiter(this, void 0, void 0, function () {\n            var leftValue, rightValue;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, execute(left, scope)];\n                    case 1:\n                        leftValue = _b.sent();\n                        return [4 /*yield*/, execute(right, scope)];\n                    case 2:\n                        rightValue = _b.sent();\n                        if (leftValue.type === 'boolean') {\n                            if (leftValue.data === true) {\n                                return [2 /*return*/, TRUE_VALUE];\n                            }\n                        }\n                        if (rightValue.type === 'boolean') {\n                            if (rightValue.data === true) {\n                                return [2 /*return*/, TRUE_VALUE];\n                            }\n                        }\n                        if (leftValue.type !== 'boolean' || rightValue.type !== 'boolean') {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        return [2 /*return*/, FALSE_VALUE];\n                }\n            });\n        });\n    },\n    And: function (_a, scope, execute) {\n        var left = _a.left, right = _a.right;\n        return __awaiter(this, void 0, void 0, function () {\n            var leftValue, rightValue;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, execute(left, scope)];\n                    case 1:\n                        leftValue = _b.sent();\n                        return [4 /*yield*/, execute(right, scope)];\n                    case 2:\n                        rightValue = _b.sent();\n                        if (leftValue.type === 'boolean') {\n                            if (leftValue.data === false) {\n                                return [2 /*return*/, FALSE_VALUE];\n                            }\n                        }\n                        if (rightValue.type === 'boolean') {\n                            if (rightValue.data === false) {\n                                return [2 /*return*/, FALSE_VALUE];\n                            }\n                        }\n                        if (leftValue.type !== 'boolean' || rightValue.type !== 'boolean') {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        return [2 /*return*/, TRUE_VALUE];\n                }\n            });\n        });\n    },\n    Not: function (_a, scope, execute) {\n        var base = _a.base;\n        return __awaiter(this, void 0, void 0, function () {\n            var value;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, execute(base, scope)];\n                    case 1:\n                        value = _b.sent();\n                        if (value.type !== 'boolean') {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        return [2 /*return*/, value.data ? FALSE_VALUE : TRUE_VALUE];\n                }\n            });\n        });\n    },\n    Neg: function (_a, scope, execute) {\n        var base = _a.base;\n        return promiselessApply(execute(base, scope), function (value) {\n            if (value.type !== 'number') {\n                return NULL_VALUE;\n            }\n            return fromNumber(-value.data);\n        });\n    },\n    Pos: function (_a, scope, execute) {\n        var base = _a.base;\n        return promiselessApply(execute(base, scope), function (value) {\n            if (value.type !== 'number') {\n                return NULL_VALUE;\n            }\n            return fromNumber(value.data);\n        });\n    },\n    Asc: function () {\n        return NULL_VALUE;\n    },\n    Desc: function () {\n        return NULL_VALUE;\n    },\n    ArrayCoerce: function (_a, scope, execute) {\n        var base = _a.base;\n        return __awaiter(this, void 0, void 0, function () {\n            var value;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, execute(base, scope)];\n                    case 1:\n                        value = _b.sent();\n                        return [2 /*return*/, value.isArray() ? value : NULL_VALUE];\n                }\n            });\n        });\n    },\n    Map: function (_a, scope, execute) {\n        var base = _a.base, expr = _a.expr;\n        return __awaiter(this, void 0, void 0, function () {\n            var value;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, execute(base, scope)];\n                    case 1:\n                        value = _b.sent();\n                        if (!value.isArray()) {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        return [2 /*return*/, new StreamValue(function () {\n                                return __asyncGenerator(this, arguments, function () {\n                                    var value_2, value_2_1, elem, newScope, e_4_1;\n                                    var e_4, _a;\n                                    return __generator(this, function (_b) {\n                                        switch (_b.label) {\n                                            case 0:\n                                                _b.trys.push([0, 8, 9, 14]);\n                                                value_2 = __asyncValues(value);\n                                                _b.label = 1;\n                                            case 1: return [4 /*yield*/, __await(value_2.next())];\n                                            case 2:\n                                                if (!(value_2_1 = _b.sent(), !value_2_1.done)) return [3 /*break*/, 7];\n                                                elem = value_2_1.value;\n                                                newScope = scope.createHidden(elem);\n                                                return [4 /*yield*/, __await(execute(expr, newScope))];\n                                            case 3: return [4 /*yield*/, __await.apply(void 0, [_b.sent()])];\n                                            case 4: return [4 /*yield*/, _b.sent()];\n                                            case 5:\n                                                _b.sent();\n                                                _b.label = 6;\n                                            case 6: return [3 /*break*/, 1];\n                                            case 7: return [3 /*break*/, 14];\n                                            case 8:\n                                                e_4_1 = _b.sent();\n                                                e_4 = { error: e_4_1 };\n                                                return [3 /*break*/, 14];\n                                            case 9:\n                                                _b.trys.push([9, , 12, 13]);\n                                                if (!(value_2_1 && !value_2_1.done && (_a = value_2[\"return\"]))) return [3 /*break*/, 11];\n                                                return [4 /*yield*/, __await(_a.call(value_2))];\n                                            case 10:\n                                                _b.sent();\n                                                _b.label = 11;\n                                            case 11: return [3 /*break*/, 13];\n                                            case 12:\n                                                if (e_4) throw e_4.error;\n                                                return [7 /*endfinally*/];\n                                            case 13: return [7 /*endfinally*/];\n                                            case 14: return [2 /*return*/];\n                                        }\n                                    });\n                                });\n                            })];\n                }\n            });\n        });\n    },\n    FlatMap: function (_a, scope, execute) {\n        var base = _a.base, expr = _a.expr;\n        return __awaiter(this, void 0, void 0, function () {\n            var value;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, execute(base, scope)];\n                    case 1:\n                        value = _b.sent();\n                        if (!value.isArray()) {\n                            return [2 /*return*/, NULL_VALUE];\n                        }\n                        return [2 /*return*/, new StreamValue(function () {\n                                return __asyncGenerator(this, arguments, function () {\n                                    var value_3, value_3_1, elem, newScope, innerValue, innerValue_1, innerValue_1_1, inner, e_5_1, e_6_1;\n                                    var e_6, _a, e_5, _b;\n                                    return __generator(this, function (_c) {\n                                        switch (_c.label) {\n                                            case 0:\n                                                _c.trys.push([0, 23, 24, 29]);\n                                                value_3 = __asyncValues(value);\n                                                _c.label = 1;\n                                            case 1: return [4 /*yield*/, __await(value_3.next())];\n                                            case 2:\n                                                if (!(value_3_1 = _c.sent(), !value_3_1.done)) return [3 /*break*/, 22];\n                                                elem = value_3_1.value;\n                                                newScope = scope.createHidden(elem);\n                                                return [4 /*yield*/, __await(execute(expr, newScope))];\n                                            case 3:\n                                                innerValue = _c.sent();\n                                                if (!innerValue.isArray()) return [3 /*break*/, 18];\n                                                _c.label = 4;\n                                            case 4:\n                                                _c.trys.push([4, 11, 12, 17]);\n                                                innerValue_1 = (e_5 = void 0, __asyncValues(innerValue));\n                                                _c.label = 5;\n                                            case 5: return [4 /*yield*/, __await(innerValue_1.next())];\n                                            case 6:\n                                                if (!(innerValue_1_1 = _c.sent(), !innerValue_1_1.done)) return [3 /*break*/, 10];\n                                                inner = innerValue_1_1.value;\n                                                return [4 /*yield*/, __await(inner)];\n                                            case 7: return [4 /*yield*/, _c.sent()];\n                                            case 8:\n                                                _c.sent();\n                                                _c.label = 9;\n                                            case 9: return [3 /*break*/, 5];\n                                            case 10: return [3 /*break*/, 17];\n                                            case 11:\n                                                e_5_1 = _c.sent();\n                                                e_5 = { error: e_5_1 };\n                                                return [3 /*break*/, 17];\n                                            case 12:\n                                                _c.trys.push([12, , 15, 16]);\n                                                if (!(innerValue_1_1 && !innerValue_1_1.done && (_b = innerValue_1[\"return\"]))) return [3 /*break*/, 14];\n                                                return [4 /*yield*/, __await(_b.call(innerValue_1))];\n                                            case 13:\n                                                _c.sent();\n                                                _c.label = 14;\n                                            case 14: return [3 /*break*/, 16];\n                                            case 15:\n                                                if (e_5) throw e_5.error;\n                                                return [7 /*endfinally*/];\n                                            case 16: return [7 /*endfinally*/];\n                                            case 17: return [3 /*break*/, 21];\n                                            case 18: return [4 /*yield*/, __await(innerValue)];\n                                            case 19: return [4 /*yield*/, _c.sent()];\n                                            case 20:\n                                                _c.sent();\n                                                _c.label = 21;\n                                            case 21: return [3 /*break*/, 1];\n                                            case 22: return [3 /*break*/, 29];\n                                            case 23:\n                                                e_6_1 = _c.sent();\n                                                e_6 = { error: e_6_1 };\n                                                return [3 /*break*/, 29];\n                                            case 24:\n                                                _c.trys.push([24, , 27, 28]);\n                                                if (!(value_3_1 && !value_3_1.done && (_a = value_3[\"return\"]))) return [3 /*break*/, 26];\n                                                return [4 /*yield*/, __await(_a.call(value_3))];\n                                            case 25:\n                                                _c.sent();\n                                                _c.label = 26;\n                                            case 26: return [3 /*break*/, 28];\n                                            case 27:\n                                                if (e_6) throw e_6.error;\n                                                return [7 /*endfinally*/];\n                                            case 28: return [7 /*endfinally*/];\n                                            case 29: return [2 /*return*/];\n                                        }\n                                    });\n                                });\n                            })];\n                }\n            });\n        });\n    }\n};\n/**\n * Evaluates a query.\n */\nfunction evaluateQuery(tree, options) {\n    if (options === void 0) { options = {}; }\n    var root = fromJS(options.root);\n    var dataset = fromJS(options.dataset);\n    var params = __assign({}, options.params);\n    var scope = new Scope(params, dataset, root, {\n        timestamp: options.timestamp || new Date(),\n        identity: options.identity === undefined ? 'me' : options.identity,\n        sanity: options.sanity,\n        after: options.after ? fromJS(options.after) : null,\n        before: options.before ? fromJS(options.before) : null\n    }, null);\n    return evaluate(tree, scope);\n}function canConstantEvaluate(node) {\n    switch (node.type) {\n        case 'Group':\n        case 'Value':\n        case 'Parameter':\n            return true;\n        case 'Pos':\n        case 'Neg':\n            return canConstantEvaluate(node.base);\n        case 'OpCall':\n            switch (node.op) {\n                case '+':\n                case '-':\n                case '*':\n                case '/':\n                case '%':\n                case '**':\n                    return canConstantEvaluate(node.left) && canConstantEvaluate(node.right);\n                default:\n                    return false;\n            }\n        default:\n            return false;\n    }\n}\nvar DUMMY_SCOPE = new Scope({}, NULL_VALUE, NULL_VALUE, { timestamp: new Date(0), identity: 'me', before: null, after: null }, null);\nfunction tryConstantEvaluate(node) {\n    if (!canConstantEvaluate(node)) {\n        return null;\n    }\n    return constantEvaluate(node);\n}\nfunction constantEvaluate(node) {\n    var value = evaluate(node, DUMMY_SCOPE, constantEvaluate);\n    if ('then' in value) {\n        throw new Error('BUG: constant evaluate should never return a promise');\n    }\n    return value;\n}var ESCAPE_SEQUENCE = {\n    \"'\": \"'\",\n    '\"': '\"',\n    '\\\\': '\\\\',\n    '/': '/',\n    b: '\\b',\n    f: '\\f',\n    n: '\\n',\n    r: '\\r',\n    t: '\\t'\n};\nfunction expandHex(str) {\n    var charCode = parseInt(str, 16);\n    return String.fromCharCode(charCode);\n}\nvar GroqQueryError = /** @class */ (function (_super) {\n    __extends(GroqQueryError, _super);\n    function GroqQueryError() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.name = 'GroqQueryError';\n        return _this;\n    }\n    return GroqQueryError;\n}(Error));\nvar EXPR_BUILDER = {\n    group: function (p) {\n        var inner = p.process(EXPR_BUILDER);\n        return {\n            type: 'Group',\n            base: inner\n        };\n    },\n    everything: function () {\n        return { type: 'Everything' };\n    },\n    \"this\": function () {\n        return { type: 'This' };\n    },\n    parent: function () {\n        return {\n            type: 'Parent',\n            n: 1\n        };\n    },\n    dblparent: function (p) {\n        var next = p.process(EXPR_BUILDER);\n        return {\n            type: 'Parent',\n            n: next.n + 1\n        };\n    },\n    traverse: function (p) {\n        var base = p.process(EXPR_BUILDER);\n        var traversalList = [];\n        while (p.getMark().name !== 'traversal_end') {\n            traversalList.push(p.process(TRAVERSE_BUILDER));\n        }\n        p.shift();\n        var traversal = null;\n        for (var i = traversalList.length - 1; i >= 0; i--) {\n            traversal = traversalList[i](traversal);\n        }\n        if (base.type === 'Everything' || base.type === 'Array' || base.type === 'PipeFuncCall') {\n            traversal = traverseArray(function (val) { return val; }, traversal);\n        }\n        if (traversal === null)\n            throw new Error('BUG: unexpected empty traversal');\n        return traversal.build(base);\n    },\n    this_attr: function (p) {\n        var name = p.processString();\n        if (name === 'null') {\n            return { type: 'Value', value: null };\n        }\n        if (name === 'true') {\n            return { type: 'Value', value: true };\n        }\n        if (name === 'false') {\n            return { type: 'Value', value: false };\n        }\n        return {\n            type: 'AccessAttribute',\n            name: name\n        };\n    },\n    neg: function (p) {\n        var base = p.process(EXPR_BUILDER);\n        return {\n            type: 'Neg',\n            base: base\n        };\n    },\n    pos: function (p) {\n        var base = p.process(EXPR_BUILDER);\n        return {\n            type: 'Pos',\n            base: base\n        };\n    },\n    add: function (p) {\n        var left = p.process(EXPR_BUILDER);\n        var right = p.process(EXPR_BUILDER);\n        return {\n            type: 'OpCall',\n            op: '+',\n            left: left,\n            right: right\n        };\n    },\n    sub: function (p) {\n        var left = p.process(EXPR_BUILDER);\n        var right = p.process(EXPR_BUILDER);\n        return {\n            type: 'OpCall',\n            op: '-',\n            left: left,\n            right: right\n        };\n    },\n    mul: function (p) {\n        var left = p.process(EXPR_BUILDER);\n        var right = p.process(EXPR_BUILDER);\n        return {\n            type: 'OpCall',\n            op: '*',\n            left: left,\n            right: right\n        };\n    },\n    div: function (p) {\n        var left = p.process(EXPR_BUILDER);\n        var right = p.process(EXPR_BUILDER);\n        return {\n            type: 'OpCall',\n            op: '/',\n            left: left,\n            right: right\n        };\n    },\n    mod: function (p) {\n        var left = p.process(EXPR_BUILDER);\n        var right = p.process(EXPR_BUILDER);\n        return {\n            type: 'OpCall',\n            op: '%',\n            left: left,\n            right: right\n        };\n    },\n    pow: function (p) {\n        var left = p.process(EXPR_BUILDER);\n        var right = p.process(EXPR_BUILDER);\n        return {\n            type: 'OpCall',\n            op: '**',\n            left: left,\n            right: right\n        };\n    },\n    comp: function (p) {\n        var left = p.process(EXPR_BUILDER);\n        var op = p.processString();\n        var right = p.process(EXPR_BUILDER);\n        return {\n            type: 'OpCall',\n            op: op,\n            left: left,\n            right: right\n        };\n    },\n    in_range: function (p) {\n        var base = p.process(EXPR_BUILDER);\n        var isInclusive = p.getMark().name === 'inc_range';\n        p.shift();\n        var left = p.process(EXPR_BUILDER);\n        var right = p.process(EXPR_BUILDER);\n        return {\n            type: 'InRange',\n            base: base,\n            left: left,\n            right: right,\n            isInclusive: isInclusive\n        };\n    },\n    str: function (p) {\n        var value = '';\n        // eslint-disable-next-line no-labels\n        loop: while (p.hasMark()) {\n            var mark = p.getMark();\n            switch (mark.name) {\n                case 'str_end':\n                    value += p.processStringEnd();\n                    // eslint-disable-next-line no-labels\n                    break loop;\n                case 'str_pause':\n                    value += p.processStringEnd();\n                    break;\n                case 'str_start':\n                    p.shift();\n                    break;\n                case 'single_escape': {\n                    var char = p.slice(1);\n                    p.shift();\n                    value += ESCAPE_SEQUENCE[char];\n                    break;\n                }\n                case 'unicode_hex':\n                    p.shift();\n                    value += expandHex(p.processStringEnd());\n                    break;\n                default:\n                    throw new Error(\"unexpected mark: \".concat(mark.name));\n            }\n        }\n        return { type: 'Value', value: value };\n    },\n    integer: function (p) {\n        var strValue = p.processStringEnd();\n        return {\n            type: 'Value',\n            value: Number(strValue)\n        };\n    },\n    float: function (p) {\n        var strValue = p.processStringEnd();\n        return {\n            type: 'Value',\n            value: Number(strValue)\n        };\n    },\n    sci: function (p) {\n        var strValue = p.processStringEnd();\n        return {\n            type: 'Value',\n            value: Number(strValue)\n        };\n    },\n    object: function (p) {\n        var attributes = [];\n        while (p.getMark().name !== 'object_end') {\n            attributes.push(p.process(OBJECT_BUILDER));\n        }\n        p.shift();\n        return {\n            type: 'Object',\n            attributes: attributes\n        };\n    },\n    array: function (p) {\n        var elements = [];\n        while (p.getMark().name !== 'array_end') {\n            var isSplat = false;\n            if (p.getMark().name === 'array_splat') {\n                isSplat = true;\n                p.shift();\n            }\n            var value = p.process(EXPR_BUILDER);\n            elements.push({\n                type: 'ArrayElement',\n                value: value,\n                isSplat: isSplat\n            });\n        }\n        p.shift();\n        return {\n            type: 'Array',\n            elements: elements\n        };\n    },\n    tuple: function (p) {\n        var members = [];\n        while (p.getMark().name !== 'tuple_end') {\n            members.push(p.process(EXPR_BUILDER));\n        }\n        p.shift();\n        return {\n            type: 'Tuple',\n            members: members\n        };\n    },\n    func_call: function (p) {\n        var namespace = 'global';\n        if (p.getMark().name === 'namespace') {\n            p.shift();\n            namespace = p.processString();\n        }\n        var name = p.processString();\n        if (namespace === 'global' && name === 'select') {\n            var result = {\n                type: 'Select',\n                alternatives: []\n            };\n            while (p.getMark().name !== 'func_args_end') {\n                if (p.getMark().name === 'pair') {\n                    if (result.fallback)\n                        throw new GroqQueryError(\"unexpected argument to select()\");\n                    p.shift();\n                    var condition = p.process(EXPR_BUILDER);\n                    var value = p.process(EXPR_BUILDER);\n                    result.alternatives.push({\n                        type: 'SelectAlternative',\n                        condition: condition,\n                        value: value\n                    });\n                }\n                else {\n                    if (result.fallback)\n                        throw new GroqQueryError(\"unexpected argument to select()\");\n                    var value = p.process(EXPR_BUILDER);\n                    result.fallback = value;\n                }\n            }\n            p.shift();\n            return result;\n        }\n        var args = [];\n        while (p.getMark().name !== 'func_args_end') {\n            if (argumentShouldBeSelector(namespace, name, args.length)) {\n                // Since the diff/delta functions aren't validated yet we only want to validate the selector\n                // being used. We expect the null valued arg to throw an error at evaluation time.\n                p.process(SELECTOR_BUILDER);\n                args.push({ type: 'Selector' });\n            }\n            else {\n                args.push(p.process(EXPR_BUILDER));\n            }\n        }\n        p.shift();\n        if (namespace === 'global' && (name === 'before' || name === 'after')) {\n            if (p.parseOptions.mode === 'delta') {\n                return {\n                    type: 'Context',\n                    key: name\n                };\n            }\n        }\n        if (namespace === 'global' && name === 'boost' && !p.allowBoost)\n            throw new GroqQueryError('unexpected boost');\n        var funcs = namespaces[namespace];\n        if (!funcs) {\n            throw new GroqQueryError(\"Undefined namespace: \".concat(namespace));\n        }\n        var func = funcs[name];\n        if (!func) {\n            throw new GroqQueryError(\"Undefined function: \".concat(name));\n        }\n        if (func.arity !== undefined) {\n            validateArity(name, func.arity, args.length);\n        }\n        if (func.mode !== undefined && func.mode !== p.parseOptions.mode) {\n            throw new GroqQueryError(\"Undefined function: \".concat(name));\n        }\n        return {\n            type: 'FuncCall',\n            func: func,\n            name: name,\n            args: args\n        };\n    },\n    pipecall: function (p) {\n        var base = p.process(EXPR_BUILDER);\n        p.shift(); // Remove the func_call\n        var namespace = 'global';\n        if (p.getMark().name === 'namespace') {\n            p.shift();\n            namespace = p.processString();\n        }\n        if (namespace !== 'global') {\n            throw new GroqQueryError(\"Undefined namespace: \".concat(namespace));\n        }\n        var name = p.processString();\n        var args = [];\n        var oldAllowBoost = p.allowBoost;\n        if (name === 'score') {\n            // Only allow boost inside a score expression\n            p.allowBoost = true;\n        }\n        for (;;) {\n            var markName = p.getMark().name;\n            if (markName === 'func_args_end') {\n                break;\n            }\n            if (name === 'order') {\n                if (markName === 'asc') {\n                    p.shift();\n                    args.push({ type: 'Asc', base: p.process(EXPR_BUILDER) });\n                    continue;\n                }\n                else if (markName === 'desc') {\n                    p.shift();\n                    args.push({ type: 'Desc', base: p.process(EXPR_BUILDER) });\n                    continue;\n                }\n            }\n            args.push(p.process(EXPR_BUILDER));\n        }\n        p.shift();\n        p.allowBoost = oldAllowBoost;\n        var func = pipeFunctions[name];\n        if (!func) {\n            throw new GroqQueryError(\"Undefined pipe function: \".concat(name));\n        }\n        if (func.arity) {\n            validateArity(name, func.arity, args.length);\n        }\n        return {\n            type: 'PipeFuncCall',\n            func: func,\n            base: base,\n            name: name,\n            args: args\n        };\n    },\n    pair: function (p) {\n        throw new GroqQueryError(\"unexpected =>\");\n    },\n    and: function (p) {\n        var left = p.process(EXPR_BUILDER);\n        var right = p.process(EXPR_BUILDER);\n        return {\n            type: 'And',\n            left: left,\n            right: right\n        };\n    },\n    or: function (p) {\n        var left = p.process(EXPR_BUILDER);\n        var right = p.process(EXPR_BUILDER);\n        return {\n            type: 'Or',\n            left: left,\n            right: right\n        };\n    },\n    not: function (p) {\n        var base = p.process(EXPR_BUILDER);\n        return {\n            type: 'Not',\n            base: base\n        };\n    },\n    asc: function (p) {\n        throw new GroqQueryError('unexpected asc');\n    },\n    desc: function (p) {\n        throw new GroqQueryError('unexpected desc');\n    },\n    param: function (p) {\n        var name = p.processString();\n        if (p.parseOptions.params && p.parseOptions.params.hasOwnProperty(name)) {\n            return {\n                type: 'Value',\n                value: p.parseOptions.params[name]\n            };\n        }\n        return {\n            type: 'Parameter',\n            name: name\n        };\n    }\n};\nvar OBJECT_BUILDER = {\n    object_expr: function (p) {\n        if (p.getMark().name === 'pair') {\n            p.shift();\n            var condition = p.process(EXPR_BUILDER);\n            var value_1 = p.process(EXPR_BUILDER);\n            return {\n                type: 'ObjectConditionalSplat',\n                condition: condition,\n                value: value_1\n            };\n        }\n        var value = p.process(EXPR_BUILDER);\n        return {\n            type: 'ObjectAttributeValue',\n            name: extractPropertyKey(value),\n            value: value\n        };\n    },\n    object_pair: function (p) {\n        var name = p.process(EXPR_BUILDER);\n        if (name.type !== 'Value')\n            throw new Error('name must be string');\n        var value = p.process(EXPR_BUILDER);\n        return {\n            type: 'ObjectAttributeValue',\n            name: name.value,\n            value: value\n        };\n    },\n    object_splat: function (p) {\n        var value = p.process(EXPR_BUILDER);\n        return {\n            type: 'ObjectSplat',\n            value: value\n        };\n    },\n    object_splat_this: function () {\n        return {\n            type: 'ObjectSplat',\n            value: { type: 'This' }\n        };\n    }\n};\nvar TRAVERSE_BUILDER = {\n    square_bracket: function (p) {\n        var expr = p.process(EXPR_BUILDER);\n        var value = tryConstantEvaluate(expr);\n        if (value && value.type === 'number') {\n            return function (right) {\n                return traverseElement(function (base) { return ({ type: 'AccessElement', base: base, index: value.data }); }, right);\n            };\n        }\n        if (value && value.type === 'string') {\n            return function (right) {\n                return traversePlain(function (base) { return ({ type: 'AccessAttribute', base: base, name: value.data }); }, right);\n            };\n        }\n        return function (right) {\n            return traverseArray(function (base) { return ({\n                type: 'Filter',\n                base: base,\n                expr: expr\n            }); }, right);\n        };\n    },\n    slice: function (p) {\n        var isInclusive = p.getMark().name === 'inc_range';\n        p.shift();\n        var left = p.process(EXPR_BUILDER);\n        var right = p.process(EXPR_BUILDER);\n        var leftValue = tryConstantEvaluate(left);\n        var rightValue = tryConstantEvaluate(right);\n        if (!leftValue || !rightValue || leftValue.type !== 'number' || rightValue.type !== 'number') {\n            throw new GroqQueryError('slicing must use constant numbers');\n        }\n        return function (rhs) {\n            return traverseArray(function (base) { return ({\n                type: 'Slice',\n                base: base,\n                left: leftValue.data,\n                right: rightValue.data,\n                isInclusive: isInclusive\n            }); }, rhs);\n        };\n    },\n    projection: function (p) {\n        var obj = p.process(EXPR_BUILDER);\n        return function (right) {\n            return traverseProjection(function (base) { return ({ type: 'Projection', base: base, expr: obj }); }, right);\n        };\n    },\n    attr_access: function (p) {\n        var name = p.processString();\n        return function (right) { return traversePlain(function (base) { return ({ type: 'AccessAttribute', base: base, name: name }); }, right); };\n    },\n    deref: function (p) {\n        var attr = null;\n        if (p.getMark().name === 'deref_attr') {\n            p.shift();\n            attr = p.processString();\n        }\n        var wrap = function (base) {\n            return attr ? { type: 'AccessAttribute', base: base, name: attr } : base;\n        };\n        return function (right) {\n            return traversePlain(function (base) {\n                return wrap({\n                    type: 'Deref',\n                    base: base\n                });\n            }, right);\n        };\n    },\n    array_postfix: function (p) {\n        return function (right) { return traverseArray(function (base) { return ({ type: 'ArrayCoerce', base: base }); }, right); };\n    }\n};\nvar SELECTOR_BUILDER = {\n    group: function (p) {\n        p.process(SELECTOR_BUILDER);\n        return null;\n    },\n    everything: function () {\n        throw new Error('Invalid selector syntax');\n    },\n    \"this\": function () {\n        throw new Error('Invalid selector syntax');\n    },\n    parent: function () {\n        throw new Error('Invalid selector syntax');\n    },\n    dblparent: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    traverse: function (p) {\n        p.process(SELECTOR_BUILDER);\n        while (p.getMark().name !== 'traversal_end') {\n            p.process(TRAVERSE_BUILDER);\n        }\n        p.shift();\n        return null;\n    },\n    this_attr: function (p) {\n        p.processString();\n        return null;\n    },\n    neg: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    pos: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    add: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    sub: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    mul: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    div: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    mod: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    pow: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    comp: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    in_range: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    str: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    integer: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    float: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    sci: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    object: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    array: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    tuple: function (p) {\n        // This should only throw an error until we add support for tuples in selectors.\n        throw new Error('Invalid selector syntax');\n    },\n    func_call: function (p, mark) {\n        var func = EXPR_BUILDER.func_call(p, mark);\n        if (func.name === 'anywhere' && func.args.length === 1)\n            return null;\n        throw new Error('Invalid selector syntax');\n    },\n    pipecall: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    pair: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    and: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    or: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    not: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    asc: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    desc: function (p) {\n        throw new Error('Invalid selector syntax');\n    },\n    param: function (p) {\n        throw new Error('Invalid selector syntax');\n    }\n};\nfunction extractPropertyKey(node) {\n    if (node.type === 'AccessAttribute' && !node.base) {\n        return node.name;\n    }\n    if (node.type === 'Deref' ||\n        node.type === 'Map' ||\n        node.type === 'Projection' ||\n        node.type === 'Slice' ||\n        node.type === 'Filter' ||\n        node.type === 'AccessElement' ||\n        node.type === 'ArrayCoerce') {\n        return extractPropertyKey(node.base);\n    }\n    throw new GroqQueryError(\"Cannot determine property key for type: \".concat(node.type));\n}\nfunction validateArity(name, arity, count) {\n    if (typeof arity === 'number') {\n        if (count !== arity) {\n            throw new GroqQueryError(\"Incorrect number of arguments to function \".concat(name, \"(). Expected \").concat(arity, \", got \").concat(count, \".\"));\n        }\n    }\n    else if (arity) {\n        if (!arity(count)) {\n            throw new GroqQueryError(\"Incorrect number of arguments to function \".concat(name, \"().\"));\n        }\n    }\n}\nfunction argumentShouldBeSelector(namespace, functionName, argCount) {\n    var functionsRequiringSelectors = ['changedAny', 'changedOnly'];\n    return namespace == 'diff' && argCount == 2 && functionsRequiringSelectors.includes(functionName);\n}\nvar GroqSyntaxError = /** @class */ (function (_super) {\n    __extends(GroqSyntaxError, _super);\n    function GroqSyntaxError(position) {\n        var _this = _super.call(this, \"Syntax error in GROQ query at position \".concat(position)) || this;\n        _this.name = 'GroqSyntaxError';\n        _this.position = position;\n        return _this;\n    }\n    return GroqSyntaxError;\n}(Error));\n/**\n * Parses a GROQ query and returns a tree structure.\n */\nfunction parse(input, options) {\n    if (options === void 0) { options = {}; }\n    var result = parse$1(input);\n    if (result.type === 'error') {\n        throw new GroqSyntaxError(result.position);\n    }\n    var processor = new MarkProcessor(input, result.marks, options);\n    return processor.process(EXPR_BUILDER);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/groq-js/dist/1.esm.mjs\n"));

/***/ }),

/***/ "./node_modules/throttle-debounce/esm/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/throttle-debounce/esm/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"debounce\": function() { return /* binding */ debounce; },\n/* harmony export */   \"throttle\": function() { return /* binding */ throttle; }\n/* harmony export */ });\n/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param {number} delay -                  A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher)\n *                                            are most useful.\n * @param {Function} callback -               A function to be executed after delay milliseconds. The `this` context and all arguments are passed through,\n *                                            as-is, to `callback` when the throttled-function is executed.\n * @param {object} [options] -              An object to configure options.\n * @param {boolean} [options.noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds\n *                                            while the throttled-function is being called. If noTrailing is false or unspecified, callback will be executed\n *                                            one final time after the last throttled-function call. (After the throttled-function has not been called for\n *                                            `delay` milliseconds, the internal counter is reset).\n * @param {boolean} [options.noLeading] -   Optional, defaults to false. If noLeading is false, the first throttled-function call will execute callback\n *                                            immediately. If noLeading is true, the first the callback execution will be skipped. It should be noted that\n *                                            callback will never executed if both noLeading = true and noTrailing = true.\n * @param {boolean} [options.debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is\n *                                            false (at end), schedule `callback` to execute after `delay` ms.\n *\n * @returns {Function} A new, throttled, function.\n */\nfunction throttle (delay, callback, options) {\n  var _ref = options || {},\n      _ref$noTrailing = _ref.noTrailing,\n      noTrailing = _ref$noTrailing === void 0 ? false : _ref$noTrailing,\n      _ref$noLeading = _ref.noLeading,\n      noLeading = _ref$noLeading === void 0 ? false : _ref$noLeading,\n      _ref$debounceMode = _ref.debounceMode,\n      debounceMode = _ref$debounceMode === void 0 ? undefined : _ref$debounceMode;\n  /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */\n\n\n  var timeoutID;\n  var cancelled = false; // Keep track of the last time `callback` was executed.\n\n  var lastExec = 0; // Function to clear existing timeout\n\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  } // Function to cancel next exec\n\n\n  function cancel(options) {\n    var _ref2 = options || {},\n        _ref2$upcomingOnly = _ref2.upcomingOnly,\n        upcomingOnly = _ref2$upcomingOnly === void 0 ? false : _ref2$upcomingOnly;\n\n    clearExistingTimeout();\n    cancelled = !upcomingOnly;\n  }\n  /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */\n\n\n  function wrapper() {\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n\n    if (cancelled) {\n      return;\n    } // Execute `callback` and update the `lastExec` timestamp.\n\n\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, arguments_);\n    }\n    /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */\n\n\n    function clear() {\n      timeoutID = undefined;\n    }\n\n    if (!noLeading && debounceMode && !timeoutID) {\n      /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`\n       * and noLeading != true.\n       */\n      exec();\n    }\n\n    clearExistingTimeout();\n\n    if (debounceMode === undefined && elapsed > delay) {\n      if (noLeading) {\n        /*\n         * In throttle mode with noLeading, if `delay` time has\n         * been exceeded, update `lastExec` and schedule `callback`\n         * to execute after `delay` ms.\n         */\n        lastExec = Date.now();\n\n        if (!noTrailing) {\n          timeoutID = setTimeout(debounceMode ? clear : exec, delay);\n        }\n      } else {\n        /*\n         * In throttle mode without noLeading, if `delay` time has been exceeded, execute\n         * `callback`.\n         */\n        exec();\n      }\n    } else if (noTrailing !== true) {\n      /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n\n  wrapper.cancel = cancel; // Return the wrapper function.\n\n  return wrapper;\n}\n\n/* eslint-disable no-undefined */\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param {number} delay -               A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param {Function} callback -          A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                        to `callback` when the debounced-function is executed.\n * @param {object} [options] -           An object to configure options.\n * @param {boolean} [options.atBegin] -  Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                        after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                        (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n *\n * @returns {Function} A new, debounced function.\n */\n\nfunction debounce (delay, callback, options) {\n  var _ref = options || {},\n      _ref$atBegin = _ref.atBegin,\n      atBegin = _ref$atBegin === void 0 ? false : _ref$atBegin;\n\n  return throttle(delay, callback, {\n    debounceMode: atBegin !== false\n  });\n}\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/throttle-debounce/esm/index.js\n"));

/***/ })

}]);