{"version":3,"file":"groq-store.js","sources":["../../src/listen.ts","../../src/drafts.ts","../../src/patch.ts","../../src/syncingDataset.ts","../../src/browser/getDocuments.ts","../../src/browser/index.ts","../../src/browser/support.ts","../../src/groqStore.ts"],"sourcesContent":["import {Subscription, MutationEvent, Config, ApiError, EnvImplementations} from './types'\n\ntype EventSourceInstance = InstanceType<EnvImplementations['EventSource']>\n\nconst isNativeBrowserEventSource = (\n  eventSource: EventSourceInstance\n): eventSource is InstanceType<typeof globalThis.EventSource> =>\n  typeof window !== 'undefined' &&\n  eventSource.addEventListener === window.EventSource.prototype.addEventListener\n\nconst addEventSourceListener = (\n  eventSource: EventSourceInstance,\n  type: string,\n  listener: EventListener\n): void => {\n  if (isNativeBrowserEventSource(eventSource)) {\n    eventSource.addEventListener(type, listener, false)\n  }\n\n  // Polyfilled event source does not accept option parameter\n  eventSource.addEventListener(type, listener)\n}\n\nexport function listen(\n  EventSourceImpl: EnvImplementations['EventSource'],\n  config: Config,\n  handlers: {\n    open: () => void\n    error: (err: Error) => void\n    next: (event: MutationEvent) => void\n  }\n): Subscription {\n  const {projectId, dataset, token} = config\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n  const url = `https://${projectId}.api.sanity.io/v1/data/listen/${dataset}?query=*&effectFormat=mendoza`\n  const es = new EventSourceImpl(url, {withCredentials: true, headers})\n\n  addEventSourceListener(es, 'welcome', handlers.open)\n\n  addEventSourceListener(es, 'mutation', getMutationParser(handlers.next))\n\n  addEventSourceListener(es, 'channelError', (msg: any) => {\n    es.close()\n\n    let data\n    try {\n      data = JSON.parse(msg.data) as ApiError\n    } catch (err) {\n      handlers.error(new Error('Unknown error parsing listener message'))\n      return\n    }\n\n    handlers.error(\n      new Error(data.message || data.error || `Listener returned HTTP ${data.statusCode}`)\n    )\n  })\n\n  addEventSourceListener(es, 'error', (err: Event) => {\n    const origin = typeof window !== 'undefined' && window.location.origin\n    const hintSuffix = origin ? `, and that the CORS-origin (${origin}) is allowed` : ''\n    const errorMessage = isErrorLike(err) ? ` (${err.message})` : ''\n    handlers.error(\n      new Error(\n        `Error establishing listener - check that the project ID and dataset are correct${hintSuffix}${errorMessage}`\n      )\n    )\n  })\n\n  return {\n    unsubscribe: (): Promise<void> => Promise.resolve(es.close()),\n  }\n}\n\nfunction getMutationParser(cb: (event: MutationEvent) => void): (msg: any) => void {\n  return (msg: any) => {\n    let data\n    try {\n      data = JSON.parse(msg.data)\n    } catch (err) {\n      // intentional noop\n      return\n    }\n\n    cb(data)\n  }\n}\n\nfunction isErrorLike(err: unknown): err is {message: string} {\n  return typeof err === 'object' && err !== null && 'message' in err\n}\n","import {SanityDocument} from '@sanity/types'\n\nexport function isDraft(doc: SanityDocument): boolean {\n  return doc._id.startsWith('drafts.')\n}\n\nexport function getPublishedId(document: SanityDocument): string {\n  return isDraft(document) ? document._id.slice(7) : document._id\n}\n","import {SanityDocument} from '@sanity/types'\nimport {applyPatch} from 'mendoza'\n\nexport function applyPatchWithoutRev(\n  doc: SanityDocument | null,\n  patch: unknown[]\n): SanityDocument | null {\n  const patchDoc = {...doc} as Omit<SanityDocument, '_rev'>\n  delete patchDoc._rev\n  return applyPatch(patchDoc, patch)\n}\n","import {SanityDocument} from '@sanity/types'\nimport {listen} from './listen'\nimport {getPublishedId} from './drafts'\nimport {applyPatchWithoutRev} from './patch'\nimport {Config, EnvImplementations, MutationEvent, Subscription} from './types'\n\nconst DEBOUNCE_MS = 25\n\nfunction noop() {\n  return Promise.resolve()\n}\n\nexport function getSyncingDataset(\n  config: Config,\n  onNotifyUpdate: (docs: SanityDocument[]) => void,\n  {getDocuments, EventSource}: EnvImplementations\n): Subscription & {loaded: Promise<void>} {\n  const {projectId, dataset, listen: useListener, overlayDrafts, documentLimit, token} = config\n\n  if (!useListener) {\n    const loaded = getDocuments({projectId, dataset, documentLimit, token})\n      .then(onUpdate)\n      .then(noop)\n    return {unsubscribe: noop, loaded}\n  }\n\n  const indexedDocuments = new Map<string, SanityDocument>()\n\n  // undefined until the listener has been set up and the initial export is done\n  let documents: SanityDocument[] | undefined\n\n  // holds any mutations that happen while fetching documents so they can be applied after updates\n  const buffer: MutationEvent[] = []\n\n  // Return a promise we can resolve once we've established a listener and reconciled any mutations\n  let onDoneLoading: () => void\n  let onLoadError: (error: Error) => void\n  const loaded = new Promise<void>((resolve, reject) => {\n    onDoneLoading = resolve\n    onLoadError = reject\n  })\n\n  // We don't want to flush updates while we're in the same transaction, so a normal\n  // throttle/debounce wouldn't do it. We need to wait and see if the next mutation is\n  // within the same transaction as the previous, and if not we can flush. Of course,\n  // we can't wait forever, so an upper threshold of X ms should be counted as \"ok to flush\"\n  let stagedDocs: SanityDocument[] | undefined\n  let previousTrx: string | undefined\n  let flushTimeout: NodeJS.Timer | undefined\n\n  const listener = listen(EventSource, config, {\n    next: onMutationReceived,\n    open: onOpen,\n    error: (error: Error) => onLoadError(error),\n  })\n\n  return {unsubscribe: listener.unsubscribe, loaded}\n\n  async function onOpen() {\n    const initial = await getDocuments({projectId, dataset, documentLimit, token})\n    documents = applyBufferedMutations(initial, buffer)\n    documents.forEach((doc) => indexedDocuments.set(doc._id, doc))\n    onUpdate(documents)\n    onDoneLoading()\n  }\n\n  function onMutationReceived(msg: MutationEvent) {\n    if (documents) {\n      applyMutation(msg)\n      scheduleUpdate(documents, msg)\n    } else {\n      buffer.push(msg)\n    }\n  }\n\n  function scheduleUpdate(docs: SanityDocument[], msg: MutationEvent) {\n    clearTimeout(flushTimeout)\n\n    if (previousTrx !== msg.transactionId && stagedDocs) {\n      // This is a new transaction, meaning we can immediately flush any pending\n      // doc updates if there are any\n      onUpdate(stagedDocs)\n      previousTrx = undefined\n    } else {\n      previousTrx = msg.transactionId\n      stagedDocs = docs.slice()\n    }\n\n    flushTimeout = setTimeout(onUpdate, DEBOUNCE_MS, docs.slice())\n  }\n\n  function onUpdate(docs: SanityDocument[]) {\n    stagedDocs = undefined\n    flushTimeout = undefined\n    previousTrx = undefined\n    onNotifyUpdate(overlayDrafts ? overlay(docs) : docs)\n  }\n\n  function applyMutation(msg: MutationEvent) {\n    if (!msg.effects || msg.documentId.startsWith('_.')) {\n      return\n    }\n\n    const document = indexedDocuments.get(msg.documentId) || null\n    replaceDocument(msg.documentId, applyPatchWithoutRev(document, msg.effects.apply))\n  }\n\n  function replaceDocument(id: string, document: SanityDocument | null) {\n    const current = indexedDocuments.get(id)\n    const docs = documents || []\n    const position = current ? docs.indexOf(current) : -1\n\n    if (position === -1 && document) {\n      // Didn't exist previously, but was now created. Add it.\n      docs.push(document)\n      indexedDocuments.set(id, document)\n    } else if (document) {\n      // Existed previously and still does. Replace it.\n      docs.splice(position, 1, document)\n      indexedDocuments.set(id, document)\n    } else {\n      // Existed previously, but is now deleted. Remove it.\n      docs.splice(position, 1)\n      indexedDocuments.delete(id)\n    }\n  }\n}\n\nfunction applyBufferedMutations(\n  documents: SanityDocument[],\n  mutations: MutationEvent[]\n): SanityDocument[] {\n  // Group by document ID\n  const groups = new Map<string, MutationEvent[]>()\n  mutations.forEach((mutation) => {\n    const group = groups.get(mutation.documentId) || []\n    group.push(mutation)\n    groups.set(mutation.documentId, group)\n  })\n\n  // Discard all mutations that happened before our current document\n  groups.forEach((group, id) => {\n    const document = documents.find((doc) => doc._id === id)\n    if (!document) {\n      // @todo handle\n      // eslint-disable-next-line no-console\n      console.warn('Received mutation for missing document %s', id)\n      return\n    }\n\n    // Mutations are sorted by timestamp, apply any that arrived after\n    // we fetched the initial documents\n    let hasFoundRevision = false\n    let current: SanityDocument | null = document\n    group.forEach((mutation) => {\n      hasFoundRevision = hasFoundRevision || mutation.previousRev === document._rev\n      if (!hasFoundRevision) {\n        return\n      }\n\n      if (mutation.effects) {\n        current = applyPatchWithoutRev(current, mutation.effects.apply)\n      }\n    })\n\n    // Replace the indexed documents\n    documents.splice(documents.indexOf(document), 1, current)\n  })\n\n  return documents\n}\n\nfunction overlay(documents: SanityDocument[]): SanityDocument[] {\n  const overlayed = new Map<string, SanityDocument>()\n\n  documents.forEach((doc) => {\n    const existing = overlayed.get(getPublishedId(doc))\n    if (doc._id.startsWith('drafts.')) {\n      // Drafts always overlay\n      overlayed.set(getPublishedId(doc), pretendThatItsPublished(doc))\n    } else if (!existing) {\n      // Published documents only override if draft doesn't exist\n      overlayed.set(doc._id, doc)\n    }\n  })\n\n  return Array.from(overlayed.values())\n}\n\n// Strictly speaking it would be better to allow groq-js to resolve `draft.<id>`,\n// but for now this will have to do\nfunction pretendThatItsPublished(doc: SanityDocument): SanityDocument {\n  return {...doc, _id: getPublishedId(doc)}\n}\n","import {SanityDocument} from '@sanity/types'\nimport type {ReadableStreamDefaultReadResult} from 'stream/web'\nimport {EnvImplementations} from '../types'\n\ntype StreamError = {error: {description?: string; type: string}}\ntype StreamResult = SanityDocument | StreamError\n\nexport const getDocuments: EnvImplementations['getDocuments'] = async function getDocuments({\n  projectId,\n  dataset,\n  token,\n  documentLimit,\n}: {\n  projectId: string\n  dataset: string\n  token?: string\n  documentLimit?: number\n}): Promise<SanityDocument[]> {\n  const url = `https://${projectId}.api.sanity.io/v1/data/export/${dataset}`\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n  const response = await fetch(url, {credentials: 'include', headers})\n\n  if (response.status !== 200) {\n    throw new Error(`Error streaming dataset: ${getError(await response.json())}`)\n  }\n\n  const stream = getDocumentStream(response.body)\n  const reader = stream.getReader()\n\n  const documents: SanityDocument[] = []\n  let result\n  let document\n  do {\n    result = await reader.read()\n    document = result.value\n\n    if (isStreamError(document)) {\n      throw new Error(`Error streaming dataset: ${document.error}`)\n    } else if (document && isRelevantDocument(document)) {\n      documents.push(document)\n    }\n\n    if (documentLimit && documents.length > documentLimit) {\n      reader.cancel('Reached document limit')\n      throw new Error(`Error streaming dataset: Reached limit of ${documentLimit} documents`)\n    }\n  } while (!result.done)\n\n  return documents\n}\n\nfunction getDocumentStream(body: Response['body']): ReadableStream<StreamResult> {\n  if (!body) {\n    throw new Error('Failed to read body from response')\n  }\n\n  let reader: ReadableStreamDefaultReader<Uint8Array> | undefined\n  let cancelled = false\n\n  function cancel() {\n    cancelled = true\n    if (reader) {\n      reader.cancel()\n    }\n  }\n\n  return new ReadableStream<SanityDocument>({\n    start(controller): void | PromiseLike<void> {\n      reader = body.getReader()\n      const decoder = new TextDecoder()\n      let buffer = ''\n\n      reader\n        .read()\n        .then(processResult)\n        .catch((err) => controller.error(err))\n\n      async function processResult(\n        result: ReadableStreamDefaultReadResult<Uint8Array>\n      ): Promise<void> {\n        if (result.done) {\n          if (cancelled) {\n            return\n          }\n\n          buffer = buffer.trim()\n          if (buffer.length === 0) {\n            controller.close()\n            return\n          }\n\n          controller.enqueue(JSON.parse(buffer))\n          controller.close()\n          return\n        }\n\n        buffer += decoder.decode(result.value, {stream: true})\n        const lines = buffer.split('\\n')\n\n        for (let i = 0; i < lines.length - 1; ++i) {\n          const line = lines[i].trim()\n          if (line.length === 0) {\n            continue\n          }\n\n          try {\n            controller.enqueue(JSON.parse(line))\n          } catch (err) {\n            controller.error(err)\n            cancel()\n            return\n          }\n        }\n\n        buffer = lines[lines.length - 1]\n\n        if (!reader) {\n          return\n        }\n\n        try {\n          processResult(await reader.read())\n        } catch (err) {\n          controller.error(err)\n        }\n      }\n    },\n\n    cancel,\n  })\n}\n\nfunction isStreamError(result: StreamResult | undefined): result is StreamError {\n  if (!result) {\n    return false\n  }\n\n  if (!('error' in result) || typeof result.error !== 'object' || result.error === null) {\n    return false\n  }\n\n  return (\n    'description' in result.error &&\n    typeof (result as StreamError).error.description === 'string' &&\n    !('_id' in result)\n  )\n}\n\nfunction getError(body: any): string {\n  if (typeof body === 'object' && 'error' in body && 'message' in body) {\n    return body.message || body.error\n  }\n\n  return '<unknown error>'\n}\n\nfunction isRelevantDocument(doc: SanityDocument): boolean {\n  return !doc._id.startsWith('_.')\n}\n","import {groqStore as groqStoreApi} from '../groqStore'\nimport {Config, GroqStore} from '../types'\nimport {getDocuments} from './getDocuments'\nimport {assertEnvSupport} from './support'\n\nexport function groqStore(config: Config): GroqStore {\n  assertEnvSupport()\n\n  const EventSource = config.EventSource ?? window.EventSource\n\n  if (config.token && EventSource === window.EventSource) {\n    throw new Error(\n      'When`token` option is used, `EventSource` option must also be provided. ' +\n        'EventSource cannot be `window.EventSource`, as it does not support passing a token.'\n    )\n  }\n\n  return groqStoreApi(config, {\n    EventSource,\n    getDocuments,\n  })\n}\n\nexport {default as groq} from 'groq'\nexport {Subscription, GroqStore} from '../types'\n","export function assertEnvSupport(): void {\n  const required = ['EventSource', 'ReadableStream', 'fetch']\n  const unsupported = required.filter((api) => !(api in window))\n\n  if (unsupported.length > 0) {\n    throw new Error(`Browser not supported. Missing browser APIs: ${unsupported.join(', ')}`)\n  }\n}\n","import groq from 'groq'\nimport deepEqual from 'fast-deep-equal'\nimport {throttle} from 'throttle-debounce'\nimport {SanityDocument} from '@sanity/types'\nimport {parse, evaluate} from 'groq-js'\nimport {Config, EnvImplementations, GroqSubscription, GroqStore, Subscription} from './types'\nimport {getSyncingDataset} from './syncingDataset'\n\nexport function groqStore(config: Config, envImplementations: EnvImplementations): GroqStore {\n  let documents: SanityDocument[] = []\n  const executeThrottled = throttle(config.subscriptionThrottleMs || 50, executeAllSubscriptions)\n  const activeSubscriptions: GroqSubscription[] = []\n\n  let dataset: Subscription & {loaded: Promise<void>}\n\n  async function loadDataset() {\n    if (!dataset) {\n      dataset = getSyncingDataset(\n        config,\n        (docs) => {\n          documents = docs\n          executeThrottled()\n        },\n        envImplementations\n      )\n    }\n\n    await dataset.loaded\n  }\n\n  async function query<R = any>(groqQuery: string, params?: Record<string, unknown>): Promise<R> {\n    await loadDataset()\n    const tree = parse(groqQuery, {params})\n    const result = await evaluate(tree as any, {dataset: documents, params})\n    return result.get()\n  }\n\n  async function getDocument(documentId: string): Promise<SanityDocument | null> {\n    await loadDataset()\n    return query(groq`*[_id == $id][0]`, {id: documentId})\n  }\n\n  async function getDocuments(documentIds: string[]): Promise<(SanityDocument | null)[]> {\n    await loadDataset()\n    const subQueries = documentIds.map((id) => `*[_id == \"${id}\"][0]`).join(',\\n')\n    return query(`[${subQueries}]`)\n  }\n\n  function subscribe<R = any>(\n    groqQuery: string,\n    params: Record<string, unknown>,\n    callback: (error: Error | undefined, result?: R) => void\n  ): Subscription {\n    if (!config.listen) {\n      throw new Error('Cannot use `subscribe()` without `listen: true`')\n    }\n\n    // @todo Execute the query against an empty dataset for validation purposes\n\n    // Store the subscription so we can re-run the query on new data\n    const subscription = {query: groqQuery, params, callback}\n    activeSubscriptions.push(subscription)\n\n    let unsubscribed = false\n    const unsubscribe = () => {\n      if (unsubscribed) {\n        return Promise.resolve()\n      }\n\n      unsubscribed = true\n      activeSubscriptions.splice(activeSubscriptions.indexOf(subscription), 1)\n      return Promise.resolve()\n    }\n\n    executeQuerySubscription(subscription)\n    return {unsubscribe}\n  }\n\n  function executeQuerySubscription(subscription: GroqSubscription) {\n    return query(subscription.query, subscription.params)\n      .then((res) => {\n        if ('previousResult' in subscription && deepEqual(subscription.previousResult, res)) {\n          return\n        }\n\n        subscription.previousResult = res\n        subscription.callback(undefined, res)\n      })\n      .catch((err) => {\n        subscription.callback(err)\n      })\n  }\n\n  function executeAllSubscriptions() {\n    activeSubscriptions.forEach(executeQuerySubscription)\n  }\n\n  function close() {\n    executeThrottled.cancel()\n    return dataset ? dataset.unsubscribe() : Promise.resolve()\n  }\n\n  return {query, getDocument, getDocuments, subscribe, close}\n}\n"],"names":["addEventSourceListener","eventSource","type","listener","window","addEventListener","EventSource","prototype","isNativeBrowserEventSource","listen","EventSourceImpl","config","handlers","cb","token","es","projectId","dataset","withCredentials","headers","Authorization","undefined","open","next","msg","data","JSON","parse","err","close","error","Error","message","statusCode","origin","location","hintSuffix","errorMessage","isErrorLike","unsubscribe","Promise","resolve","getPublishedId","document","_id","startsWith","slice","applyPatchWithoutRev","doc","patch","patchDoc","_rev","applyPatch","noop","_settle","pact","state","value","s","_Pact","o","bind","v","then","observer","onFulfilled","onRejected","result","this","callback","e","_this","_isSettledPact","thenable","getDocuments","_ref","documentLimit","fetch","credentials","response","_temp3","_result","stream","body","reader","cancelled","cancel","ReadableStream","start","controller","getReader","decoder","TextDecoder","buffer","read","processResult","done","trim","length","enqueue","lines","decode","split","i","line","_temp5","_reader$read2","_catch","reject","getDocumentStream","documents","_temp","_do","_reader$read","description","isStreamError","push","_temp2","status","json","getError","_response$json","_config$EventSource","unsupported","filter","api","join","assertEnvSupport","groqStore","envImplementations","query","groqQuery","params","loadDataset","tree","evaluate","get","onNotifyUpdate","overlayDrafts","loaded","onUpdate","onDoneLoading","onLoadError","indexedDocuments","Map","effects","documentId","id","current","docs","position","indexOf","set","splice","replaceDocument","apply","applyMutation","clearTimeout","flushTimeout","previousTrx","transactionId","stagedDocs","setTimeout","scheduleUpdate","onOpen","initial","mutations","groups","forEach","mutation","group","find","hasFoundRevision","previousRev","console","warn","applyBufferedMutations","overlayed","existing","pretendThatItsPublished","Array","from","values","overlay","getSyncingDataset","executeThrottled","throttle","subscriptionThrottleMs","activeSubscriptions","executeQuerySubscription","subscription","res","deepEqual","previousResult","getDocument","groq","_templateObject","documentIds","subQueries","map","subscribe","unsubscribed","groqStoreApi"],"mappings":"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"}