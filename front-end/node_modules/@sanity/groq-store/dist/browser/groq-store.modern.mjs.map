{"version":3,"file":"groq-store.modern.mjs","sources":["../../src/listen.ts","../../src/drafts.ts","../../src/patch.ts","../../src/syncingDataset.ts","../../src/browser/getDocuments.ts","../../src/browser/index.ts","../../src/browser/support.ts","../../src/groqStore.ts"],"sourcesContent":["import {Subscription, MutationEvent, Config, ApiError, EnvImplementations} from './types'\n\ntype EventSourceInstance = InstanceType<EnvImplementations['EventSource']>\n\nconst isNativeBrowserEventSource = (\n  eventSource: EventSourceInstance\n): eventSource is InstanceType<typeof globalThis.EventSource> =>\n  typeof window !== 'undefined' &&\n  eventSource.addEventListener === window.EventSource.prototype.addEventListener\n\nconst addEventSourceListener = (\n  eventSource: EventSourceInstance,\n  type: string,\n  listener: EventListener\n): void => {\n  if (isNativeBrowserEventSource(eventSource)) {\n    eventSource.addEventListener(type, listener, false)\n  }\n\n  // Polyfilled event source does not accept option parameter\n  eventSource.addEventListener(type, listener)\n}\n\nexport function listen(\n  EventSourceImpl: EnvImplementations['EventSource'],\n  config: Config,\n  handlers: {\n    open: () => void\n    error: (err: Error) => void\n    next: (event: MutationEvent) => void\n  }\n): Subscription {\n  const {projectId, dataset, token} = config\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n  const url = `https://${projectId}.api.sanity.io/v1/data/listen/${dataset}?query=*&effectFormat=mendoza`\n  const es = new EventSourceImpl(url, {withCredentials: true, headers})\n\n  addEventSourceListener(es, 'welcome', handlers.open)\n\n  addEventSourceListener(es, 'mutation', getMutationParser(handlers.next))\n\n  addEventSourceListener(es, 'channelError', (msg: any) => {\n    es.close()\n\n    let data\n    try {\n      data = JSON.parse(msg.data) as ApiError\n    } catch (err) {\n      handlers.error(new Error('Unknown error parsing listener message'))\n      return\n    }\n\n    handlers.error(\n      new Error(data.message || data.error || `Listener returned HTTP ${data.statusCode}`)\n    )\n  })\n\n  addEventSourceListener(es, 'error', (err: Event) => {\n    const origin = typeof window !== 'undefined' && window.location.origin\n    const hintSuffix = origin ? `, and that the CORS-origin (${origin}) is allowed` : ''\n    const errorMessage = isErrorLike(err) ? ` (${err.message})` : ''\n    handlers.error(\n      new Error(\n        `Error establishing listener - check that the project ID and dataset are correct${hintSuffix}${errorMessage}`\n      )\n    )\n  })\n\n  return {\n    unsubscribe: (): Promise<void> => Promise.resolve(es.close()),\n  }\n}\n\nfunction getMutationParser(cb: (event: MutationEvent) => void): (msg: any) => void {\n  return (msg: any) => {\n    let data\n    try {\n      data = JSON.parse(msg.data)\n    } catch (err) {\n      // intentional noop\n      return\n    }\n\n    cb(data)\n  }\n}\n\nfunction isErrorLike(err: unknown): err is {message: string} {\n  return typeof err === 'object' && err !== null && 'message' in err\n}\n","import {SanityDocument} from '@sanity/types'\n\nexport function isDraft(doc: SanityDocument): boolean {\n  return doc._id.startsWith('drafts.')\n}\n\nexport function getPublishedId(document: SanityDocument): string {\n  return isDraft(document) ? document._id.slice(7) : document._id\n}\n","import {SanityDocument} from '@sanity/types'\nimport {applyPatch} from 'mendoza'\n\nexport function applyPatchWithoutRev(\n  doc: SanityDocument | null,\n  patch: unknown[]\n): SanityDocument | null {\n  const patchDoc = {...doc} as Omit<SanityDocument, '_rev'>\n  delete patchDoc._rev\n  return applyPatch(patchDoc, patch)\n}\n","import {SanityDocument} from '@sanity/types'\nimport {listen} from './listen'\nimport {getPublishedId} from './drafts'\nimport {applyPatchWithoutRev} from './patch'\nimport {Config, EnvImplementations, MutationEvent, Subscription} from './types'\n\nconst DEBOUNCE_MS = 25\n\nfunction noop() {\n  return Promise.resolve()\n}\n\nexport function getSyncingDataset(\n  config: Config,\n  onNotifyUpdate: (docs: SanityDocument[]) => void,\n  {getDocuments, EventSource}: EnvImplementations\n): Subscription & {loaded: Promise<void>} {\n  const {projectId, dataset, listen: useListener, overlayDrafts, documentLimit, token} = config\n\n  if (!useListener) {\n    const loaded = getDocuments({projectId, dataset, documentLimit, token})\n      .then(onUpdate)\n      .then(noop)\n    return {unsubscribe: noop, loaded}\n  }\n\n  const indexedDocuments = new Map<string, SanityDocument>()\n\n  // undefined until the listener has been set up and the initial export is done\n  let documents: SanityDocument[] | undefined\n\n  // holds any mutations that happen while fetching documents so they can be applied after updates\n  const buffer: MutationEvent[] = []\n\n  // Return a promise we can resolve once we've established a listener and reconciled any mutations\n  let onDoneLoading: () => void\n  let onLoadError: (error: Error) => void\n  const loaded = new Promise<void>((resolve, reject) => {\n    onDoneLoading = resolve\n    onLoadError = reject\n  })\n\n  // We don't want to flush updates while we're in the same transaction, so a normal\n  // throttle/debounce wouldn't do it. We need to wait and see if the next mutation is\n  // within the same transaction as the previous, and if not we can flush. Of course,\n  // we can't wait forever, so an upper threshold of X ms should be counted as \"ok to flush\"\n  let stagedDocs: SanityDocument[] | undefined\n  let previousTrx: string | undefined\n  let flushTimeout: NodeJS.Timer | undefined\n\n  const listener = listen(EventSource, config, {\n    next: onMutationReceived,\n    open: onOpen,\n    error: (error: Error) => onLoadError(error),\n  })\n\n  return {unsubscribe: listener.unsubscribe, loaded}\n\n  async function onOpen() {\n    const initial = await getDocuments({projectId, dataset, documentLimit, token})\n    documents = applyBufferedMutations(initial, buffer)\n    documents.forEach((doc) => indexedDocuments.set(doc._id, doc))\n    onUpdate(documents)\n    onDoneLoading()\n  }\n\n  function onMutationReceived(msg: MutationEvent) {\n    if (documents) {\n      applyMutation(msg)\n      scheduleUpdate(documents, msg)\n    } else {\n      buffer.push(msg)\n    }\n  }\n\n  function scheduleUpdate(docs: SanityDocument[], msg: MutationEvent) {\n    clearTimeout(flushTimeout)\n\n    if (previousTrx !== msg.transactionId && stagedDocs) {\n      // This is a new transaction, meaning we can immediately flush any pending\n      // doc updates if there are any\n      onUpdate(stagedDocs)\n      previousTrx = undefined\n    } else {\n      previousTrx = msg.transactionId\n      stagedDocs = docs.slice()\n    }\n\n    flushTimeout = setTimeout(onUpdate, DEBOUNCE_MS, docs.slice())\n  }\n\n  function onUpdate(docs: SanityDocument[]) {\n    stagedDocs = undefined\n    flushTimeout = undefined\n    previousTrx = undefined\n    onNotifyUpdate(overlayDrafts ? overlay(docs) : docs)\n  }\n\n  function applyMutation(msg: MutationEvent) {\n    if (!msg.effects || msg.documentId.startsWith('_.')) {\n      return\n    }\n\n    const document = indexedDocuments.get(msg.documentId) || null\n    replaceDocument(msg.documentId, applyPatchWithoutRev(document, msg.effects.apply))\n  }\n\n  function replaceDocument(id: string, document: SanityDocument | null) {\n    const current = indexedDocuments.get(id)\n    const docs = documents || []\n    const position = current ? docs.indexOf(current) : -1\n\n    if (position === -1 && document) {\n      // Didn't exist previously, but was now created. Add it.\n      docs.push(document)\n      indexedDocuments.set(id, document)\n    } else if (document) {\n      // Existed previously and still does. Replace it.\n      docs.splice(position, 1, document)\n      indexedDocuments.set(id, document)\n    } else {\n      // Existed previously, but is now deleted. Remove it.\n      docs.splice(position, 1)\n      indexedDocuments.delete(id)\n    }\n  }\n}\n\nfunction applyBufferedMutations(\n  documents: SanityDocument[],\n  mutations: MutationEvent[]\n): SanityDocument[] {\n  // Group by document ID\n  const groups = new Map<string, MutationEvent[]>()\n  mutations.forEach((mutation) => {\n    const group = groups.get(mutation.documentId) || []\n    group.push(mutation)\n    groups.set(mutation.documentId, group)\n  })\n\n  // Discard all mutations that happened before our current document\n  groups.forEach((group, id) => {\n    const document = documents.find((doc) => doc._id === id)\n    if (!document) {\n      // @todo handle\n      // eslint-disable-next-line no-console\n      console.warn('Received mutation for missing document %s', id)\n      return\n    }\n\n    // Mutations are sorted by timestamp, apply any that arrived after\n    // we fetched the initial documents\n    let hasFoundRevision = false\n    let current: SanityDocument | null = document\n    group.forEach((mutation) => {\n      hasFoundRevision = hasFoundRevision || mutation.previousRev === document._rev\n      if (!hasFoundRevision) {\n        return\n      }\n\n      if (mutation.effects) {\n        current = applyPatchWithoutRev(current, mutation.effects.apply)\n      }\n    })\n\n    // Replace the indexed documents\n    documents.splice(documents.indexOf(document), 1, current)\n  })\n\n  return documents\n}\n\nfunction overlay(documents: SanityDocument[]): SanityDocument[] {\n  const overlayed = new Map<string, SanityDocument>()\n\n  documents.forEach((doc) => {\n    const existing = overlayed.get(getPublishedId(doc))\n    if (doc._id.startsWith('drafts.')) {\n      // Drafts always overlay\n      overlayed.set(getPublishedId(doc), pretendThatItsPublished(doc))\n    } else if (!existing) {\n      // Published documents only override if draft doesn't exist\n      overlayed.set(doc._id, doc)\n    }\n  })\n\n  return Array.from(overlayed.values())\n}\n\n// Strictly speaking it would be better to allow groq-js to resolve `draft.<id>`,\n// but for now this will have to do\nfunction pretendThatItsPublished(doc: SanityDocument): SanityDocument {\n  return {...doc, _id: getPublishedId(doc)}\n}\n","import {SanityDocument} from '@sanity/types'\nimport type {ReadableStreamDefaultReadResult} from 'stream/web'\nimport {EnvImplementations} from '../types'\n\ntype StreamError = {error: {description?: string; type: string}}\ntype StreamResult = SanityDocument | StreamError\n\nexport const getDocuments: EnvImplementations['getDocuments'] = async function getDocuments({\n  projectId,\n  dataset,\n  token,\n  documentLimit,\n}: {\n  projectId: string\n  dataset: string\n  token?: string\n  documentLimit?: number\n}): Promise<SanityDocument[]> {\n  const url = `https://${projectId}.api.sanity.io/v1/data/export/${dataset}`\n  const headers = token ? {Authorization: `Bearer ${token}`} : undefined\n  const response = await fetch(url, {credentials: 'include', headers})\n\n  if (response.status !== 200) {\n    throw new Error(`Error streaming dataset: ${getError(await response.json())}`)\n  }\n\n  const stream = getDocumentStream(response.body)\n  const reader = stream.getReader()\n\n  const documents: SanityDocument[] = []\n  let result\n  let document\n  do {\n    result = await reader.read()\n    document = result.value\n\n    if (isStreamError(document)) {\n      throw new Error(`Error streaming dataset: ${document.error}`)\n    } else if (document && isRelevantDocument(document)) {\n      documents.push(document)\n    }\n\n    if (documentLimit && documents.length > documentLimit) {\n      reader.cancel('Reached document limit')\n      throw new Error(`Error streaming dataset: Reached limit of ${documentLimit} documents`)\n    }\n  } while (!result.done)\n\n  return documents\n}\n\nfunction getDocumentStream(body: Response['body']): ReadableStream<StreamResult> {\n  if (!body) {\n    throw new Error('Failed to read body from response')\n  }\n\n  let reader: ReadableStreamDefaultReader<Uint8Array> | undefined\n  let cancelled = false\n\n  function cancel() {\n    cancelled = true\n    if (reader) {\n      reader.cancel()\n    }\n  }\n\n  return new ReadableStream<SanityDocument>({\n    start(controller): void | PromiseLike<void> {\n      reader = body.getReader()\n      const decoder = new TextDecoder()\n      let buffer = ''\n\n      reader\n        .read()\n        .then(processResult)\n        .catch((err) => controller.error(err))\n\n      async function processResult(\n        result: ReadableStreamDefaultReadResult<Uint8Array>\n      ): Promise<void> {\n        if (result.done) {\n          if (cancelled) {\n            return\n          }\n\n          buffer = buffer.trim()\n          if (buffer.length === 0) {\n            controller.close()\n            return\n          }\n\n          controller.enqueue(JSON.parse(buffer))\n          controller.close()\n          return\n        }\n\n        buffer += decoder.decode(result.value, {stream: true})\n        const lines = buffer.split('\\n')\n\n        for (let i = 0; i < lines.length - 1; ++i) {\n          const line = lines[i].trim()\n          if (line.length === 0) {\n            continue\n          }\n\n          try {\n            controller.enqueue(JSON.parse(line))\n          } catch (err) {\n            controller.error(err)\n            cancel()\n            return\n          }\n        }\n\n        buffer = lines[lines.length - 1]\n\n        if (!reader) {\n          return\n        }\n\n        try {\n          processResult(await reader.read())\n        } catch (err) {\n          controller.error(err)\n        }\n      }\n    },\n\n    cancel,\n  })\n}\n\nfunction isStreamError(result: StreamResult | undefined): result is StreamError {\n  if (!result) {\n    return false\n  }\n\n  if (!('error' in result) || typeof result.error !== 'object' || result.error === null) {\n    return false\n  }\n\n  return (\n    'description' in result.error &&\n    typeof (result as StreamError).error.description === 'string' &&\n    !('_id' in result)\n  )\n}\n\nfunction getError(body: any): string {\n  if (typeof body === 'object' && 'error' in body && 'message' in body) {\n    return body.message || body.error\n  }\n\n  return '<unknown error>'\n}\n\nfunction isRelevantDocument(doc: SanityDocument): boolean {\n  return !doc._id.startsWith('_.')\n}\n","import {groqStore as groqStoreApi} from '../groqStore'\nimport {Config, GroqStore} from '../types'\nimport {getDocuments} from './getDocuments'\nimport {assertEnvSupport} from './support'\n\nexport function groqStore(config: Config): GroqStore {\n  assertEnvSupport()\n\n  const EventSource = config.EventSource ?? window.EventSource\n\n  if (config.token && EventSource === window.EventSource) {\n    throw new Error(\n      'When`token` option is used, `EventSource` option must also be provided. ' +\n        'EventSource cannot be `window.EventSource`, as it does not support passing a token.'\n    )\n  }\n\n  return groqStoreApi(config, {\n    EventSource,\n    getDocuments,\n  })\n}\n\nexport {default as groq} from 'groq'\nexport {Subscription, GroqStore} from '../types'\n","export function assertEnvSupport(): void {\n  const required = ['EventSource', 'ReadableStream', 'fetch']\n  const unsupported = required.filter((api) => !(api in window))\n\n  if (unsupported.length > 0) {\n    throw new Error(`Browser not supported. Missing browser APIs: ${unsupported.join(', ')}`)\n  }\n}\n","import groq from 'groq'\nimport deepEqual from 'fast-deep-equal'\nimport {throttle} from 'throttle-debounce'\nimport {SanityDocument} from '@sanity/types'\nimport {parse, evaluate} from 'groq-js'\nimport {Config, EnvImplementations, GroqSubscription, GroqStore, Subscription} from './types'\nimport {getSyncingDataset} from './syncingDataset'\n\nexport function groqStore(config: Config, envImplementations: EnvImplementations): GroqStore {\n  let documents: SanityDocument[] = []\n  const executeThrottled = throttle(config.subscriptionThrottleMs || 50, executeAllSubscriptions)\n  const activeSubscriptions: GroqSubscription[] = []\n\n  let dataset: Subscription & {loaded: Promise<void>}\n\n  async function loadDataset() {\n    if (!dataset) {\n      dataset = getSyncingDataset(\n        config,\n        (docs) => {\n          documents = docs\n          executeThrottled()\n        },\n        envImplementations\n      )\n    }\n\n    await dataset.loaded\n  }\n\n  async function query<R = any>(groqQuery: string, params?: Record<string, unknown>): Promise<R> {\n    await loadDataset()\n    const tree = parse(groqQuery, {params})\n    const result = await evaluate(tree as any, {dataset: documents, params})\n    return result.get()\n  }\n\n  async function getDocument(documentId: string): Promise<SanityDocument | null> {\n    await loadDataset()\n    return query(groq`*[_id == $id][0]`, {id: documentId})\n  }\n\n  async function getDocuments(documentIds: string[]): Promise<(SanityDocument | null)[]> {\n    await loadDataset()\n    const subQueries = documentIds.map((id) => `*[_id == \"${id}\"][0]`).join(',\\n')\n    return query(`[${subQueries}]`)\n  }\n\n  function subscribe<R = any>(\n    groqQuery: string,\n    params: Record<string, unknown>,\n    callback: (error: Error | undefined, result?: R) => void\n  ): Subscription {\n    if (!config.listen) {\n      throw new Error('Cannot use `subscribe()` without `listen: true`')\n    }\n\n    // @todo Execute the query against an empty dataset for validation purposes\n\n    // Store the subscription so we can re-run the query on new data\n    const subscription = {query: groqQuery, params, callback}\n    activeSubscriptions.push(subscription)\n\n    let unsubscribed = false\n    const unsubscribe = () => {\n      if (unsubscribed) {\n        return Promise.resolve()\n      }\n\n      unsubscribed = true\n      activeSubscriptions.splice(activeSubscriptions.indexOf(subscription), 1)\n      return Promise.resolve()\n    }\n\n    executeQuerySubscription(subscription)\n    return {unsubscribe}\n  }\n\n  function executeQuerySubscription(subscription: GroqSubscription) {\n    return query(subscription.query, subscription.params)\n      .then((res) => {\n        if ('previousResult' in subscription && deepEqual(subscription.previousResult, res)) {\n          return\n        }\n\n        subscription.previousResult = res\n        subscription.callback(undefined, res)\n      })\n      .catch((err) => {\n        subscription.callback(err)\n      })\n  }\n\n  function executeAllSubscriptions() {\n    activeSubscriptions.forEach(executeQuerySubscription)\n  }\n\n  function close() {\n    executeThrottled.cancel()\n    return dataset ? dataset.unsubscribe() : Promise.resolve()\n  }\n\n  return {query, getDocument, getDocuments, subscribe, close}\n}\n"],"names":["eventSource","type","listener","window","addEventListener","EventSource","prototype","isNativeBrowserEventSource","EventSourceImpl","config","handlers","projectId","dataset","token","withCredentials","headers","Authorization","undefined","cb","addEventSourceListener","es","open","next","msg","data","JSON","parse","err","close","error","Error","message","statusCode","origin","location","isErrorLike","hintSuffix","errorMessage","unsubscribe","Promise","resolve","getPublishedId","document","_id","startsWith","slice","applyPatchWithoutRev","doc","patch","patchDoc","_rev","applyPatch","noop","getDocuments","async","documentLimit","url","fetch","credentials","response","status","body","json","stream","cancelled","cancel","reader","ReadableStream","start","controller","getReader","TextDecoder","buffer","read","then","result","done","trim","length","enqueue","decoder","decode","value","split","i","lines","line","processResult","catch","getDocumentStream","documents","isStreamError","push","description","groqStore","assertEnvSupport","unsupported","filter","api","join","_config$EventSource","envImplementations","executeThrottled","throttle","subscriptionThrottleMs","activeSubscriptions","forEach","executeQuerySubscription","getSyncingDataset","onNotifyUpdate","listen","useListener","overlayDrafts","loaded","onUpdate","indexedDocuments","Map","onDoneLoading","onLoadError","reject","stagedDocs","previousTrx","flushTimeout","effects","documentId","get","id","current","docs","position","indexOf","set","splice","delete","replaceDocument","apply","applyMutation","clearTimeout","transactionId","setTimeout","scheduleUpdate","initial","mutations","groups","mutation","group","find","console","warn","hasFoundRevision","previousRev","applyBufferedMutations","overlayed","existing","_extends","pretendThatItsPublished","Array","from","values","overlay","query","groqQuery","params","loadDataset","evaluate","tree","subscription","res","deepEqual","previousResult","callback","getDocument","groq","_t","_","documentIds","map","subscribe","unsubscribed"],"mappings":"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"}